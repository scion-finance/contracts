{
  "address": "0xEC71e47c3573D50FFc5f5AD43EB81598c5B65d8a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "want",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitFeeTaken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operationalFeeTaken",
          "type": "uint256"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvlBeforeRebalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "UpdatedManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardsAddr",
          "type": "address"
        }
      ],
      "name": "UpdatedRewardsAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "want",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outToken",
          "type": "address"
        }
      ],
      "name": "_swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outToken",
          "type": "address"
        }
      ],
      "name": "_swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountDepositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedTotalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wantBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "want",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "short",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenLend",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenBorrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniPair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniFarm",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmLp",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "benqiPair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "benqiToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "safeCollateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "operationalFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profitFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            }
          ],
          "internalType": "struct vUSDCavaxPB.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationalFeeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ICompPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitFeeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceThreshold",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsAddr_",
          "type": "address"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharePriceTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "short",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultTvlLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x561bf08e733c045ccf24b1073eecd91f1bee37e08e1e1e2a0e5db053c385d8ae",
  "receipt": {
    "to": null,
    "from": "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "contractAddress": "0xEC71e47c3573D50FFc5f5AD43EB81598c5B65d8a",
    "transactionIndex": 7,
    "gasUsed": "5305988",
    "logsBloom": "0x
    "blockHash": "0xc1c8c555b824ca781fa879d411af136b491ac0bf755621dd8ea98f4ecccc54b0",
    "transactionHash": "0x561bf08e733c045ccf24b1073eecd91f1bee37e08e1e1e2a0e5db053c385d8ae",
    "logs": [],
    "blockNumber": 8112549,
    "cumulativeGasUsed": "5845956",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "25b29b4a1f5fdd3cdbf1fe5c2d83cbbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFeeTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operationalFeeTaken\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvlBeforeRebalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"UpdatedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsAddr\",\"type\":\"address\"}],\"name\":\"UpdatedRewardsAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"}],\"name\":\"_swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"}],\"name\":\"_swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"short\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"benqiPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"benqiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safeCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operationalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"internalType\":\"struct vUSDCavaxPB.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ICompPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsAddr_\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePriceTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"short\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultTvlLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"estimatedTotalAssets()\":{\"details\":\"Care must be taken in using this function, since it relies on external  systems, which could be manipulated by the attacker to give an inflated  (or reduced) value produced by this function, wantd on current on-chain  conditions (e.g. this function is possible to influence through  flashloan attacks, oracle manipulations, or other DeFi attack  mechanisms).\",\"returns\":{\"assets\":\"The estimated total assets in this Strategy.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"harvest()\":{\"details\":\"When `harvest()` is called, the Strategy reports to the Vault (via  `vault.report()`), so in some cases `harvest()` must be called in order  to take in profits, to borrow newly available funds from the Vault, or  otherwise adjust its position. In other cases `harvest()` must be  called to report to the Vault on the Strategy's position, especially if  any losses have occurred.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setRewards(address)\":{\"params\":{\"rewardsAddr_\":\"The address to use for pulling rewards.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimatedTotalAssets()\":{\"notice\":\"Provide an accurate estimate for the total amount of assets  (principle + return) that this Strategy is currently managing,  denominated in terms of `want` tokens.  This total should be \\\"realizable\\\" e.g. the total value that could  *actually* be obtained from this Strategy if it were to divest its  entire position wantd on current on-chain conditions.\"},\"getPricePerShare()\":{\"notice\":\"Returns the share price of the strategy in `want` units, multiplied  by 1e18\"},\"harvest()\":{\"notice\":\"Harvests the Strategy  This may only be called by MANAGER_ROLE.\"},\"setRewards(address)\":{\"notice\":\"Used to change `rewards`. EOA or smart contract which has the permission  to pull rewards from the vault.  This may only be called by the manager.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vUSDCavaxPB.sol\":\"vUSDCavaxPB\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseStrategy is\\n\\tInitializable,\\n\\tERC20Upgradeable,\\n\\tERC20PermitUpgradeable,\\n\\tAccessControlUpgradeable,\\n\\tReentrancyGuardUpgradeable\\n{\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tuint256 constant BPS_ADJUST = 10000;\\n\\tuint256 private constant SHARE_DECIMALS = 1e18;\\n\\n\\tbytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\tbytes32 public constant WHITELIST_ROLE = keccak256(\\\"WHITELIST_ROLE\\\");\\n\\n\\t// upper limit for fees so owner cannot maliciously increase fees TODO - used when not upgradable\\n\\tuint256 public constant operationalFeeLimit = 500; // 5% limit\\n\\tuint256 public constant profitFeeLimit = 20000; // 20% limit\\n\\n\\t// Vault limits TODO use these\\n\\tuint256 public accountDepositLimit; // max deposit per account\\n\\tuint256 public vaultTvlLimit; // max vault TVL. if this is reached, deposits will fail.\\n\\n\\t// these need initialization\\n\\tuint256 public sharePriceTracker;\\n\\tuint256 public operationalFee;\\n\\tuint256 public profitFee;\\n\\taddress public rewardsAddr;\\n\\tuint256 public lastHarvest; // block.timestamp;\\n\\n\\tevent UpdatedManager(address newManager);\\n\\tevent Harvested(uint256 harvested, uint256 profitFeeTaken, uint256 operationalFeeTaken);\\n\\tevent Deposit(address addr, uint256 want, uint256 shares);\\n\\tevent Withdrawal(address addr, uint256 want, uint256 shares, uint256 fee);\\n\\tevent UpdatedRewardsAddr(address rewardsAddr);\\n\\tevent Rebalance(uint256 shortPrice, uint256 tvlBeforeRebalance, uint256 positionOffset);\\n\\n\\tfunction __BaseStrategy_init_unchained(\\n\\t\\taddress rewardsAddr_,\\n\\t\\tuint256 operationalFee_,\\n\\t\\tuint256 profitFee_,\\n\\t\\taddress manager\\n\\t) internal initializer {\\n\\t\\trequire(\\n\\t\\t\\toperationalFee_ < operationalFeeLimit,\\n\\t\\t\\t\\\"BaseStrategy: operationalFee exceeds limit\\\"\\n\\t\\t);\\n\\t\\trequire(profitFee_ < profitFeeLimit, \\\"BaseStrategy: profitFee exceeds limit\\\");\\n\\n\\t\\t__ReentrancyGuard_init_unchained();\\n\\t\\t_setupRole(MANAGER_ROLE, manager);\\n\\t\\t_setupRole(WHITELIST_ROLE, manager);\\n\\t\\t_setupRole(WHITELIST_ROLE, msg.sender);\\n\\n\\t\\trewardsAddr = rewardsAddr_;\\n\\t\\toperationalFee = operationalFee_;\\n\\t\\tprofitFee = profitFee_;\\n\\n\\t\\t// init defaults\\n\\t\\tsharePriceTracker = SHARE_DECIMALS; // init at 1\\n\\t\\tlastHarvest = block.timestamp;\\n\\t\\taccountDepositLimit = type(uint256).max; // max deposit per account\\n\\t\\tvaultTvlLimit = type(uint256).max; // max vault TVL. if this is reached, deposits will fail.\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Used to change `rewards`. EOA or smart contract which has the permission\\n\\t *  to pull rewards from the vault.\\n\\t *\\n\\t *  This may only be called by the manager.\\n\\t * @param rewardsAddr_ The address to use for pulling rewards.\\n\\t */\\n\\t// function setRewards(address rewardsAddr_) external onlyOwner {\\n\\tfunction setRewards(address rewardsAddr_) external onlyRole(MANAGER_ROLE) {\\n\\t\\trequire(rewardsAddr_ != address(0));\\n\\t\\trewardsAddr_ = rewardsAddr_;\\n\\t\\temit UpdatedRewardsAddr(rewardsAddr_);\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Provide an accurate estimate for the total amount of assets\\n\\t *  (principle + return) that this Strategy is currently managing,\\n\\t *  denominated in terms of `want` tokens.\\n\\t *\\n\\t *  This total should be \\\"realizable\\\" e.g. the total value that could\\n\\t *  *actually* be obtained from this Strategy if it were to divest its\\n\\t *  entire position wantd on current on-chain conditions.\\n\\t * @dev\\n\\t *  Care must be taken in using this function, since it relies on external\\n\\t *  systems, which could be manipulated by the attacker to give an inflated\\n\\t *  (or reduced) value produced by this function, wantd on current on-chain\\n\\t *  conditions (e.g. this function is possible to influence through\\n\\t *  flashloan attacks, oracle manipulations, or other DeFi attack\\n\\t *  mechanisms).\\n\\t *\\n\\t * @return The estimated total assets in this Strategy.\\n\\t */\\n\\tfunction estimatedTotalAssets() public view virtual returns (uint256);\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Harvests the Strategy\\n\\t *\\n\\t *  This may only be called by MANAGER_ROLE.\\n\\t * @dev\\n\\t *  When `harvest()` is called, the Strategy reports to the Vault (via\\n\\t *  `vault.report()`), so in some cases `harvest()` must be called in order\\n\\t *  to take in profits, to borrow newly available funds from the Vault, or\\n\\t *  otherwise adjust its position. In other cases `harvest()` must be\\n\\t *  called to report to the Vault on the Strategy's position, especially if\\n\\t *  any losses have occurred.\\n\\t */\\n\\t// function harvest() external onlyOwner {\\n\\tfunction harvest() external onlyRole(MANAGER_ROLE) {\\n\\t\\t// harvest\\n\\t\\tuint256 harvested = _harvestInternal();\\n\\n\\t\\t// Take fees\\n\\t\\t(uint256 pFee, uint256 oFee) = takeFees();\\n\\n\\t\\t// Update harvest timestamp - used for fee calculations\\n\\t\\tlastHarvest = block.timestamp;\\n\\n\\t\\temit Harvested(harvested, pFee, oFee);\\n\\t}\\n\\n\\t/**\\n\\t * Virtual function for triggering a harvest\\n\\t *\\n\\t * Returns\\n\\t * want harvested in harvest\\n\\t */\\n\\tfunction _harvestInternal() internal virtual returns (uint256 _wantHarvested);\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Returns the share price of the strategy in `want` units, multiplied\\n\\t *  by 1e18\\n\\t */\\n\\tfunction getPricePerShare() public view returns (uint256) {\\n\\t\\tuint256 bal = estimatedTotalAssets();\\n\\t\\tuint256 supply = totalSupply();\\n\\t\\treturn (bal * SHARE_DECIMALS) / supply;\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Takes the fees from the vault and distributes it to manager selected `rewards` address.\\n\\t *   - Fees are issued as minted shares.\\n\\t *\\n\\t *  Profit Fee:\\n\\t *  A percentage fee take on profits.\\n\\t *\\n\\t *  Operational Fee:\\n\\t *  The operational fee is a percentage of TVL taken incrementally each harvest\\n\\t *  over 365 days.\\n\\t */\\n\\tfunction takeFees() internal returns (uint256 _profitFeeMinted, uint256 _operationFeeMinted) {\\n\\t\\tuint256 pricePerShare = getPricePerShare();\\n\\t\\t// only take performance fee on profits\\n\\t\\tif (pricePerShare > sharePriceTracker) {\\n\\t\\t\\tuint256 profitPerShare = pricePerShare - sharePriceTracker;\\n\\t\\t\\tuint256 profitPercent = (profitPerShare * SHARE_DECIMALS) / sharePriceTracker;\\n\\t\\t\\t_profitFeeMinted =\\n\\t\\t\\t\\t(totalSupply() * profitPercent * profitFee) /\\n\\t\\t\\t\\tBPS_ADJUST /\\n\\t\\t\\t\\tSHARE_DECIMALS;\\n\\n\\t\\t\\t// uint256 profitFeeGov = (_profitFeeMinted * profitFeeGovernance) / BPS_ADJUST;\\n\\t\\t\\t// uint256 profitFeeStrat = _profitFeeMinted - profitFeeGov;\\n\\t\\t\\t// _mint(rewards, profitFeeStrat);\\n\\t\\t\\t// _mint(governance, profitFeeGov);\\n\\t\\t\\t_mint(rewardsAddr, _profitFeeMinted);\\n\\t\\t\\tsharePriceTracker = pricePerShare;\\n\\t\\t}\\n\\n\\t\\tif (operationalFee != 0) {\\n\\t\\t\\t// take operational fee\\n\\t\\t\\tuint256 timeSinceHarvest = block.timestamp - lastHarvest;\\n\\t\\t\\tuint256 annualAdj = uint256(365) * 24 * 60 * 60;\\n\\t\\t\\t_operationFeeMinted =\\n\\t\\t\\t\\t(operationalFee * timeSinceHarvest * totalSupply()) /\\n\\t\\t\\t\\tBPS_ADJUST /\\n\\t\\t\\t\\tannualAdj;\\n\\t\\t\\t_mint(rewardsAddr, _operationFeeMinted);\\n\\t\\t}\\n\\t}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0x63b444efe7cefa67f6fc9ae5a80ed9d379135ecc640f78f454f8d0f56ffe8882\",\"license\":\"MIT\"},\"src/HedgedLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./mixins/ILending.sol\\\";\\nimport \\\"./mixins/IFarmable.sol\\\";\\nimport \\\"./mixins/IUniLp.sol\\\";\\nimport \\\"./mixins/IBase.sol\\\";\\nimport \\\"./mixins/ISwappable.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"./interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n// @custom: alphabetize dependencies to avoid linearization conflicts\\nabstract contract HedgedLP is\\n\\tInitializable,\\n\\tBaseStrategy,\\n\\tIBase,\\n\\tIFarmable,\\n\\tILending,\\n\\tISwappable,\\n\\tIUniLp\\n{\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tuint256 private _maxPriceMismatch;\\n\\n\\tmodifier checkPrice() {\\n\\t\\tuint256 minPrice = _quote(1e18, address(_short), address(_want));\\n\\t\\tuint256 maxPrice = _oraclePriceOfShort(1e18);\\n\\t\\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\\n\\t\\trequire(\\n\\t\\t\\t((maxPrice - minPrice) * BPS_ADJUST) / maxPrice < _maxPriceMismatch,\\n\\t\\t\\t\\\"HedgedLP: SHORT_PRICE_MISMATCH\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tIERC20 private _want;\\n\\tIERC20 private _short;\\n\\n\\tuint256 _minLendHarvest; // don't harvest until we have this balance\\n\\tuint16 public rebalanceThreshold; // 4% of lp\\n\\n\\tfunction __HedgedLP_init_unchained(address want_, address short_) internal initializer {\\n\\t\\t_want = IERC20(want_);\\n\\t\\t_short = IERC20(short_);\\n\\n\\t\\t_want.safeApprove(address(this), type(uint256).max);\\n\\n\\t\\t// init params\\n\\t\\t_maxPriceMismatch = 60; // .6% based on uniswap .6% bid-ask spread\\n\\t\\trebalanceThreshold = 400;\\n\\t\\t_minLendHarvest = 20 * 1e6;\\n\\t}\\n\\n\\t// PUBLIC METHODS\\n\\n\\t// TODO uncomment later\\n\\t// function updateParams(\\n\\t// \\tuint256 minLendHarvest_,\\n\\t// \\tuint256 maxPriceMismatch_,\\n\\t// \\tuint16 rebalanceThreshold_\\n\\t// ) public onlyRole(MANAGER_ROLE) {\\n\\t// \\t_minLendHarvest = minLendHarvest_;\\n\\t// \\t_maxPriceMismatch = maxPriceMismatch_;\\n\\t// \\trebalanceThreshold = rebalanceThreshold_;\\n\\t// }\\n\\n\\tfunction short() public view override returns (IERC20) {\\n\\t\\treturn _short;\\n\\t}\\n\\n\\tfunction want() public view override returns (IERC20) {\\n\\t\\treturn _want;\\n\\t}\\n\\n\\t// assets are deposited but rebalance needs to be called before assets are deployed\\n\\t// TODO can we make it safe to call rebalance here?\\n\\tfunction deposit(uint256 total) external onlyRole(WHITELIST_ROLE) checkPrice nonReentrant {\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 shares = totalSupply() == 0 ? total : (totalSupply() * total) / tvl;\\n\\t\\t_want.transferFrom(msg.sender, address(this), total);\\n\\t\\t_increasePosition(total);\\n\\t\\t_mint(msg.sender, shares);\\n\\t\\temit Deposit(msg.sender, total, shares);\\n\\t}\\n\\n\\tfunction withdraw(uint256 shares) external checkPrice nonReentrant {\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 withdrawAmnt = (tvl * shares) / totalSupply();\\n\\t\\tuint256 reserves = _want.balanceOf(address(this));\\n\\n\\t\\t// if we can not withdraw straight out of reserves\\n\\t\\tif (reserves < withdrawAmnt) {\\n\\t\\t\\tif (shares == totalSupply()) {\\n\\t\\t\\t\\t// decrease current position\\n\\t\\t\\t\\t_closePosition();\\n\\t\\t\\t\\twithdrawAmnt = _want.balanceOf(address(this));\\n\\t\\t\\t} else withdrawAmnt = _decreasePosition(withdrawAmnt - reserves) + reserves;\\n\\t\\t}\\n\\t\\tshares = (withdrawAmnt * totalSupply()) / tvl;\\n\\t\\t_burn(msg.sender, shares);\\n\\t\\t_want.safeTransferFrom(address(this), msg.sender, withdrawAmnt);\\n\\t\\temit Withdrawal(msg.sender, withdrawAmnt, shares, 0);\\n\\t}\\n\\n\\t// decreases position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\t// ** may return slighly less then desired amount\\n\\t// ** make sure to update lending positions before calling this\\n\\tfunction _decreasePosition(uint256 amount) internal returns (uint256) {\\n\\t\\tuint256 removeLpAmnt = _totalToLp(amount);\\n\\n\\t\\t(uint256 wantLp, ) = _getLPBalances();\\n\\t\\t// uint256 removeLpAmnt = (amount * wantLp) / position;\\n\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 wantBalance, uint256 shortBalance) = _decreaseLpTo(wantLp - removeLpAmnt);\\n\\t\\tuint256 repayAmnt = shortBalance;\\n\\t\\tif (shortPosition < shortBalance) {\\n\\t\\t\\t// this means we are closing the short position\\n\\t\\t\\twantBalance += _swapExactTokensForTokens(\\n\\t\\t\\t\\tpair(),\\n\\t\\t\\t\\tshortBalance - shortPosition,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_want)\\n\\t\\t\\t);\\n\\t\\t\\trepayAmnt = shortPosition;\\n\\t\\t}\\n\\t\\t_repay(repayAmnt);\\n\\n\\t\\t// this might remove less collateral than desired if we hit the limit\\n\\t\\t// this happens when position is close to empty\\n\\t\\tuint256 removed = _removeCollateral(amount - wantBalance);\\n\\t\\treturn wantBalance + removed;\\n\\t}\\n\\n\\t// increases the position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\tfunction _increasePosition(uint256 amount) internal {\\n\\t\\tuint256 amntWant = _totalToLp(amount);\\n\\t\\tuint256 amntShort = _quote(amntWant, address(_want), address(_short));\\n\\t\\t_lend(amount - amntWant);\\n\\t\\t_borrow(amntShort);\\n\\t\\tuint256 liquidity = _addLiquidity(amntWant, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\tfunction _harvestInternal() internal override checkPrice returns (uint256 harvested) {\\n\\t\\tharvested += _harvestLending(_minLendHarvest);\\n\\t\\tharvested += _harvestFarm();\\n\\t\\tuint256 balance = _want.balanceOf(address(this));\\n\\t\\tif (balance > 0) _increasePosition(_want.balanceOf(address(this)));\\n\\t}\\n\\n\\t// MANAGER METHODS\\n\\t// TODO can we make it safe to make these public?\\n\\n\\tfunction rebalance() public onlyRole(MANAGER_ROLE) checkPrice nonReentrant {\\n\\t\\t(uint256 wantLp, ) = _getLPBalances();\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 targetWantLP = _totalToLp(tvl);\\n\\n\\t\\t(bool needsRebalance, bool shouldIncrease, uint256 positionOffset) = _shouldRebalance(\\n\\t\\t\\ttargetWantLP,\\n\\t\\t\\twantLp\\n\\t\\t);\\n\\t\\trequire(needsRebalance); // maybe next time...\\n\\n\\t\\tuint256 targetCollateral = tvl - targetWantLP;\\n\\n\\t\\tif (shouldIncrease)\\n\\t\\t\\t// this means lp is low - short price went down\\n\\t\\t\\t// most of the time we should not have to remove collateral\\n\\t\\t\\t_rebalanceUp(targetWantLP, targetCollateral);\\n\\t\\t\\t// this means lp is too high - short price went up\\n\\t\\telse _rebalanceDown(targetWantLP, targetCollateral);\\n\\t\\temit Rebalance(_shortToWant(1e18), positionOffset, tvl);\\n\\t}\\n\\n\\tfunction closePosition() external onlyRole(MANAGER_ROLE) {\\n\\t\\t_closePosition();\\n\\t}\\n\\n\\tfunction _closePosition() internal {\\n\\t\\t_decreaseLpTo(0);\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\t\\tif (shortPosition > shortBalance) {\\n\\t\\t\\tuint256 adjustShort = shortPosition - shortBalance;\\n\\t\\t\\t_swapTokensForExactTokens(pair(), adjustShort, address(_want), address(_short));\\n\\t\\t} else if (shortBalance > shortPosition) {\\n\\t\\t\\tuint256 adjustShort = shortBalance - shortPosition;\\n\\t\\t\\t_swapExactTokensForTokens(pair(), adjustShort, address(_short), address(_want));\\n\\t\\t}\\n\\t\\t_repay(_short.balanceOf(address(this)));\\n\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\t_redeem(collateralBalance);\\n\\t}\\n\\n\\tfunction _shouldRebalance(uint256 targetWantLP, uint256 wantLp)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tbool needsRebalance,\\n\\t\\t\\tbool shouldIncrease,\\n\\t\\t\\tuint256 positionOffset\\n\\t\\t)\\n\\t{\\n\\t\\tshouldIncrease = targetWantLP > wantLp ? true : false;\\n\\t\\tif (wantLp == 0 || targetWantLP == 0)\\n\\t\\t\\treturn (wantLp != targetWantLP, shouldIncrease, positionOffset);\\n\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\n\\t\\t// this is the % by which our position has moved from beeing balanced\\n\\t\\tpositionOffset = shouldIncrease\\n\\t\\t\\t? ((targetWantLP - wantLp) * BPS_ADJUST) / wantLp\\n\\t\\t\\t: ((wantLp - targetWantLP) * BPS_ADJUST) / targetWantLP;\\n\\n\\t\\t// don't rebalance unless\\n\\t\\tneedsRebalance =\\n\\t\\t\\tpositionOffset > rebalanceThreshold ||\\n\\t\\t\\t_want.balanceOf(address(this)) > 10e6 ||\\n\\t\\t\\tshortPosition == 0;\\n\\t}\\n\\n\\t// TODO handle case for when lp is not 100% in farm?\\n\\tfunction _decreaseLpTo(uint256 targetWantLP)\\n\\t\\tinternal\\n\\t\\treturns (uint256 wantRemove, uint256 shortRemove)\\n\\t{\\n\\t\\t(uint256 wantLp, ) = _getLPBalances();\\n\\t\\tuint256 liquidity = _getLiquidity();\\n\\t\\tuint256 wantLiquidity = (liquidity * targetWantLP) / wantLp;\\n\\t\\tuint256 removeLp = liquidity - wantLiquidity;\\n\\t\\t_withdrawFromFarm(removeLp);\\n\\t\\treturn _removeLiquidity(removeLp);\\n\\t}\\n\\n\\t// remove collateral (short price moved down so target collateral is lower)\\n\\t// borrow short\\n\\t// sell extra short\\n\\t// add lp\\n\\tfunction _rebalanceUp(uint256 targetWantLP, uint256 targetCollateral) internal {\\n\\t\\t_adjustCollateral(targetCollateral);\\n\\n\\t\\t// borrow\\n\\t\\tuint256 targetShortPosition = _wantToShort(targetWantLP);\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\n\\t\\t_borrow(targetShortPosition - shortPosition);\\n\\n\\t\\t// sell extra short\\n\\t\\t(uint256 wantLp, ) = _getLPBalances();\\n\\n\\t\\tuint256 buyWant = targetWantLP - (_want.balanceOf(address(this)) + wantLp);\\n\\t\\tif (buyWant > 0)\\n\\t\\t\\t_swapTokensForExactTokens(pair(), buyWant, address(_short), address(_want));\\n\\n\\t\\t// we will have more want tokens as a result of the tx fees\\n\\t\\t// so we use short balance to compute final lp amounts\\n\\t\\tuint256 amntShort = _short.balanceOf(address(this));\\n\\t\\tuint256 amntWant = _shortToWant(amntShort);\\n\\t\\tuint256 balWant = _want.balanceOf(address(this));\\n\\t\\tif (balWant < amntWant) {\\n\\t\\t\\tamntWant = balWant;\\n\\t\\t\\tamntShort = _wantToShort(amntWant);\\n\\t\\t}\\n\\n\\t\\t// add liquidity\\n\\t\\tuint256 liquidity = _addLiquidity(amntWant, amntShort);\\n\\n\\t\\t// ape into farm\\n\\t\\t_depositIntoFarm(liquidity);\\n\\n\\t\\t// TODO - might have leftover want tokens here\\n\\t}\\n\\n\\t// remove lp\\n\\t// return borrow\\n\\t// remove collateral\\n\\t// buy back extra short\\n\\t// return extra short borrow\\n\\tfunction _rebalanceDown(uint256 targetWantLP, uint256 targetCollateral) internal {\\n\\t\\tif (targetWantLP == 0) return _closePosition();\\n\\n\\t\\t// remove lp\\n\\t\\t_decreaseLpTo(targetWantLP);\\n\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\t\\t_repay(shortBalance);\\n\\n\\t\\t// if we're already over collateral threshold we may not have enought to buy back\\n\\t\\t// full amount of short tokens\\n\\t\\t(, uint256 removed) = _adjustCollateral(targetCollateral);\\n\\n\\t\\t// if we're withdrawing we may end up with extra $$\\n\\t\\t// do the check here\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 adjustBorrow = shortPosition - _wantToShort(targetWantLP);\\n\\n\\t\\tif (adjustBorrow == 0) return;\\n\\n\\t\\tuint256 wantIn = UniUtils._getAmountIn(\\n\\t\\t\\tpair(),\\n\\t\\t\\tadjustBorrow,\\n\\t\\t\\taddress(_want),\\n\\t\\t\\taddress(_short)\\n\\t\\t);\\n\\t\\tuint256 wantBalance = _want.balanceOf(address(this));\\n\\t\\tuint256 sellShort = wantIn < wantBalance ? wantIn : wantBalance;\\n\\t\\t_swapExactTokensForTokens(pair(), sellShort, address(_want), address(_short));\\n\\n\\t\\tshortBalance = _short.balanceOf(address(this));\\n\\t\\t// return borrow\\n\\t\\t_repay(shortBalance);\\n\\t\\tif (targetCollateral > removed) _adjustCollateral(targetCollateral);\\n\\t}\\n\\n\\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\\n\\t}\\n\\n\\t// TODO should we compute pending farm & lending rewards here?\\n\\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 shortBalance = _shortToWant(shortPosition);\\n\\t\\t(uint256 wantLp, ) = _getLPBalances();\\n\\t\\tuint256 wantBalance = _want.balanceOf(address(this));\\n\\t\\ttvl = collateralBalance + wantLp * 2 - shortBalance + wantBalance;\\n\\t}\\n\\n\\tfunction estimatedTotalAssets() public view override returns (uint256 assets) {\\n\\t\\t(assets, , , , , ) = getTVL();\\n\\t}\\n\\n\\t// VIEW\\n\\tfunction getTVL()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 tvl,\\n\\t\\t\\tuint256 collateralBalance,\\n\\t\\t\\tuint256 shortPosition,\\n\\t\\t\\tuint256 shortBalance,\\n\\t\\t\\tuint256 lpBalance,\\n\\t\\t\\tuint256 wantBalance\\n\\t\\t)\\n\\t{\\n\\t\\tcollateralBalance = _getCollateralBalance();\\n\\t\\tshortPosition = _getBorrowBalance();\\n\\t\\t// shortBalance is the short position denominated in want tokens\\n\\t\\tshortBalance = _shortToWant(shortPosition);\\n\\t\\t(uint256 wantLp, ) = _getLPBalances();\\n\\t\\tlpBalance = wantLp * 2;\\n\\t\\twantBalance = _want.balanceOf(address(this));\\n\\n\\t\\ttvl = collateralBalance + lpBalance - shortBalance + wantBalance;\\n\\t}\\n\\n\\tfunction _shortToWant(uint256 amount) internal view returns (uint256) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t// lending oracle price\\n\\t\\t// return _oraclePriceOfShort(amount);\\n\\n\\t\\t// uni price\\n\\t\\treturn _quote(amount, address(_short), address(_want));\\n\\t}\\n\\n\\tfunction _wantToShort(uint256 amount) internal view returns (uint256) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t// lending oracle price\\n\\t\\t// return _oraclePriceOfWant(amount);\\n\\n\\t\\t// uni price\\n\\t\\treturn _quote(amount, address(_want), address(_short));\\n\\t}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0x699af09f01d0e9651c94949f717b24a84847f61562b70aa411e89ae7c619ed67\",\"license\":\"MIT\"},\"src/interfaces/compound/ICTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ninterface ICTokenStorage {\\n\\t/**\\n\\t * @dev Container for borrow balance information\\n\\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n\\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n\\t */\\n\\tstruct BorrowSnapshot {\\n\\t\\tuint256 principal;\\n\\t\\tuint256 interestIndex;\\n\\t}\\n}\\n\\ninterface ICToken is ICTokenStorage {\\n\\t/*** Market Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when interest is accrued\\n\\t */\\n\\tevent AccrueInterest(\\n\\t\\tuint256 cashPrior,\\n\\t\\tuint256 interestAccumulated,\\n\\t\\tuint256 borrowIndex,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are minted\\n\\t */\\n\\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are redeemed\\n\\t */\\n\\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when underlying is borrowed\\n\\t */\\n\\tevent Borrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is repaid\\n\\t */\\n\\tevent RepayBorrow(\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is liquidated\\n\\t */\\n\\tevent LiquidateBorrow(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 seizeTokens\\n\\t);\\n\\n\\t/*** Admin Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is changed\\n\\t */\\n\\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\\n\\t */\\n\\tevent NewAdmin(address oldAdmin, address newAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when comptroller is changed\\n\\t */\\n\\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\\n\\n\\t/**\\n\\t * @dev Event emitted when interestRateModel is changed\\n\\t */\\n\\tevent NewMarketInterestRateModel(\\n\\t\\tInterestRateModel oldInterestRateModel,\\n\\t\\tInterestRateModel newInterestRateModel\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserve factor is changed\\n\\t */\\n\\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are added\\n\\t */\\n\\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are reduced\\n\\t */\\n\\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev EIP20 Transfer event\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev EIP20 Approval event\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Failure event\\n\\t */\\n\\tevent Failure(uint256 error, uint256 info, uint256 detail);\\n\\n\\t/*** User Interface ***/\\n\\tfunction totalBorrows() external view returns (uint256);\\n\\n\\tfunction totalReserves() external view returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction transfer(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction balanceOfUnderlying(address owner) external returns (uint256);\\n\\n\\tfunction getAccountSnapshot(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction borrowRatePerBlock() external view returns (uint256);\\n\\n\\tfunction supplyRatePerBlock() external view returns (uint256);\\n\\n\\tfunction totalBorrowsCurrent() external returns (uint256);\\n\\n\\tfunction borrowBalanceCurrent(address account) external returns (uint256);\\n\\n\\tfunction borrowBalanceStored(address account) external view returns (uint256);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction exchangeRateStored() external view returns (uint256);\\n\\n\\tfunction getCash() external view returns (uint256);\\n\\n\\tfunction accrueInterest() external returns (uint256);\\n\\n\\tfunction seize(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\t/*** CCap Interface ***/\\n\\n\\t// ONLY SCREAM\\n\\tfunction totalCollateralTokens() external view returns (uint256);\\n\\n\\t// ONLY SCREAM\\n\\tfunction isCollateralTokenInit(address account) external view returns (bool);\\n\\n\\t// ONLY SCREAM\\n\\tfunction collateralCap() external view returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n\\tfunction _acceptAdmin() external returns (uint256);\\n\\n\\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n\\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n\\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n\\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n}\\n\\ninterface ICTokenErc20 is ICToken {\\n\\t/*** User Interface ***/\\n\\n\\tfunction mint(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeem(uint256 redeemTokens) external returns (uint256);\\n\\n\\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n\\tfunction borrow(uint256 borrowAmount) external returns (uint256);\\n\\n\\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n\\tfunction liquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tICToken cTokenCollateral\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ninterface ICTokenBase is ICToken {\\n\\tfunction repayBorrow() external payable;\\n}\\n\",\"keccak256\":\"0x287395b914b5d5db5e074b986016cec04fc17004643e0f344055993544d7c805\",\"license\":\"MIT\"},\"src/interfaces/compound/ICompPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface ICompPriceOracle {\\n\\tfunction isPriceOracle() external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Get the underlying price of a cToken asset\\n\\t * @param cToken The cToken to get the underlying price of\\n\\t * @return The underlying asset price mantissa (scaled by 1e18).\\n\\t *  Zero means the price is unavailable.\\n\\t */\\n\\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73464e501fec8d9e1320ffb675618524b646f8a4869a425117091f74926a3ab7\",\"license\":\"MIT\"},\"src/interfaces/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IComptroller {\\n\\t/*** Assets You Are In ***/\\n\\n\\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n\\tfunction exitMarket(address cToken) external returns (uint256);\\n\\n\\t/*** Policy Hooks ***/\\n\\n\\tfunction mintAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction mintVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount,\\n\\t\\tuint256 mintTokens\\n\\t) external;\\n\\n\\tfunction redeemAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction redeemVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemAmount,\\n\\t\\tuint256 redeemTokens\\n\\t) external;\\n\\n\\tfunction borrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction borrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external;\\n\\n\\tfunction repayBorrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction repayBorrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 borrowerIndex\\n\\t) external;\\n\\n\\tfunction liquidateBorrowAllowed(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction liquidateBorrowVerify(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction seizeAllowed(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction seizeVerify(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction transferAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction transferVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external;\\n\\n\\tfunction claimComp(address holder) external;\\n\\n\\t/*** Liquidity/Liquidation Calculations ***/\\n\\n\\tfunction liquidateCalculateSeizeTokens(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 repayAmount\\n\\t) external view returns (uint256, uint256);\\n}\\n\\ninterface UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Administrator for this contract\\n\\t */\\n\\t// address external admin;\\n\\tfunction admin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending administrator for this contract\\n\\t */\\n\\t// address external pendingAdmin;\\n\\tfunction pendingAdmin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Active brains of Unitroller\\n\\t */\\n\\t// address external comptrollerImplementation;\\n\\tfunction comptrollerImplementation() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending brains of Unitroller\\n\\t */\\n\\t// address external pendingComptrollerImplementation;\\n\\tfunction pendingComptrollerImplementation() external view returns (address);\\n}\\n\\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Oracle which gives the price of any given asset\\n\\t */\\n\\t// PriceOracle external oracle;\\n\\tfunction oracle() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n\\t */\\n\\t// uint external closeFactorMantissa;\\n\\tfunction closeFactorMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Multiplier representing the discount on collateral that a liquidator receives\\n\\t */\\n\\t// uint external liquidationIncentiveMantissa;\\n\\tfunction liquidationIncentiveMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n\\t */\\n\\t// uint external maxAssets;\\n\\tfunction maxAssets() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n\\t */\\n\\t// mapping(address => CToken[]) external accountAssets;\\n\\t// function accountAssets(address) external view returns (CToken[]);\\n}\\n\\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\\n\\tenum Version {\\n\\t\\tVANILLA,\\n\\t\\tCOLLATERALCAP,\\n\\t\\tWRAPPEDNATIVE\\n\\t}\\n\\n\\tstruct Market {\\n\\t\\tbool isListed;\\n\\t\\tuint256 collateralFactorMantissa;\\n\\t\\tmapping(address => bool) accountMembership;\\n\\t\\tbool isComped;\\n\\t\\t// Version version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Official mapping of cTokens -> Market metadata\\n\\t * @dev Used e.g. to determine if a market is supported\\n\\t */\\n\\tmapping(address => Market) public markets;\\n\\n\\t/**\\n\\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n\\t *  Actions which allow users to remove their own assets cannot be paused.\\n\\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n\\t */\\n\\t// address external pauseGuardian;\\n\\t// bool external _mintGuardianPaused;\\n\\t// bool external _borrowGuardianPaused;\\n\\t// bool external transferGuardianPaused;\\n\\t// bool external seizeGuardianPaused;\\n\\t// mapping(address => bool) external mintGuardianPaused;\\n\\t// mapping(address => bool) external borrowGuardianPaused;\\n}\\n\\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\\n\\t// struct CompMarketState {\\n\\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n\\t//     uint224 index;\\n\\t//     /// @notice The block number the index was last updated at\\n\\t//     uint32 block;\\n\\t// }\\n\\t// /// @notice A list of all markets\\n\\t// CToken[] external allMarkets;\\n\\t// /// @notice The rate at which the flywheel distributes COMP, per block\\n\\t// uint external compRate;\\n\\t// /// @notice The portion of compRate that each market currently receives\\n\\t// mapping(address => uint) external compSpeeds;\\n\\t// /// @notice The COMP market supply state for each market\\n\\t// mapping(address => CompMarketState) external compSupplyState;\\n\\t// /// @notice The COMP market borrow state for each market\\n\\t// mapping(address => CompMarketState) external compBorrowState;\\n\\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\\n\\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\\n\\t// /// @notice The COMP accrued but not yet transferred to each user\\n\\t// mapping(address => uint) external compAccrued;\\n}\\n\\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\\n\\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n\\t// address external borrowCapGuardian;\\n\\tfunction borrowCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n\\t// mapping(address => uint) external borrowCaps;\\n\\tfunction borrowCaps(address) external view virtual returns (uint256);\\n}\\n\\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\\n\\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n\\t// address external supplyCapGuardian;\\n\\tfunction supplyCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n\\t// mapping(address => uint) external supplyCaps;\\n\\tfunction supplyCaps(address) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fbe041f21bdd6b71813d4b22f165365792b980b82e0555d0534eee4ec3116e6\",\"license\":\"MIT\"},\"src/interfaces/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ninterface InterestRateModel {\\n\\t/**\\n\\t * @dev Calculates the current borrow interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getBorrowRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Calculates the current supply interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @param reserveFactorMantissa The current reserve factor the market has\\n\\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getSupplyRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves,\\n\\t\\tuint256 reserveFactorMantissa\\n\\t) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb859c2e88d16362f7f12101f9f24314ea698ff7f49ad9a5150507616bb962731\",\"license\":\"MIT\"},\"src/interfaces/forks/IBenqiComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nabstract contract IBenqiComptroller {\\n\\tfunction claimReward(uint8 rewardType, address payable holder) external virtual;\\n\\n\\t/// @notice The QI/AVAX accrued but not yet transferred to each user\\n\\tmapping(uint8 => mapping(address => uint256)) public rewardAccrued;\\n}\\n\",\"keccak256\":\"0x160780ac43aeb5d314c902b0ea8c2f56a4d4bf2c2d1763f221273be109702221\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IStakingRewards is IERC20 {\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction lastTimeRewardApplicable() external view returns (uint256);\\n\\n\\tfunction rewardPerToken() external view returns (uint256);\\n\\n\\tfunction earned(address account) external view returns (uint256);\\n\\n\\tfunction getRewardForDuration() external view returns (uint256);\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction getReward() external;\\n\\n\\tfunction exit() external;\\n}\\n\\n// some farms use sushi interface\\ninterface IFarmMasterChef {\\n\\tfunction deposit(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction userInfo(uint256 _pid, address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x875c42fc6abf6302a6b72a20f58f197492237d8e9c99b1ac254e0b0bf6910b3b\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint256 amount0In,\\n\\t\\tuint256 amount1In,\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7835569d6c0b60f7e1ddba27e62a22239cc072cf9cd930a85376c8468e03898b\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xc186dc871d381452386b4b91d422a1bcc8716f647e6a70c3cef789d63de9787e\",\"license\":\"MIT\"},\"src/libraries/UniUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniUtils {\\n\\tfunction _getPairReserves(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(address token0, ) = _sortTokens(tokenA, tokenB);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\t\\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\\n\\tfunction _quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) internal pure returns (uint256 amountB) {\\n\\t\\trequire(amountA > 0, \\\"UniUtils: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(reserveA > 0 && reserveB > 0, \\\"UniUtils: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tamountB = (amountA * reserveB) / reserveA;\\n\\t}\\n\\n\\tfunction _sortTokens(address tokenA, address tokenB)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (address token0, address token1)\\n\\t{\\n\\t\\trequire(tokenA != tokenB, \\\"UniUtils: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"UniUtils: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\tfunction _getAmountOut(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"UniUtils: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 amountInWithFee = amountIn * 997;\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\tfunction _getAmountIn(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 numerator = reserveIn * amountOut * 1000;\\n\\t\\tuint256 denominator = (reserveOut - amountOut) * 997;\\n\\t\\tamountIn = (numerator / denominator) + 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb8662ad8ca9a954a5a95e6fd54e00deab4deaf1429e679eb605796336dcf5a76\",\"license\":\"MIT\"},\"src/mixins/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// all interfaces need to inherit from base\\nabstract contract IBase {\\n\\tfunction short() public view virtual returns (IERC20);\\n\\n\\tfunction want() public view virtual returns (IERC20);\\n}\\n\",\"keccak256\":\"0x27624a1b9d1a67986d4baa6d498786c86311ccacb8962ff3a8287ef82dcd0948\",\"license\":\"MIT\"},\"src/mixins/IFarmable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IBase.sol\\\";\\n\\nabstract contract IFarmable is IBase {\\n\\tfunction _depositIntoFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestFarm() internal virtual returns (uint256);\\n\\n\\tfunction _getFarmLp() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb8161adad2d80f640c59e7e1e3f7ded012925b54d186ae7d065b994668414676\",\"license\":\"MIT\"},\"src/mixins/ILending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IBase.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ILending is IBase {\\n\\tfunction _addLendingApprovals() internal virtual;\\n\\n\\tfunction _getCollateralBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _getBorrowBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\\n\\n\\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\\n\\n\\tfunction _getCollateralFactor() internal view virtual returns (uint256);\\n\\n\\tfunction safeCollateralRatio() public view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfWant(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _lend(uint256 amount) internal virtual;\\n\\n\\tfunction _redeem(uint256 amount) internal virtual;\\n\\n\\tfunction _borrow(uint256 amount) internal virtual;\\n\\n\\tfunction _repay(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestLending(uint256 minHarvest) internal virtual returns (uint256);\\n\\n\\tfunction _pendingLendingHarvest() internal virtual returns (uint256);\\n\\n\\tfunction getCollateralRatio() public view returns (uint256) {\\n\\t\\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\\n\\t}\\n\\n\\tfunction _adjustCollateral(uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\treturns (uint256 added, uint256 removed)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (collateralBalance == targetCollateral) return (0, 0);\\n\\t\\t(added, removed) = collateralBalance > targetCollateral\\n\\t\\t\\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\\n\\t\\t\\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\\n\\t}\\n\\n\\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\tuint256 collateral = _getCollateralBalance();\\n\\n\\t\\t// stay within 5% of the liquidation threshold\\n\\t\\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 95;\\n\\t\\tif (minCollateral > collateral) return 0;\\n\\n\\t\\tuint256 maxRemove = collateral - minCollateral;\\n\\t\\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\\n\\t\\t_redeem(removed);\\n\\t}\\n\\n\\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\\n\\t\\tuint256 wantBalance = want().balanceOf(address(this));\\n\\t\\tadded = wantBalance > amountToAdd ? amountToAdd : wantBalance;\\n\\t\\tif (added != 0) _lend(added);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe4786a57802672abe83d2ce7497a86186b66c6ef99653273e342228b89e25400\",\"license\":\"MIT\"},\"src/mixins/ILp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nabstract contract ILp {\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual returns (uint256 price);\\n\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 liquidity);\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256 wantBalance, uint256 shortBalance);\\n}\\n\",\"keccak256\":\"0xe5159baefbcf6e44edc3d58f0aad5b91890b20a24e42c0250013c331b32c21e0\",\"license\":\"MIT\"},\"src/mixins/ISwappable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IStakingRewards.sol\\\";\\nimport \\\"../libraries/UniUtils.sol\\\";\\n\\nabstract contract ISwappable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// TODO custom swap method requires custom price match check!\\n\\t// TODO in the future this should use the optimal path determined externally & router\\n\\t// using https://docs.uniswap.org/sdk/2.0.0/reference/trade#besttradeexactin\\n\\tfunction _swapExactTokensForTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) public returns (uint256) {\\n\\t\\tuint256 amountOut = UniUtils._getAmountOut(pair, amountIn, inToken, outToken);\\n\\t\\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\tfunction _swapTokensForExactTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) public returns (uint256) {\\n\\t\\tuint256 amountIn = UniUtils._getAmountIn(pair, amountOut, inToken, outToken);\\n\\t\\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountIn;\\n\\t}\\n}\\n\",\"keccak256\":\"0x88ff2152fae037cf832206093c664f68d52eb67a014a7f1ed7a1bce76d75ee0f\",\"license\":\"MIT\"},\"src/mixins/IUniLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/UniUtils.sol\\\";\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./ILp.sol\\\";\\n\\nabstract contract IUniLp is IBase, ILp {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction pair() public view virtual returns (IUniswapV2Pair);\\n\\n\\tfunction _getLiquidity() internal view virtual returns (uint256);\\n\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256 liquidity)\\n\\t{\\n\\t\\twant().safeTransfer(address(pair()), amountToken0);\\n\\t\\tshort().safeTransfer(address(pair()), amountToken1);\\n\\t\\tliquidity = pair().mint(address(this));\\n\\t}\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal override returns (uint256, uint256) {\\n\\t\\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\\n\\t\\t(address tokenA, ) = UniUtils._sortTokens(address(want()), address(short()));\\n\\t\\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\\n\\t\\treturn\\n\\t\\t\\ttokenA == address(want()) ? (amountToken0, amountToken1) : (amountToken1, amountToken0);\\n\\t}\\n\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view override returns (uint256 price) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t(uint256 reserve0, uint256 reserve1) = UniUtils._getPairReserves(pair(), token0, token1);\\n\\t\\tprice = UniUtils._quote(amount, reserve0, reserve1);\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a uniswap pair\\n\\tfunction _getWantShortReserves() internal view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(reserveA, reserveB) = UniUtils._getPairReserves(pair(), address(want()), address(short()));\\n\\t}\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256 wantBalance, uint256 shortBalance)\\n\\t{\\n\\t\\tuint256 totalLp = _getLiquidity();\\n\\t\\t(uint256 totalWantBalance, uint256 totalShortBalance) = _getWantShortReserves();\\n\\t\\tuint256 total = pair().totalSupply();\\n\\t\\twantBalance = (totalWantBalance * totalLp) / total;\\n\\t\\tshortBalance = (totalShortBalance * totalLp) / total;\\n\\t}\\n}\\n\",\"keccak256\":\"0x7cf0720b06167037673659e8d52b31831d23703dea57f8160b6476e534af2ca4\",\"license\":\"MIT\"},\"src/strategy/BenqiFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/forks/IBenqiComptroller.sol\\\";\\nimport \\\"../mixins/ISwappable.sol\\\";\\nimport \\\"../mixins/IUniLp.sol\\\";\\nimport \\\"../mixins/ILending.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract BenqiFarm is Initializable, ILending, ISwappable, IUniLp {\\n\\tIBenqiComptroller _comptroller;\\n\\tIERC20 _qi;\\n\\tIUniswapV2Pair private _qiAvaxPair;\\n\\n\\tfunction __BenqiFarm_init_unchained(\\n\\t\\taddress comptroller_,\\n\\t\\taddress pair_,\\n\\t\\taddress token_\\n\\t) internal initializer {\\n\\t\\t_comptroller = IBenqiComptroller(comptroller_);\\n\\t\\t_qiAvaxPair = IUniswapV2Pair(pair_);\\n\\t\\t_qi = IERC20(token_);\\n\\t}\\n\\n\\tfunction _pendingLendingHarvest() internal view override returns (uint256 pendingWant) {\\n\\t\\tuint256 pendingQi = _comptroller.rewardAccrued(0, address(this));\\n\\n\\t\\tuint256 pendingShort = pendingQi == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: UniUtils._getAmountOut(_qiAvaxPair, pendingQi, address(_qi), address(short()));\\n\\t\\tpendingShort += _comptroller.rewardAccrued(1, address(this));\\n\\t\\tpendingWant = pendingShort == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: UniUtils._getAmountOut(pair(), pendingShort, address(short()), address(want()));\\n\\t}\\n\\n\\tfunction _harvestLending(uint256 minHarvest) internal override returns (uint256 harvested) {\\n\\t\\tuint256 pending = _pendingLendingHarvest();\\n\\t\\tif (pending < minHarvest) return harvested;\\n\\n\\t\\t// qi rewards\\n\\t\\t_comptroller.claimReward(0, payable(address(this)));\\n\\t\\tuint256 farmTokenBalance = _qi.balanceOf(address(this));\\n\\n\\t\\tif (farmTokenBalance > 0) {\\n\\t\\t\\t// qi - wavax pair is the most liquid\\n\\t\\t\\t_swapExactTokensForTokens(\\n\\t\\t\\t\\t_qiAvaxPair,\\n\\t\\t\\t\\tfarmTokenBalance,\\n\\t\\t\\t\\taddress(_qi),\\n\\t\\t\\t\\taddress(short())\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// avax rewards\\n\\t\\t_comptroller.claimReward(1, payable(address(this)));\\n\\t\\tuint256 avaxBalance = address(this).balance;\\n\\t\\tif (avaxBalance == 0) return harvested;\\n\\n\\t\\tIWETH(address(short())).deposit{ value: avaxBalance }();\\n\\t\\tharvested = _swapExactTokensForTokens(\\n\\t\\t\\tpair(),\\n\\t\\t\\tavaxBalance,\\n\\t\\t\\taddress(short()),\\n\\t\\t\\taddress(want())\\n\\t\\t);\\n\\t}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0x70cbc2b390f9bf6c29e3fcddd129cedfd1481f46b8e6a6a1cf4cefcef3ae3251\",\"license\":\"MIT\"},\"src/strategy/Compound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../mixins/ILending.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract Compound is Initializable, ILending {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tICTokenErc20 private _cTokenLend;\\n\\tICTokenErc20 private _cTokenBorrow;\\n\\n\\tIComptroller private _comptroller;\\n\\tICompPriceOracle private _oracle;\\n\\n\\tuint256 private _safeCollateralRatio; // percentage of max ratio\\n\\n\\tfunction __Compound_init_unchained(\\n\\t\\taddress comptroller_,\\n\\t\\taddress cTokenLend_,\\n\\t\\taddress cTokenBorrow_,\\n\\t\\tuint256 safeCollateralRatio_\\n\\t) internal initializer {\\n\\t\\t_cTokenLend = ICTokenErc20(cTokenLend_);\\n\\t\\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\\n\\t\\t_comptroller = IComptroller(comptroller_);\\n\\t\\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\\n\\t\\t_safeCollateralRatio = safeCollateralRatio_;\\n\\t\\t_enterMarket();\\n\\t}\\n\\n\\tfunction _addLendingApprovals() internal override {\\n\\t\\t// ensure USDC approval - assume we trust USDC\\n\\t\\twant().safeApprove(address(_cTokenLend), type(uint256).max);\\n\\t}\\n\\n\\tfunction safeCollateralRatio() public view override returns (uint256) {\\n\\t\\treturn _safeCollateralRatio;\\n\\t}\\n\\n\\tfunction oracle() public view returns (ICompPriceOracle) {\\n\\t\\treturn _oracle;\\n\\t}\\n\\n\\tfunction comptroller() public view returns (IComptroller) {\\n\\t\\treturn _comptroller;\\n\\t}\\n\\n\\tfunction _enterMarket() internal {\\n\\t\\taddress[] memory cTokens = new address[](1);\\n\\t\\tcTokens[0] = address(_cTokenLend);\\n\\t\\t_comptroller.enterMarkets(cTokens);\\n\\t}\\n\\n\\tfunction _getCollateralFactor() internal view override returns (uint256) {\\n\\t\\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(_comptroller))\\n\\t\\t\\t.markets(address(_cTokenLend));\\n\\t\\treturn collateralFactorMantissa;\\n\\t}\\n\\n\\tfunction _redeem(uint256 amount) internal override {\\n\\t\\tuint256 err = _cTokenLend.redeemUnderlying(amount);\\n\\t\\t// if (err != 0) console.log(\\\"Compund: error redeeming underlying\\\");\\n\\t\\t// require(err == 0, \\\"Compund: error redeeming underlying\\\");\\n\\t}\\n\\n\\tfunction _borrow(uint256 amount) internal override {\\n\\t\\t_cTokenBorrow.borrow(amount);\\n\\n\\t\\t// hook in case we need to wrap any tokens\\n\\t\\t_postBorrowHook(amount);\\n\\t}\\n\\n\\tfunction _lend(uint256 amount) internal override {\\n\\t\\t_cTokenLend.mint(amount);\\n\\t}\\n\\n\\tfunction _repay(uint256 amount) internal override {\\n\\t\\t_preRepayHook(amount);\\n\\t\\tICTokenBase(address(_cTokenBorrow)).repayBorrow{ value: amount }();\\n\\t}\\n\\n\\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\\n\\t\\treturn _cTokenLend.balanceOfUnderlying(address(this));\\n\\t}\\n\\n\\tfunction _getCollateralBalance() internal view override returns (uint256) {\\n\\t\\tuint256 b = _cTokenLend.balanceOf(address(this));\\n\\t\\treturn (b * _cTokenLend.exchangeRateStored()) / 1e18;\\n\\t}\\n\\n\\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\\n\\t\\treturn _cTokenBorrow.borrowBalanceCurrent(address(this));\\n\\t}\\n\\n\\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\\n\\t\\tshortBorrow = _cTokenBorrow.borrowBalanceStored(address(this));\\n\\t}\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * _oracle.getUnderlyingPrice(address(_cTokenBorrow))) /\\n\\t\\t\\t_oracle.getUnderlyingPrice(address(_cTokenLend));\\n\\t}\\n\\n\\tfunction _oraclePriceOfWant(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * _oracle.getUnderlyingPrice(address(_cTokenLend))) /\\n\\t\\t\\t_oracle.getUnderlyingPrice(address(_cTokenBorrow));\\n\\t}\\n\\n\\t// default hook\\n\\tfunction _postBorrowHook(uint256 borrow) internal virtual {}\\n\\n\\tfunction _preRepayHook(uint256 borrow) internal virtual {}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0x716918608cbdcdc7ff337190e2e747e975219d19070353324f72032b58d1e721\",\"license\":\"MIT\"},\"src/strategy/FarmableUniLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"../mixins/IFarmable.sol\\\";\\nimport \\\"../mixins/ISwappable.sol\\\";\\nimport \\\"../mixins/IUniLp.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract FarmableUniLp is Initializable, IFarmable, ISwappable, IUniLp {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIStakingRewards private _farm;\\n\\tIUniswapV2Pair private _farmLp;\\n\\tIERC20 private _farmToken;\\n\\tIUniswapV2Pair private _pair;\\n\\n\\tfunction __FarmableUniLp_init_unchained(\\n\\t\\taddress pair_,\\n\\t\\taddress farm_,\\n\\t\\taddress farmLp_,\\n\\t\\taddress farmToken_\\n\\t) internal initializer {\\n\\t\\t_farm = IStakingRewards(farm_);\\n\\t\\t_farmLp = IUniswapV2Pair(farmLp_);\\n\\t\\t_farmToken = IERC20(farmToken_);\\n\\t\\t_pair = IUniswapV2Pair(pair_);\\n\\t}\\n\\n\\tfunction _addFarmApprovals() internal {\\n\\t\\t// farm approvals\\n\\t\\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\\n\\t}\\n\\n\\tfunction pair() public view override returns (IUniswapV2Pair) {\\n\\t\\treturn _pair;\\n\\t}\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal override {\\n\\t\\t_farm.withdraw(amount);\\n\\t}\\n\\n\\tfunction _depositIntoFarm(uint256 amount) internal override {\\n\\t\\t_farm.stake(amount);\\n\\t}\\n\\n\\tfunction _harvestFarm() internal override returns (uint256 harvested) {\\n\\t\\t_farm.getReward();\\n\\t\\tuint256 farmTokenBalance = _farmToken.balanceOf(address(this));\\n\\t\\tif (farmTokenBalance == 0) return harvested;\\n\\t\\tharvested = _swapExactTokensForTokens(\\n\\t\\t\\t_farmLp,\\n\\t\\t\\tfarmTokenBalance,\\n\\t\\t\\taddress(_farmToken),\\n\\t\\t\\taddress(want())\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _getFarmLp() internal view override returns (uint256) {\\n\\t\\treturn _farm.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction _getLiquidity() internal view override returns (uint256) {\\n\\t\\tuint256 farmLp = _getFarmLp();\\n\\t\\tuint256 poolLp = _pair.balanceOf(address(this));\\n\\t\\treturn farmLp + poolLp;\\n\\t}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0xcd59deb83abff59b2f63437a9e01f5079bbd18b810b16a56952a96ea97485cbd\",\"license\":\"MIT\"},\"src/vUSDCavaxPB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./HedgedLP.sol\\\";\\nimport \\\"./strategy/Compound.sol\\\";\\nimport \\\"./strategy/FarmableUniLp.sol\\\";\\nimport \\\"./strategy/BenqiFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract vUSDCavaxPB is Initializable, HedgedLP, Compound, BenqiFarm, FarmableUniLp {\\n\\tuint256[200] private _gap;\\n\\n\\tstruct Config {\\n\\t\\taddress want;\\n\\t\\taddress short;\\n\\t\\taddress cTokenLend;\\n\\t\\taddress cTokenBorrow;\\n\\t\\taddress uniPair;\\n\\t\\taddress uniFarm;\\n\\t\\taddress farmLp;\\n\\t\\taddress farmToken;\\n\\t\\taddress router;\\n\\t\\taddress comptroller;\\n\\t\\taddress benqiPair;\\n\\t\\taddress benqiToken;\\n\\t\\tuint256 safeCollateralRatio;\\n\\t\\tuint256 operationalFee;\\n\\t\\tuint256 profitFee;\\n\\t\\taddress manager;\\n\\t}\\n\\n\\t// @custom:oz-upgrades-unsafe-allow constructor\\n\\t// constructor() initializer {}\\n\\n\\tfunction initialize(Config memory config) public initializer {\\n\\t\\t__ERC20_init(\\\"vUSDCAVAXPangolinBenqi\\\", \\\"vUSDCPB\\\");\\n\\t\\t// __ERC20Permit_init(\\\"vUSDCAVAXPangolinBenqi\\\");\\n\\t\\t__AccessControl_init();\\n\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n\\t\\t__FarmableUniLp_init_unchained(\\n\\t\\t\\tconfig.uniPair,\\n\\t\\t\\tconfig.uniFarm,\\n\\t\\t\\tconfig.farmLp,\\n\\t\\t\\tconfig.farmToken\\n\\t\\t);\\n\\t\\t__Compound_init_unchained(\\n\\t\\t\\tconfig.comptroller,\\n\\t\\t\\tconfig.cTokenLend,\\n\\t\\t\\tconfig.cTokenBorrow,\\n\\t\\t\\tconfig.safeCollateralRatio\\n\\t\\t);\\n\\t\\t__BenqiFarm_init_unchained(config.comptroller, config.benqiPair, config.benqiToken);\\n\\n\\t\\t__BaseStrategy_init_unchained(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tconfig.operationalFee,\\n\\t\\t\\tconfig.profitFee,\\n\\t\\t\\tconfig.manager\\n\\t\\t);\\n\\t\\t// main strategy  should allways be intialized last\\n\\t\\t__HedgedLP_init_unchained(config.want, config.short);\\n\\n\\t\\t// TODO should this be a separate admin func?\\n\\t\\t// TODO revoke aprovals methods?\\n\\t\\t_addLendingApprovals();\\n\\t\\t_addFarmApprovals();\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t// required implementations: hooks\\n\\tfunction _postBorrowHook(uint256 amount) internal override(Compound) {\\n\\t\\t// wrap avax\\n\\t\\tIWETH(address(short())).deposit{ value: amount }();\\n\\t}\\n\\n\\tfunction _preRepayHook(uint256 amount) internal override(Compound) {\\n\\t\\t// wrap avax\\n\\t\\tIWETH(address(short())).withdraw(amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x111f485a25cba792dd7f1714ecb86af00315a230cf040aabcc374049b47bd65d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f0980620000216000396000f3fe6080604052600436106102535760003560e01c806301ffc9a71461025f57806304b2b8861461029457806306fdde03146102b9578063095ea7b3146102db57806318160ddd146102fb5780631f1fcd511461031057806323b872dd14610332578063248a9ca314610352578063263f4f40146103725780632e1a7d4d146103895780632f2ff15d146103ab57806330741fa4146103cb578063313ce567146103eb5780633644e5151461040757806336568abe1461041c57806338bea4cb1461043c57806339509351146104515780633d68175c146104715780633dfe9f6a146104865780634641257d146104b55780635439c4ad146104ca5780635fe3b567146104ea57806370a08231146105095780637a997ab71461053f5780637d7c2a1c146105615780637dc0d1d0146105765780637ecebe001461059557806391d14854146105b557806395d89b41146105d557806397b3fcaa146105ea578063a217fddf1461062c578063a457c2d714610641578063a8aa1b3114610661578063a9059cbb14610676578063b15f67b314610696578063b6b55f25146106b7578063c089f572146106d7578063c393d0e3146106ee578063cbf2537614610703578063cd377c5314610719578063d505accf1461072e578063d539fe4b1461074e578063d547741f14610764578063dd62ed3e14610784578063e642dd35146107ca578063e86b07ea146107ea578063ec38a86214610800578063ec87621c14610820578063efbb5cb014610842578063f1a392da14610857578063f7c18daa1461086e578063f90766a61461088557600080fd5b3661025a57005b600080fd5b34801561026b57600080fd5b5061027f61027a366004615819565b61089c565b60405190151581526020015b60405180910390f35b3480156102a057600080fd5b506102ab6101645481565b60405190815260200161028b565b3480156102c557600080fd5b506102ce6108d3565b60405161028b9190615bb3565b3480156102e757600080fd5b5061027f6102f63660046156ac565b610965565b34801561030757600080fd5b506035546102ab565b34801561031c57600080fd5b5061032561097b565b60405161028b9190615af9565b34801561033e57600080fd5b5061027f61034d3660046155f4565b61098b565b34801561035e57600080fd5b506102ab61036d3660046157db565b610a3c565b34801561037e57600080fd5b506102ab6101635481565b34801561039557600080fd5b506103a96103a43660046157db565b610a51565b005b3480156103b757600080fd5b506103a96103c63660046157f4565b610d26565b3480156103d757600080fd5b506102ab6103e6366004615843565b610d48565b3480156103f757600080fd5b506040516012815260200161028b565b34801561041357600080fd5b506102ab610e27565b34801561042857600080fd5b506103a96104373660046157f4565b610e36565b34801561044857600080fd5b50610325610eb4565b34801561045d57600080fd5b5061027f61046c3660046156ac565b610ec4565b34801561047d57600080fd5b506102ab610f00565b34801561049257600080fd5b5061019f546104a29061ffff1681565b60405161ffff909116815260200161028b565b3480156104c157600080fd5b506103a9610f3e565b3480156104d657600080fd5b506102ab6104e5366004615843565b610fba565b3480156104f657600080fd5b506101d4546001600160a01b0316610325565b34801561051557600080fd5b506102ab610524366004615581565b6001600160a01b031660009081526033602052604090205490565b34801561054b57600080fd5b506102ab600080516020615e7483398151915281565b34801561056d57600080fd5b506103a961101b565b34801561058257600080fd5b506101d5546001600160a01b0316610325565b3480156105a157600080fd5b506102ab6105b0366004615581565b6111c8565b3480156105c157600080fd5b5061027f6105d03660046157f4565b6111e6565b3480156105e157600080fd5b506102ce611211565b3480156105f657600080fd5b506105ff611220565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161028b565b34801561063857600080fd5b506102ab600081565b34801561064d57600080fd5b5061027f61065c3660046156ac565b61130f565b34801561066d57600080fd5b506103256113a8565b34801561068257600080fd5b5061027f6106913660046156ac565b6113b8565b3480156106a257600080fd5b5061016754610325906001600160a01b031681565b3480156106c357600080fd5b506103a96106d23660046157db565b6113c5565b3480156106e357600080fd5b506102ab6101655481565b3480156106fa57600080fd5b506103a96115bf565b34801561070f57600080fd5b506102ab6101f481565b34801561072557600080fd5b506102ab6115e3565b34801561073a57600080fd5b506103a9610749366004615635565b611614565b34801561075a57600080fd5b506101d6546102ab565b34801561077057600080fd5b506103a961077f3660046157f4565b61175a565b34801561079057600080fd5b506102ab61079f3660046155bb565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156107d657600080fd5b506103a96107e5366004615896565b611777565b3480156107f657600080fd5b506102ab614e2081565b34801561080c57600080fd5b506103a961081b366004615581565b6118de565b34801561082c57600080fd5b506102ab600080516020615e9483398151915281565b34801561084e57600080fd5b506102ab611945565b34801561086357600080fd5b506102ab6101685481565b34801561087a57600080fd5b506102ab6101625481565b34801561089157600080fd5b506102ab6101665481565b60006001600160e01b03198216637965db0b60e01b14806108cd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546108e290615dd1565b80601f016020809104026020016040519081016040528092919081815260200182805461090e90615dd1565b801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b5050505050905090565b600061097233848461195a565b50600192915050565b61019c546001600160a01b031690565b6000610998848484611a7e565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610a225760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610a2f853385840361195a565b60019150505b9392505050565b600090815260fe602052604090206001015490565b61019d5461019c54600091610a7c91670de0b6b3a7640000916001600160a01b039081169116611c3c565b90506000610a91670de0b6b3a7640000611c79565b9050818111610aa1578082610aa4565b81815b61019b54919350915081612710610abb8583615d77565b610ac59190615d58565b610acf9190615d36565b10610aec5760405162461bcd60e51b8152600401610a1990615bc6565b6002610130541415610b105760405162461bcd60e51b8152600401610a1990615c4b565b6002610130556000610b20611d9d565b90506000610b2d60355490565b610b378684615d58565b610b419190615d36565b61019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610b78903090600401615af9565b60206040518083038186803b158015610b9057600080fd5b505afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190615a05565b905081811015610c8c57603554861415610c6c57610be4611e8c565b61019c546040516370a0823160e01b81526001600160a01b03909116906370a0823190610c15903090600401615af9565b60206040518083038186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c659190615a05565b9150610c8c565b80610c7f610c7a8285615d77565b61204c565b610c899190615d1e565b91505b82610c9660355490565b610ca09084615d58565b610caa9190615d36565b9550610cb6338761210b565b61019c54610ccf906001600160a01b0316303385612247565b6040805133815260208101849052908101879052600060608201527f650fdf669e93aa6c8ff3defe2da9c12b64f1548e5e1e54e803f4c1beb6466c8e906080015b60405180910390a1505060016101305550505050565b610d2f82610a3c565b610d39813361229f565b610d438383612303565b505050565b600080610d5786868686612389565b90506000610d65848661244a565b509050600080826001600160a01b0316876001600160a01b031614610d8c57836000610d90565b6000845b9092509050610da96001600160a01b0388168a8a61252d565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f90610de89085908590309060248101615c82565b600060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b50959b9a5050505050505050505050565b6000610e3161254c565b905090565b6001600160a01b0381163314610ea65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a19565b610eb082826125c7565b5050565b61019d546001600160a01b031690565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610972918590610efb908690615d1e565b61195a565b600080610f0b611945565b90506000610f1860355490565b905080610f2d670de0b6b3a764000084615d58565b610f379190615d36565b9250505090565b600080516020615e94833981519152610f57813361229f565b6000610f6161262e565b9050600080610f6e612812565b426101685560405191935091507febdd323f18ba49318367d0c92a04d5c51a67f15a60ad50d46523db464661a30290610fac90859085908590615caf565b60405180910390a150505050565b600080610fc986868686612969565b90506000610fd7848661244a565b509050600080826001600160a01b0316876001600160a01b031614610ffe57876000611002565b6000885b9092509050610da96001600160a01b0388168a8661252d565b600080516020615e94833981519152611034813361229f565b61019d5461019c5460009161105f91670de0b6b3a7640000916001600160a01b039081169116611c3c565b90506000611074670de0b6b3a7640000611c79565b9050818111611084578082611087565b81815b61019b5491935091508161271061109e8583615d77565b6110a89190615d58565b6110b29190615d36565b106110cf5760405162461bcd60e51b8152600401610a1990615bc6565b60026101305414156110f35760405162461bcd60e51b8152600401610a1990615c4b565b6002610130556000611103612a22565b5090506000611110611d9d565b9050600061111d82612af2565b9050600080600061112e8487612b1f565b9250925092508261113e57600080fd5b600061114a8587615d77565b905082156111615761115c8582612c59565b61116b565b61116b8582612eac565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b61119d670de0b6b3a7640000613127565b83886040516111ae93929190615caf565b60405180910390a150506001610130555050505050505050565b6001600160a01b0381166000908152609960205260408120546108cd565b600091825260fe602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060603780546108e290615dd1565b600080600080600080611231613156565b945061123b613288565b935061124684613127565b92506000611252612a22565b509050611260816002615d58565b61019c546040516370a0823160e01b81529194506001600160a01b0316906370a0823190611292903090600401615af9565b60206040518083038186803b1580156112aa57600080fd5b505afa1580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190615a05565b915081846112f08589615d1e565b6112fa9190615d77565b6113049190615d1e565b965050909192939495565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156113915760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a19565b61139e338585840361195a565b5060019392505050565b610241546001600160a01b031690565b6000610972338484611a7e565b600080516020615e748339815191526113de813361229f565b61019d5461019c5460009161140991670de0b6b3a7640000916001600160a01b039081169116611c3c565b9050600061141e670de0b6b3a7640000611c79565b905081811161142e578082611431565b81815b61019b549193509150816127106114488583615d77565b6114529190615d58565b61145c9190615d36565b106114795760405162461bcd60e51b8152600401610a1990615bc6565b600261013054141561149d5760405162461bcd60e51b8152600401610a1990615c4b565b60026101305560006114ad611d9d565b905060006114ba60355490565b156114e35781866114ca60355490565b6114d49190615d58565b6114de9190615d36565b6114e5565b855b61019c546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061151b90339030908b90600401615b0d565b602060405180830381600087803b15801561153557600080fd5b505af1158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d9190615784565b506115778661330a565b611581338261336f565b60408051338152602081018890529081018290527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590606001610d10565b600080516020615e948339815191526115d8813361229f565b6115e0611e8c565b50565b6000670de0b6b3a76400006115f86101d65490565b61160061343c565b61160a9190615d58565b610e319190615d36565b834211156116645760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610a19565b6000609a548888886116758c6134ce565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006116d0826134f6565b905060006116e082878787613544565b9050896001600160a01b0316816001600160a01b0316146117435760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610a19565b61174e8a8a8a61195a565b50505050505050505050565b61176382610a3c565b61176d813361229f565b610d4383836125c7565b600054610100900460ff1680611790575060005460ff16155b6117ac5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156117ce576000805461ffff19166101011790555b6118256040518060400160405280601681526020017576555344434156415850616e676f6c696e42656e716960501b815250604051806040016040528060078152602001663b2aa9a221a82160c91b81525061356c565b61182d6135eb565b61183860003361366e565b61185482608001518360a001518460c001518560e00151613678565b61187282610120015183604001518460600151856101800151613736565b61188c826101200151836101400151846101600151613880565b6118a733836101a00151846101c00151856101e0015161392e565b6118b982600001518360200151613af7565b6118c1613bc0565b6118c9613bee565b8015610eb0576000805461ff00191690555050565b600080516020615e948339815191526118f7813361229f565b6001600160a01b03821661190a57600080fd5b7f4e02820ee8f94677fdcb7853cf216d6695139bacba43fb49a6eb7ec549e14477826040516119399190615af9565b60405180910390a15050565b600061194f611220565b509395945050505050565b6001600160a01b0383166119bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a19565b6001600160a01b038216611a1d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a19565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611ae25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a19565b6001600160a01b038216611b445760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a19565b6001600160a01b03831660009081526033602052604090205481811015611bbc5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a19565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611bf3908490615d1e565b92505081905550826001600160a01b0316846001600160a01b0316600080516020615eb483398151915284604051611c2d91815260200190565b60405180910390a35b50505050565b600083611c4b57506000610a35565b600080611c60611c596113a8565b8686613c0f565b91509150611c6f868383613cde565b9695505050505050565b6101d5546101d25460405163fc57d4df60e01b81526000926001600160a01b039081169263fc57d4df92611cb39290911690600401615af9565b60206040518083038186803b158015611ccb57600080fd5b505afa158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d039190615a05565b6101d5546101d35460405163fc57d4df60e01b81526001600160a01b039283169263fc57d4df92611d3992911690600401615af9565b60206040518083038186803b158015611d5157600080fd5b505afa158015611d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d899190615a05565b611d939084615d58565b6108cd9190615d36565b600080611da8613da8565b90506000611db4613e08565b90506000611dc182613127565b90506000611dcd612a22565b5061019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611e05903090600401615af9565b60206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190615a05565b90508083611e64846002615d58565b611e6e9088615d1e565b611e789190615d77565b611e829190615d1e565b9550505050505090565b611e966000613e3a565b50506000611ea2613e08565b61019d546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611ed9903090600401615af9565b60206040518083038186803b158015611ef157600080fd5b505afa158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190615a05565b905080821115611f6f576000611f3f8284615d77565b9050611f68611f4c6113a8565b61019c5461019d5484916001600160a01b039081169116610fba565b5050611faf565b81811115611faf576000611f838383615d77565b9050611fac611f906113a8565b61019d5461019c5484916001600160a01b039081169116610d48565b50505b61019d546040516370a0823160e01b8152612037916001600160a01b0316906370a0823190611fe2903090600401615af9565b60206040518083038186803b158015611ffa57600080fd5b505afa15801561200e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120329190615a05565b613e9c565b6000612041613da8565b9050610d4381613f12565b60008061205883612af2565b90506000612064612a22565b5090506000612071613288565b90506000806120886120838686615d77565b613e3a565b909250905080808410156120d5576120c56120a16113a8565b6120ab8685615d77565b61019d5461019c546001600160a01b039182169116610d48565b6120cf9084615d1e565b92508390505b6120de81613e9c565b60006120f26120ed858b615d77565b613f92565b90506120fe8185615d1e565b9998505050505050505050565b6001600160a01b03821661216b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a19565b6001600160a01b038216600090815260336020526040902054818110156121df5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a19565b6001600160a01b038316600090815260336020526040812083830390556035805484929061220e908490615d77565b90915550506040518281526000906001600160a01b03851690600080516020615eb48339815191529060200160405180910390a3505050565b611c36846323b872dd60e01b85858560405160240161226893929190615b0d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614036565b6122a982826111e6565b610eb0576122c1816001600160a01b03166014614108565b6122cc836020614108565b6040516020016122dd929190615a8a565b60408051601f198184030181529082905262461bcd60e51b8252610a1991600401615bb3565b61230d82826111e6565b610eb057600082815260fe602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123453390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008084116123e65760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b6064820152608401610a19565b6000806123f4878686613c0f565b90925090506000612407876103e5615d58565b905060006124158383615d58565b9050600082612426866103e8615d58565b6124309190615d1e565b905061243c8183615d36565b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031614156124af5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f4144445245535345530000006044820152606401610a19565b826001600160a01b0316846001600160a01b0316106124cf5782846124d2565b83835b90925090506001600160a01b0382166125265760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b6044820152606401610a19565b9250929050565b610d438363a9059cbb60e01b8484604051602401612268929190615b31565b6000610e317f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61257b60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6125d182826111e6565b15610eb057600082815260fe602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61019d5461019c54600091829161265b91670de0b6b3a7640000916001600160a01b039182169116611c3c565b90506000612670670de0b6b3a7640000611c79565b9050818111612680578082612683565b81815b61019b5491935091508161271061269a8583615d77565b6126a49190615d58565b6126ae9190615d36565b106126cb5760405162461bcd60e51b8152600401610a1990615bc6565b6126d761019e546142a3565b6126e19084615d1e565b92506126eb6144ca565b6126f59084615d1e565b61019c546040516370a0823160e01b81529194506000916001600160a01b03909116906370a082319061272c903090600401615af9565b60206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c9190615a05565b9050801561280c5761019c546040516370a0823160e01b815261280c916001600160a01b0316906370a08231906127b7903090600401615af9565b60206040518083038186803b1580156127cf57600080fd5b505afa1580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128079190615a05565b61330a565b50505090565b600080600061281f610f00565b9050610164548111156128ca576000610164548261283d9190615d77565b9050600061016454670de0b6b3a7640000836128599190615d58565b6128639190615d36565b9050670de0b6b3a7640000612710610166548361287f60355490565b6128899190615d58565b6128939190615d58565b61289d9190615d36565b6128a79190615d36565b610167549095506128c1906001600160a01b03168661336f565b50506101648190555b610165541561296457600061016854426128e49190615d77565b905060006128f561016d6018615d58565b61290090603c615d58565b61290b90603c615d58565b90508061271061291a60355490565b84610165546129299190615d58565b6129339190615d58565b61293d9190615d36565b6129479190615d36565b61016754909450612961906001600160a01b03168561336f565b50505b509091565b60008084116129c65760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b6064820152608401610a19565b6000806129d4878686613c0f565b909250905060006129e58784615d58565b6129f1906103e8615d58565b905060006129ff8884615d77565b612a0b906103e5615d58565b9050612a178183615d36565b6120fe906001615d1e565b6000806000612a2f6145da565b9050600080612a3c614678565b915091506000612a4a6113a8565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8257600080fd5b505afa158015612a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aba9190615a05565b905080612ac78585615d58565b612ad19190615d36565b955080612ade8584615d58565b612ae89190615d36565b9450505050509091565b600080612afd6115e3565b9050612b0b81612710615d1e565b612b158285615d58565b610a359190615d36565b6000806000838511612b32576000612b35565b60015b9150831580612b42575084155b15612b5257848414159250612c52565b6000612b5c613288565b905082612b8a5785612710612b718288615d77565b612b7b9190615d58565b612b859190615d36565b612bac565b84612710612b988289615d77565b612ba29190615d58565b612bac9190615d36565b61019f5490925061ffff16821180612c45575061019c546040516370a0823160e01b815262989680916001600160a01b0316906370a0823190612bf3903090600401615af9565b60206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190615a05565b115b80612c4e575080155b9350505b9250925092565b612c62816146a4565b50506000612c6f83614701565b90506000612c7b613288565b9050612c8f612c8a8284615d77565b614730565b6000612c99612a22565b5061019c546040516370a0823160e01b815291925060009183916001600160a01b0316906370a0823190612cd1903090600401615af9565b60206040518083038186803b158015612ce957600080fd5b505afa158015612cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d219190615a05565b612d2b9190615d1e565b612d359087615d77565b90508015612d6657612d64612d486113a8565b61019d5461019c5484916001600160a01b039081169116610fba565b505b61019d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612d98903090600401615af9565b60206040518083038186803b158015612db057600080fd5b505afa158015612dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de89190615a05565b90506000612df582613127565b61019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612e2c903090600401615af9565b60206040518083038186803b158015612e4457600080fd5b505afa158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c9190615a05565b905081811015612e9557809150612e9282614701565b92505b6000612ea183856147b9565b905061174e81614878565b81612eb957610eb0611e8c565b612ec282613e3a565b505061019d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612ef6903090600401615af9565b60206040518083038186803b158015612f0e57600080fd5b505afa158015612f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f469190615a05565b9050612f5181613e9c565b6000612f5c836146a4565b9150506000612f69613e08565b90506000612f7686614701565b612f809083615d77565b905080612f8f57505050505050565b6000612fb8612f9c6113a8565b61019c5461019d5485916001600160a01b039081169116612969565b61019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612fef903090600401615af9565b60206040518083038186803b15801561300757600080fd5b505afa15801561301b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303f9190615a05565b905060008183106130505781613052565b825b905061307b61305f6113a8565b61019c5461019d5484916001600160a01b039081169116610d48565b5061019d546040516370a0823160e01b81526001600160a01b03909116906370a08231906130ad903090600401615af9565b60206040518083038186803b1580156130c557600080fd5b505afa1580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fd9190615a05565b965061310887613e9c565b8588111561311c57613119886146a4565b50505b505050505050505050565b60008161313657506000919050565b61019d5461019c546108cd9184916001600160a01b039182169116611c3c565b6101d2546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061318c903090600401615af9565b60206040518083038186803b1580156131a457600080fd5b505afa1580156131b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131dc9190615a05565b9050670de0b6b3a76400006101d260009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561323657600080fd5b505afa15801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e9190615a05565b6132789083615d58565b6132829190615d36565b91505090565b6101d3546040516395dd919360e01b81526000916001600160a01b0316906395dd9193906132ba903090600401615af9565b60206040518083038186803b1580156132d257600080fd5b505afa1580156132e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e319190615a05565b600061331582612af2565b61019c5461019d5491925060009161333b9184916001600160a01b039182169116611c3c565b905061334f61334a8385615d77565b6148d4565b61335881614730565b600061336483836147b9565b9050611c3681614878565b6001600160a01b0382166133c55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a19565b80603560008282546133d79190615d1e565b90915550506001600160a01b03821660009081526033602052604081208054839290613404908490615d1e565b90915550506040518181526001600160a01b03831690600090600080516020615eb48339815191529060200160405180910390a35050565b6101d4546101d254604051638e8f294b60e01b815260009283926001600160a01b0391821692638e8f294b92613476921690600401615af9565b60606040518083038186803b15801561348e57600080fd5b505afa1580156134a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c6919061579f565b509392505050565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b60006108cd61350361254c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061355587878787614953565b9150915061356281614a36565b5095945050505050565b600054610100900460ff1680613585575060005460ff16155b6135a15760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156135c3576000805461ffff19166101011790555b6135cb614bec565b6135d58383614c56565b8015610d43576000805461ff0019169055505050565b600054610100900460ff1680613604575060005460ff16155b6136205760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015613642576000805461ffff19166101011790555b61364a614bec565b613652614bec565b61365a614bec565b80156115e0576000805461ff001916905550565b610eb08282612303565b600054610100900460ff1680613691575060005460ff16155b6136ad5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156136cf576000805461ffff19166101011790555b61023e80546001600160a01b038087166001600160a01b03199283161790925561023f80548684169083161790556102408054858416908316179055610241805492881692909116919091179055801561372f576000805461ff00191690555b5050505050565b600054610100900460ff168061374f575060005460ff16155b61376b5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff1615801561378d576000805461ffff19166101011790555b6101d280546001600160a01b038087166001600160a01b0319928316179092556101d380548684169083161790556101d480549288169290911682179055604080516307dc0d1d60e41b81529051637dc0d1d091600480820192602092909190829003018186803b15801561380157600080fd5b505afa158015613815573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613839919061559e565b6101d580546001600160a01b0319166001600160a01b03929092169190911790556101d6829055613868614ceb565b801561372f576000805461ff00191690555050505050565b600054610100900460ff1680613899575060005460ff16155b6138b55760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156138d7576000805461ffff19166101011790555b61020980546001600160a01b038087166001600160a01b03199283161790925561020b805486841690831617905561020a8054928516929091169190911790558015611c36576000805461ff001916905550505050565b600054610100900460ff1680613947575060005460ff16155b6139635760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015613985576000805461ffff19166101011790555b6101f484106139e95760405162461bcd60e51b815260206004820152602a60248201527f4261736553747261746567793a206f7065726174696f6e616c466565206578636044820152691959591cc81b1a5b5a5d60b21b6064820152608401610a19565b614e208310613a485760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a2070726f6669744665652065786365656473206044820152641b1a5b5a5d60da1b6064820152608401610a19565b613a50614dc2565b613a68600080516020615e948339815191528361366e565b613a80600080516020615e748339815191528361366e565b613a98600080516020615e748339815191523361366e565b61016780546001600160a01b0319166001600160a01b038716179055610165849055610166839055670de0b6b3a764000061016455426101685560001961016281905561016355801561372f576000805461ff00191690555050505050565b600054610100900460ff1680613b10575060005460ff16155b613b2c5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015613b4e576000805461ffff19166101011790555b61019c80546001600160a01b038086166001600160a01b0319928316811790935561019d805491861691909216179055613b8b9030600019614e33565b603c61019b5561019f805461ffff19166101901790556301312d0061019e558015610d43576000805461ff0019169055505050565b6101d254613bec906001600160a01b0316600019613bdc61097b565b6001600160a01b03169190614e33565b565b61023e5461024154613bec916001600160a01b039182169116600019614e33565b6000806000613c1e858561244a565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613c5d57600080fd5b505afa158015613c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9591906159b5565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613ccc578082613ccf565b81815b90999098509650505050505050565b6000808411613d2f5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e540000006044820152606401610a19565b600083118015613d3f5750600082115b613d8b5760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c49515549444954596044820152606401610a19565b82613d968386615d58565b613da09190615d36565b949350505050565b6101d254604051633af9e66960e01b81526000916001600160a01b031690633af9e66990613dda903090600401615af9565b602060405180830381600087803b158015613df457600080fd5b505af11580156132e6573d6000803e3d6000fd5b6101d3546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90613dda903090600401615af9565b6000806000613e47612a22565b5090506000613e546145da565b9050600082613e638784615d58565b613e6d9190615d36565b90506000613e7b8284615d77565b9050613e8681614f46565b613e8f81614f78565b9550955050505050915091565b613ea58161506d565b6101d360009054906101000a90046001600160a01b03166001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613ef657600080fd5b505af1158015613f0a573d6000803e3d6000fd5b505050505050565b6101d25460405163852a12e360e01b8152600481018390526000916001600160a01b03169063852a12e390602401602060405180830381600087803b158015613f5a57600080fd5b505af1158015613f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d439190615a05565b600080613fa5613fa0613288565b611c79565b90506000613fb1613156565b90506000605f613fbf61343c565b613fd185670de0b6b3a7640000615d58565b613fdc906064615d58565b613fe69190615d36565b613ff09190615d36565b90508181111561400557506000949350505050565b60006140118284615d77565b90508581116140205780614022565b855b945061402d85613f12565b50505050919050565b600061408b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150a29092919063ffffffff16565b805190915015610d4357808060200190518101906140a99190615784565b610d435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a19565b60606000614117836002615d58565b614122906002615d1e565b6001600160401b0381111561413957614139615e48565b6040519080825280601f01601f191660200182016040528015614163576020820181803683370190505b509050600360fc1b8160008151811061417e5761417e615e32565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106141ad576141ad615e32565b60200101906001600160f81b031916908160001a90535060006141d1846002615d58565b6141dc906001615d1e565b90505b6001811115614254576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061421057614210615e32565b1a60f81b82828151811061422657614226615e32565b60200101906001600160f81b031916908160001a90535060049490941c9361424d81615dba565b90506141df565b508315610a355760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a19565b6000806142ae6150b1565b9050828110156142be5750919050565b61020954604051630952c56360e01b81526001600160a01b0390911690630952c563906142f2906000903090600401615b97565b600060405180830381600087803b15801561430c57600080fd5b505af1158015614320573d6000803e3d6000fd5b505061020a546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190614358903090600401615af9565b60206040518083038186803b15801561437057600080fd5b505afa158015614384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a89190615a05565b905080156143d55761020b5461020a546143d3916001600160a01b03908116918491166103e6610eb4565b505b61020954604051630952c56360e01b81526001600160a01b0390911690630952c56390614409906001903090600401615b97565b600060405180830381600087803b15801561442357600080fd5b505af1158015614437573d6000803e3d6000fd5b5047925050508061444a57505050919050565b614452610eb4565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561448c57600080fd5b505af11580156144a0573d6000803e3d6000fd5b50505050506144c16144b06113a8565b826144b9610eb4565b6103e661097b565b95945050505050565b61023e5460408051631e8c5c8960e11b815290516000926001600160a01b031691633d18b912916004808301928692919082900301818387803b15801561451057600080fd5b505af1158015614524573d6000803e3d6000fd5b5050610240546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319061455c903090600401615af9565b60206040518083038186803b15801561457457600080fd5b505afa158015614588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ac9190615a05565b9050806145b7575090565b61023f5461024054613282916001600160a01b03908116918491166103e661097b565b6000806145e5615234565b610241546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061461c903090600401615af9565b60206040518083038186803b15801561463457600080fd5b505afa158015614648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061466c9190615a05565b9050610f378183615d1e565b60008061469b6146866113a8565b61468e61097b565b614696610eb4565b613c0f565b90939092509050565b60008060006146b1613156565b9050838114156146c75750600093849350915050565b8381116146e7576146e06146db8286615d77565b615266565b60006146f6565b60006146f66120ed8684615d77565b909590945092505050565b60008161471057506000919050565b61019c5461019d546108cd9184916001600160a01b039182169116611c3c565b6101d35460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec90602401602060405180830381600087803b15801561477757600080fd5b505af115801561478b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147af9190615a05565b506115e08161530e565b60006147df6147c66113a8565b846147cf61097b565b6001600160a01b0316919061252d565b6147f36147ea6113a8565b836147cf610eb4565b6147fb6113a8565b6001600160a01b0316636a627842306040518263ffffffff1660e01b81526004016148269190615af9565b602060405180830381600087803b15801561484057600080fd5b505af1158015614854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190615a05565b61023e5460405163534a7e1d60e11b8152600481018390526001600160a01b039091169063a694fc3a906024015b600060405180830381600087803b1580156148c057600080fd5b505af115801561372f573d6000803e3d6000fd5b6101d25460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561491b57600080fd5b505af115801561492f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190615a05565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156149805750600090506003614a2d565b8460ff16601b1415801561499857508460ff16601c14155b156149a95750600090506004614a2d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156149fd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614a2657600060019250925050614a2d565b9150600090505b94509492505050565b6000816004811115614a4a57614a4a615e1c565b1415614a535750565b6001816004811115614a6757614a67615e1c565b1415614ab05760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610a19565b6002816004811115614ac457614ac4615e1c565b1415614b125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a19565b6003816004811115614b2657614b26615e1c565b1415614b7f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a19565b6004816004811115614b9357614b93615e1c565b14156115e05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a19565b600054610100900460ff1680614c05575060005460ff16155b614c215760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff1615801561365a576000805461ffff191661010117905580156115e0576000805461ff001916905550565b600054610100900460ff1680614c6f575060005460ff16155b614c8b5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015614cad576000805461ffff19166101011790555b8251614cc09060369060208601906154b1565b508151614cd49060379060208501906154b1565b508015610d43576000805461ff0019169055505050565b6040805160018082528183019092526000916020808301908036833750506101d25482519293506001600160a01b031691839150600090614d2e57614d2e615e32565b6001600160a01b0392831660209182029290920101526101d454604051631853304760e31b815291169063c299823890614d6c908490600401615b4a565b600060405180830381600087803b158015614d8657600080fd5b505af1158015614d9a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eb091908101906156d8565b600054610100900460ff1680614ddb575060005460ff16155b614df75760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015614e19576000805461ffff19166101011790555b60016101305580156115e0576000805461ff001916905550565b801580614ebc5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015614e8257600080fd5b505afa158015614e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eba9190615a05565b155b614f275760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610a19565b610d438363095ea7b360e01b8484604051602401612268929190615b31565b61023e54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d906024016148a6565b600080614f8f614f866113a8565b846147cf6113a8565b6000614fa9614f9c61097b565b614fa4610eb4565b61244a565b509050600080614fb76113a8565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401614fe29190615af9565b6040805180830381600087803b158015614ffb57600080fd5b505af115801561500f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150339190615a1e565b9150915061503f61097b565b6001600160a01b0316836001600160a01b03161461505e578082615061565b81815b94509450505050915091565b615075610eb4565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b81526004016148a691815260200190565b6060613da08484600085615350565b610209546040516305b9783d60e01b815260009182916001600160a01b03909116906305b9783d906150e99084903090600401615b97565b60206040518083038186803b15801561510157600080fd5b505afa158015615115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151399190615a05565b9050600081156151705761020b5461020a5461516b916001600160a01b0390811691859116615166610eb4565b612389565b615173565b60005b610209546040516305b9783d60e01b81529192506001600160a01b0316906305b9783d906151a8906001903090600401615b97565b60206040518083038186803b1580156151c057600080fd5b505afa1580156151d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151f89190615a05565b6152029082615d1e565b9050801561522b576152266152156113a8565b8261521e610eb4565b61516661097b565b610f37565b60009250505090565b61023e546040516370a0823160e01b81526000916001600160a01b0316906370a08231906132ba903090600401615af9565b60008061527161097b565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161529c9190615af9565b60206040518083038186803b1580156152b457600080fd5b505afa1580156152c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152ec9190615a05565b90508281116152fb57806152fd565b825b915081156134f0576134f0826148d4565b615316610eb4565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613ef657600080fd5b6060824710156153b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a19565b843b6153ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a19565b600080866001600160a01b0316858760405161541b9190615a6e565b60006040518083038185875af1925050503d8060008114615458576040519150601f19603f3d011682016040523d82523d6000602084013e61545d565b606091505b509150915061546d828286615478565b979650505050505050565b60608315615487575081610a35565b8251156154975782518084602001fd5b8160405162461bcd60e51b8152600401610a199190615bb3565b8280546154bd90615dd1565b90600052602060002090601f0160209004810192826154df5760008555615525565b82601f106154f857805160ff1916838001178555615525565b82800160010185558215615525579182015b8281111561552557825182559160200191906001019061550a565b50615531929150615535565b5090565b5b808211156155315760008155600101615536565b803561555581615e5e565b919050565b8051801515811461555557600080fd5b80516001600160701b038116811461555557600080fd5b60006020828403121561559357600080fd5b8135610a3581615e5e565b6000602082840312156155b057600080fd5b8151610a3581615e5e565b600080604083850312156155ce57600080fd5b82356155d981615e5e565b915060208301356155e981615e5e565b809150509250929050565b60008060006060848603121561560957600080fd5b833561561481615e5e565b9250602084013561562481615e5e565b929592945050506040919091013590565b600080600080600080600060e0888a03121561565057600080fd5b873561565b81615e5e565b9650602088013561566b81615e5e565b95506040880135945060608801359350608088013560ff8116811461568f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156156bf57600080fd5b82356156ca81615e5e565b946020939093013593505050565b600060208083850312156156eb57600080fd5b82516001600160401b038082111561570257600080fd5b818501915085601f83011261571657600080fd5b81518181111561572857615728615e48565b8060051b9150615739848301615cee565b8181528481019084860184860187018a101561575457600080fd5b600095505b83861015615777578051835260019590950194918601918601615759565b5098975050505050505050565b60006020828403121561579657600080fd5b610a358261555a565b6000806000606084860312156157b457600080fd5b6157bd8461555a565b9250602084015191506157d26040850161555a565b90509250925092565b6000602082840312156157ed57600080fd5b5035919050565b6000806040838503121561580757600080fd5b8235915060208301356155e981615e5e565b60006020828403121561582b57600080fd5b81356001600160e01b031981168114610a3557600080fd5b6000806000806080858703121561585957600080fd5b843561586481615e5e565b935060208501359250604085013561587b81615e5e565b9150606085013561588b81615e5e565b939692955090935050565b600061020082840312156158a957600080fd5b6158b1615cc5565b6158ba8361554a565b81526158c86020840161554a565b60208201526158d96040840161554a565b60408201526158ea6060840161554a565b60608201526158fb6080840161554a565b608082015261590c60a0840161554a565b60a082015261591d60c0840161554a565b60c082015261592e60e0840161554a565b60e082015261010061594181850161554a565b9082015261012061595384820161554a565b9082015261014061596584820161554a565b9082015261016061597784820161554a565b9082015261018083810135908201526101a080840135908201526101c080840135908201526101e06159aa81850161554a565b908201529392505050565b6000806000606084860312156159ca57600080fd5b6159d38461556a565b92506159e16020850161556a565b9150604084015163ffffffff811681146159fa57600080fd5b809150509250925092565b600060208284031215615a1757600080fd5b5051919050565b60008060408385031215615a3157600080fd5b505080516020909101519092909150565b60008151808452615a5a816020860160208601615d8e565b601f01601f19169290920160200192915050565b60008251615a80818460208701615d8e565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615abc816017850160208801615d8e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615aed816028840160208801615d8e565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015615b8b5783516001600160a01b031683529284019291840191600101615b66565b50909695505050505050565b60ff9290921682526001600160a01b0316602082015260400190565b602081526000610a356020830184615a42565b6020808252601e908201527f4865646765644c503a2053484f52545f50524943455f4d49534d415443480000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b84815283602082015260018060a01b0383166040820152608060608201526000611c6f6080830184615a42565b9283526020830191909152604082015260600190565b60405161020081016001600160401b0381118282101715615ce857615ce8615e48565b60405290565b604051601f8201601f191681016001600160401b0381118282101715615d1657615d16615e48565b604052919050565b60008219821115615d3157615d31615e06565b500190565b600082615d5357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615d7257615d72615e06565b500290565b600082821015615d8957615d89615e06565b500390565b60005b83811015615da9578181015183820152602001615d91565b83811115611c365750506000910152565b600081615dc957615dc9615e06565b506000190190565b600181811c90821680615de557607f821691505b602082108114156134f057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115e057600080fdfedc72ed553f2544c34465af23b847953efeb813428162d767f9ba5f4013be6760241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220903cf1c298678ab3ef616d2e848525a5f593a5e76cce18c9144d0d9aff4ba2c664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102535760003560e01c806301ffc9a71461025f57806304b2b8861461029457806306fdde03146102b9578063095ea7b3146102db57806318160ddd146102fb5780631f1fcd511461031057806323b872dd14610332578063248a9ca314610352578063263f4f40146103725780632e1a7d4d146103895780632f2ff15d146103ab57806330741fa4146103cb578063313ce567146103eb5780633644e5151461040757806336568abe1461041c57806338bea4cb1461043c57806339509351146104515780633d68175c146104715780633dfe9f6a146104865780634641257d146104b55780635439c4ad146104ca5780635fe3b567146104ea57806370a08231146105095780637a997ab71461053f5780637d7c2a1c146105615780637dc0d1d0146105765780637ecebe001461059557806391d14854146105b557806395d89b41146105d557806397b3fcaa146105ea578063a217fddf1461062c578063a457c2d714610641578063a8aa1b3114610661578063a9059cbb14610676578063b15f67b314610696578063b6b55f25146106b7578063c089f572146106d7578063c393d0e3146106ee578063cbf2537614610703578063cd377c5314610719578063d505accf1461072e578063d539fe4b1461074e578063d547741f14610764578063dd62ed3e14610784578063e642dd35146107ca578063e86b07ea146107ea578063ec38a86214610800578063ec87621c14610820578063efbb5cb014610842578063f1a392da14610857578063f7c18daa1461086e578063f90766a61461088557600080fd5b3661025a57005b600080fd5b34801561026b57600080fd5b5061027f61027a366004615819565b61089c565b60405190151581526020015b60405180910390f35b3480156102a057600080fd5b506102ab6101645481565b60405190815260200161028b565b3480156102c557600080fd5b506102ce6108d3565b60405161028b9190615bb3565b3480156102e757600080fd5b5061027f6102f63660046156ac565b610965565b34801561030757600080fd5b506035546102ab565b34801561031c57600080fd5b5061032561097b565b60405161028b9190615af9565b34801561033e57600080fd5b5061027f61034d3660046155f4565b61098b565b34801561035e57600080fd5b506102ab61036d3660046157db565b610a3c565b34801561037e57600080fd5b506102ab6101635481565b34801561039557600080fd5b506103a96103a43660046157db565b610a51565b005b3480156103b757600080fd5b506103a96103c63660046157f4565b610d26565b3480156103d757600080fd5b506102ab6103e6366004615843565b610d48565b3480156103f757600080fd5b506040516012815260200161028b565b34801561041357600080fd5b506102ab610e27565b34801561042857600080fd5b506103a96104373660046157f4565b610e36565b34801561044857600080fd5b50610325610eb4565b34801561045d57600080fd5b5061027f61046c3660046156ac565b610ec4565b34801561047d57600080fd5b506102ab610f00565b34801561049257600080fd5b5061019f546104a29061ffff1681565b60405161ffff909116815260200161028b565b3480156104c157600080fd5b506103a9610f3e565b3480156104d657600080fd5b506102ab6104e5366004615843565b610fba565b3480156104f657600080fd5b506101d4546001600160a01b0316610325565b34801561051557600080fd5b506102ab610524366004615581565b6001600160a01b031660009081526033602052604090205490565b34801561054b57600080fd5b506102ab600080516020615e7483398151915281565b34801561056d57600080fd5b506103a961101b565b34801561058257600080fd5b506101d5546001600160a01b0316610325565b3480156105a157600080fd5b506102ab6105b0366004615581565b6111c8565b3480156105c157600080fd5b5061027f6105d03660046157f4565b6111e6565b3480156105e157600080fd5b506102ce611211565b3480156105f657600080fd5b506105ff611220565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161028b565b34801561063857600080fd5b506102ab600081565b34801561064d57600080fd5b5061027f61065c3660046156ac565b61130f565b34801561066d57600080fd5b506103256113a8565b34801561068257600080fd5b5061027f6106913660046156ac565b6113b8565b3480156106a257600080fd5b5061016754610325906001600160a01b031681565b3480156106c357600080fd5b506103a96106d23660046157db565b6113c5565b3480156106e357600080fd5b506102ab6101655481565b3480156106fa57600080fd5b506103a96115bf565b34801561070f57600080fd5b506102ab6101f481565b34801561072557600080fd5b506102ab6115e3565b34801561073a57600080fd5b506103a9610749366004615635565b611614565b34801561075a57600080fd5b506101d6546102ab565b34801561077057600080fd5b506103a961077f3660046157f4565b61175a565b34801561079057600080fd5b506102ab61079f3660046155bb565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156107d657600080fd5b506103a96107e5366004615896565b611777565b3480156107f657600080fd5b506102ab614e2081565b34801561080c57600080fd5b506103a961081b366004615581565b6118de565b34801561082c57600080fd5b506102ab600080516020615e9483398151915281565b34801561084e57600080fd5b506102ab611945565b34801561086357600080fd5b506102ab6101685481565b34801561087a57600080fd5b506102ab6101625481565b34801561089157600080fd5b506102ab6101665481565b60006001600160e01b03198216637965db0b60e01b14806108cd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546108e290615dd1565b80601f016020809104026020016040519081016040528092919081815260200182805461090e90615dd1565b801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b5050505050905090565b600061097233848461195a565b50600192915050565b61019c546001600160a01b031690565b6000610998848484611a7e565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610a225760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610a2f853385840361195a565b60019150505b9392505050565b600090815260fe602052604090206001015490565b61019d5461019c54600091610a7c91670de0b6b3a7640000916001600160a01b039081169116611c3c565b90506000610a91670de0b6b3a7640000611c79565b9050818111610aa1578082610aa4565b81815b61019b54919350915081612710610abb8583615d77565b610ac59190615d58565b610acf9190615d36565b10610aec5760405162461bcd60e51b8152600401610a1990615bc6565b6002610130541415610b105760405162461bcd60e51b8152600401610a1990615c4b565b6002610130556000610b20611d9d565b90506000610b2d60355490565b610b378684615d58565b610b419190615d36565b61019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610b78903090600401615af9565b60206040518083038186803b158015610b9057600080fd5b505afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190615a05565b905081811015610c8c57603554861415610c6c57610be4611e8c565b61019c546040516370a0823160e01b81526001600160a01b03909116906370a0823190610c15903090600401615af9565b60206040518083038186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c659190615a05565b9150610c8c565b80610c7f610c7a8285615d77565b61204c565b610c899190615d1e565b91505b82610c9660355490565b610ca09084615d58565b610caa9190615d36565b9550610cb6338761210b565b61019c54610ccf906001600160a01b0316303385612247565b6040805133815260208101849052908101879052600060608201527f650fdf669e93aa6c8ff3defe2da9c12b64f1548e5e1e54e803f4c1beb6466c8e906080015b60405180910390a1505060016101305550505050565b610d2f82610a3c565b610d39813361229f565b610d438383612303565b505050565b600080610d5786868686612389565b90506000610d65848661244a565b509050600080826001600160a01b0316876001600160a01b031614610d8c57836000610d90565b6000845b9092509050610da96001600160a01b0388168a8a61252d565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f90610de89085908590309060248101615c82565b600060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b50959b9a5050505050505050505050565b6000610e3161254c565b905090565b6001600160a01b0381163314610ea65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a19565b610eb082826125c7565b5050565b61019d546001600160a01b031690565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610972918590610efb908690615d1e565b61195a565b600080610f0b611945565b90506000610f1860355490565b905080610f2d670de0b6b3a764000084615d58565b610f379190615d36565b9250505090565b600080516020615e94833981519152610f57813361229f565b6000610f6161262e565b9050600080610f6e612812565b426101685560405191935091507febdd323f18ba49318367d0c92a04d5c51a67f15a60ad50d46523db464661a30290610fac90859085908590615caf565b60405180910390a150505050565b600080610fc986868686612969565b90506000610fd7848661244a565b509050600080826001600160a01b0316876001600160a01b031614610ffe57876000611002565b6000885b9092509050610da96001600160a01b0388168a8661252d565b600080516020615e94833981519152611034813361229f565b61019d5461019c5460009161105f91670de0b6b3a7640000916001600160a01b039081169116611c3c565b90506000611074670de0b6b3a7640000611c79565b9050818111611084578082611087565b81815b61019b5491935091508161271061109e8583615d77565b6110a89190615d58565b6110b29190615d36565b106110cf5760405162461bcd60e51b8152600401610a1990615bc6565b60026101305414156110f35760405162461bcd60e51b8152600401610a1990615c4b565b6002610130556000611103612a22565b5090506000611110611d9d565b9050600061111d82612af2565b9050600080600061112e8487612b1f565b9250925092508261113e57600080fd5b600061114a8587615d77565b905082156111615761115c8582612c59565b61116b565b61116b8582612eac565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b61119d670de0b6b3a7640000613127565b83886040516111ae93929190615caf565b60405180910390a150506001610130555050505050505050565b6001600160a01b0381166000908152609960205260408120546108cd565b600091825260fe602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060603780546108e290615dd1565b600080600080600080611231613156565b945061123b613288565b935061124684613127565b92506000611252612a22565b509050611260816002615d58565b61019c546040516370a0823160e01b81529194506001600160a01b0316906370a0823190611292903090600401615af9565b60206040518083038186803b1580156112aa57600080fd5b505afa1580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190615a05565b915081846112f08589615d1e565b6112fa9190615d77565b6113049190615d1e565b965050909192939495565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156113915760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a19565b61139e338585840361195a565b5060019392505050565b610241546001600160a01b031690565b6000610972338484611a7e565b600080516020615e748339815191526113de813361229f565b61019d5461019c5460009161140991670de0b6b3a7640000916001600160a01b039081169116611c3c565b9050600061141e670de0b6b3a7640000611c79565b905081811161142e578082611431565b81815b61019b549193509150816127106114488583615d77565b6114529190615d58565b61145c9190615d36565b106114795760405162461bcd60e51b8152600401610a1990615bc6565b600261013054141561149d5760405162461bcd60e51b8152600401610a1990615c4b565b60026101305560006114ad611d9d565b905060006114ba60355490565b156114e35781866114ca60355490565b6114d49190615d58565b6114de9190615d36565b6114e5565b855b61019c546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061151b90339030908b90600401615b0d565b602060405180830381600087803b15801561153557600080fd5b505af1158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d9190615784565b506115778661330a565b611581338261336f565b60408051338152602081018890529081018290527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590606001610d10565b600080516020615e948339815191526115d8813361229f565b6115e0611e8c565b50565b6000670de0b6b3a76400006115f86101d65490565b61160061343c565b61160a9190615d58565b610e319190615d36565b834211156116645760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610a19565b6000609a548888886116758c6134ce565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006116d0826134f6565b905060006116e082878787613544565b9050896001600160a01b0316816001600160a01b0316146117435760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610a19565b61174e8a8a8a61195a565b50505050505050505050565b61176382610a3c565b61176d813361229f565b610d4383836125c7565b600054610100900460ff1680611790575060005460ff16155b6117ac5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156117ce576000805461ffff19166101011790555b6118256040518060400160405280601681526020017576555344434156415850616e676f6c696e42656e716960501b815250604051806040016040528060078152602001663b2aa9a221a82160c91b81525061356c565b61182d6135eb565b61183860003361366e565b61185482608001518360a001518460c001518560e00151613678565b61187282610120015183604001518460600151856101800151613736565b61188c826101200151836101400151846101600151613880565b6118a733836101a00151846101c00151856101e0015161392e565b6118b982600001518360200151613af7565b6118c1613bc0565b6118c9613bee565b8015610eb0576000805461ff00191690555050565b600080516020615e948339815191526118f7813361229f565b6001600160a01b03821661190a57600080fd5b7f4e02820ee8f94677fdcb7853cf216d6695139bacba43fb49a6eb7ec549e14477826040516119399190615af9565b60405180910390a15050565b600061194f611220565b509395945050505050565b6001600160a01b0383166119bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a19565b6001600160a01b038216611a1d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a19565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611ae25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a19565b6001600160a01b038216611b445760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a19565b6001600160a01b03831660009081526033602052604090205481811015611bbc5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a19565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611bf3908490615d1e565b92505081905550826001600160a01b0316846001600160a01b0316600080516020615eb483398151915284604051611c2d91815260200190565b60405180910390a35b50505050565b600083611c4b57506000610a35565b600080611c60611c596113a8565b8686613c0f565b91509150611c6f868383613cde565b9695505050505050565b6101d5546101d25460405163fc57d4df60e01b81526000926001600160a01b039081169263fc57d4df92611cb39290911690600401615af9565b60206040518083038186803b158015611ccb57600080fd5b505afa158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d039190615a05565b6101d5546101d35460405163fc57d4df60e01b81526001600160a01b039283169263fc57d4df92611d3992911690600401615af9565b60206040518083038186803b158015611d5157600080fd5b505afa158015611d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d899190615a05565b611d939084615d58565b6108cd9190615d36565b600080611da8613da8565b90506000611db4613e08565b90506000611dc182613127565b90506000611dcd612a22565b5061019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611e05903090600401615af9565b60206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190615a05565b90508083611e64846002615d58565b611e6e9088615d1e565b611e789190615d77565b611e829190615d1e565b9550505050505090565b611e966000613e3a565b50506000611ea2613e08565b61019d546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611ed9903090600401615af9565b60206040518083038186803b158015611ef157600080fd5b505afa158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190615a05565b905080821115611f6f576000611f3f8284615d77565b9050611f68611f4c6113a8565b61019c5461019d5484916001600160a01b039081169116610fba565b5050611faf565b81811115611faf576000611f838383615d77565b9050611fac611f906113a8565b61019d5461019c5484916001600160a01b039081169116610d48565b50505b61019d546040516370a0823160e01b8152612037916001600160a01b0316906370a0823190611fe2903090600401615af9565b60206040518083038186803b158015611ffa57600080fd5b505afa15801561200e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120329190615a05565b613e9c565b6000612041613da8565b9050610d4381613f12565b60008061205883612af2565b90506000612064612a22565b5090506000612071613288565b90506000806120886120838686615d77565b613e3a565b909250905080808410156120d5576120c56120a16113a8565b6120ab8685615d77565b61019d5461019c546001600160a01b039182169116610d48565b6120cf9084615d1e565b92508390505b6120de81613e9c565b60006120f26120ed858b615d77565b613f92565b90506120fe8185615d1e565b9998505050505050505050565b6001600160a01b03821661216b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a19565b6001600160a01b038216600090815260336020526040902054818110156121df5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a19565b6001600160a01b038316600090815260336020526040812083830390556035805484929061220e908490615d77565b90915550506040518281526000906001600160a01b03851690600080516020615eb48339815191529060200160405180910390a3505050565b611c36846323b872dd60e01b85858560405160240161226893929190615b0d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614036565b6122a982826111e6565b610eb0576122c1816001600160a01b03166014614108565b6122cc836020614108565b6040516020016122dd929190615a8a565b60408051601f198184030181529082905262461bcd60e51b8252610a1991600401615bb3565b61230d82826111e6565b610eb057600082815260fe602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123453390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008084116123e65760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b6064820152608401610a19565b6000806123f4878686613c0f565b90925090506000612407876103e5615d58565b905060006124158383615d58565b9050600082612426866103e8615d58565b6124309190615d1e565b905061243c8183615d36565b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031614156124af5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f4144445245535345530000006044820152606401610a19565b826001600160a01b0316846001600160a01b0316106124cf5782846124d2565b83835b90925090506001600160a01b0382166125265760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b6044820152606401610a19565b9250929050565b610d438363a9059cbb60e01b8484604051602401612268929190615b31565b6000610e317f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61257b60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6125d182826111e6565b15610eb057600082815260fe602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61019d5461019c54600091829161265b91670de0b6b3a7640000916001600160a01b039182169116611c3c565b90506000612670670de0b6b3a7640000611c79565b9050818111612680578082612683565b81815b61019b5491935091508161271061269a8583615d77565b6126a49190615d58565b6126ae9190615d36565b106126cb5760405162461bcd60e51b8152600401610a1990615bc6565b6126d761019e546142a3565b6126e19084615d1e565b92506126eb6144ca565b6126f59084615d1e565b61019c546040516370a0823160e01b81529194506000916001600160a01b03909116906370a082319061272c903090600401615af9565b60206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c9190615a05565b9050801561280c5761019c546040516370a0823160e01b815261280c916001600160a01b0316906370a08231906127b7903090600401615af9565b60206040518083038186803b1580156127cf57600080fd5b505afa1580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128079190615a05565b61330a565b50505090565b600080600061281f610f00565b9050610164548111156128ca576000610164548261283d9190615d77565b9050600061016454670de0b6b3a7640000836128599190615d58565b6128639190615d36565b9050670de0b6b3a7640000612710610166548361287f60355490565b6128899190615d58565b6128939190615d58565b61289d9190615d36565b6128a79190615d36565b610167549095506128c1906001600160a01b03168661336f565b50506101648190555b610165541561296457600061016854426128e49190615d77565b905060006128f561016d6018615d58565b61290090603c615d58565b61290b90603c615d58565b90508061271061291a60355490565b84610165546129299190615d58565b6129339190615d58565b61293d9190615d36565b6129479190615d36565b61016754909450612961906001600160a01b03168561336f565b50505b509091565b60008084116129c65760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b6064820152608401610a19565b6000806129d4878686613c0f565b909250905060006129e58784615d58565b6129f1906103e8615d58565b905060006129ff8884615d77565b612a0b906103e5615d58565b9050612a178183615d36565b6120fe906001615d1e565b6000806000612a2f6145da565b9050600080612a3c614678565b915091506000612a4a6113a8565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8257600080fd5b505afa158015612a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aba9190615a05565b905080612ac78585615d58565b612ad19190615d36565b955080612ade8584615d58565b612ae89190615d36565b9450505050509091565b600080612afd6115e3565b9050612b0b81612710615d1e565b612b158285615d58565b610a359190615d36565b6000806000838511612b32576000612b35565b60015b9150831580612b42575084155b15612b5257848414159250612c52565b6000612b5c613288565b905082612b8a5785612710612b718288615d77565b612b7b9190615d58565b612b859190615d36565b612bac565b84612710612b988289615d77565b612ba29190615d58565b612bac9190615d36565b61019f5490925061ffff16821180612c45575061019c546040516370a0823160e01b815262989680916001600160a01b0316906370a0823190612bf3903090600401615af9565b60206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190615a05565b115b80612c4e575080155b9350505b9250925092565b612c62816146a4565b50506000612c6f83614701565b90506000612c7b613288565b9050612c8f612c8a8284615d77565b614730565b6000612c99612a22565b5061019c546040516370a0823160e01b815291925060009183916001600160a01b0316906370a0823190612cd1903090600401615af9565b60206040518083038186803b158015612ce957600080fd5b505afa158015612cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d219190615a05565b612d2b9190615d1e565b612d359087615d77565b90508015612d6657612d64612d486113a8565b61019d5461019c5484916001600160a01b039081169116610fba565b505b61019d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612d98903090600401615af9565b60206040518083038186803b158015612db057600080fd5b505afa158015612dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de89190615a05565b90506000612df582613127565b61019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612e2c903090600401615af9565b60206040518083038186803b158015612e4457600080fd5b505afa158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c9190615a05565b905081811015612e9557809150612e9282614701565b92505b6000612ea183856147b9565b905061174e81614878565b81612eb957610eb0611e8c565b612ec282613e3a565b505061019d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612ef6903090600401615af9565b60206040518083038186803b158015612f0e57600080fd5b505afa158015612f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f469190615a05565b9050612f5181613e9c565b6000612f5c836146a4565b9150506000612f69613e08565b90506000612f7686614701565b612f809083615d77565b905080612f8f57505050505050565b6000612fb8612f9c6113a8565b61019c5461019d5485916001600160a01b039081169116612969565b61019c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612fef903090600401615af9565b60206040518083038186803b15801561300757600080fd5b505afa15801561301b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303f9190615a05565b905060008183106130505781613052565b825b905061307b61305f6113a8565b61019c5461019d5484916001600160a01b039081169116610d48565b5061019d546040516370a0823160e01b81526001600160a01b03909116906370a08231906130ad903090600401615af9565b60206040518083038186803b1580156130c557600080fd5b505afa1580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fd9190615a05565b965061310887613e9c565b8588111561311c57613119886146a4565b50505b505050505050505050565b60008161313657506000919050565b61019d5461019c546108cd9184916001600160a01b039182169116611c3c565b6101d2546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061318c903090600401615af9565b60206040518083038186803b1580156131a457600080fd5b505afa1580156131b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131dc9190615a05565b9050670de0b6b3a76400006101d260009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561323657600080fd5b505afa15801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e9190615a05565b6132789083615d58565b6132829190615d36565b91505090565b6101d3546040516395dd919360e01b81526000916001600160a01b0316906395dd9193906132ba903090600401615af9565b60206040518083038186803b1580156132d257600080fd5b505afa1580156132e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e319190615a05565b600061331582612af2565b61019c5461019d5491925060009161333b9184916001600160a01b039182169116611c3c565b905061334f61334a8385615d77565b6148d4565b61335881614730565b600061336483836147b9565b9050611c3681614878565b6001600160a01b0382166133c55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a19565b80603560008282546133d79190615d1e565b90915550506001600160a01b03821660009081526033602052604081208054839290613404908490615d1e565b90915550506040518181526001600160a01b03831690600090600080516020615eb48339815191529060200160405180910390a35050565b6101d4546101d254604051638e8f294b60e01b815260009283926001600160a01b0391821692638e8f294b92613476921690600401615af9565b60606040518083038186803b15801561348e57600080fd5b505afa1580156134a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c6919061579f565b509392505050565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b60006108cd61350361254c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061355587878787614953565b9150915061356281614a36565b5095945050505050565b600054610100900460ff1680613585575060005460ff16155b6135a15760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156135c3576000805461ffff19166101011790555b6135cb614bec565b6135d58383614c56565b8015610d43576000805461ff0019169055505050565b600054610100900460ff1680613604575060005460ff16155b6136205760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015613642576000805461ffff19166101011790555b61364a614bec565b613652614bec565b61365a614bec565b80156115e0576000805461ff001916905550565b610eb08282612303565b600054610100900460ff1680613691575060005460ff16155b6136ad5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156136cf576000805461ffff19166101011790555b61023e80546001600160a01b038087166001600160a01b03199283161790925561023f80548684169083161790556102408054858416908316179055610241805492881692909116919091179055801561372f576000805461ff00191690555b5050505050565b600054610100900460ff168061374f575060005460ff16155b61376b5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff1615801561378d576000805461ffff19166101011790555b6101d280546001600160a01b038087166001600160a01b0319928316179092556101d380548684169083161790556101d480549288169290911682179055604080516307dc0d1d60e41b81529051637dc0d1d091600480820192602092909190829003018186803b15801561380157600080fd5b505afa158015613815573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613839919061559e565b6101d580546001600160a01b0319166001600160a01b03929092169190911790556101d6829055613868614ceb565b801561372f576000805461ff00191690555050505050565b600054610100900460ff1680613899575060005460ff16155b6138b55760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff161580156138d7576000805461ffff19166101011790555b61020980546001600160a01b038087166001600160a01b03199283161790925561020b805486841690831617905561020a8054928516929091169190911790558015611c36576000805461ff001916905550505050565b600054610100900460ff1680613947575060005460ff16155b6139635760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015613985576000805461ffff19166101011790555b6101f484106139e95760405162461bcd60e51b815260206004820152602a60248201527f4261736553747261746567793a206f7065726174696f6e616c466565206578636044820152691959591cc81b1a5b5a5d60b21b6064820152608401610a19565b614e208310613a485760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a2070726f6669744665652065786365656473206044820152641b1a5b5a5d60da1b6064820152608401610a19565b613a50614dc2565b613a68600080516020615e948339815191528361366e565b613a80600080516020615e748339815191528361366e565b613a98600080516020615e748339815191523361366e565b61016780546001600160a01b0319166001600160a01b038716179055610165849055610166839055670de0b6b3a764000061016455426101685560001961016281905561016355801561372f576000805461ff00191690555050505050565b600054610100900460ff1680613b10575060005460ff16155b613b2c5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015613b4e576000805461ffff19166101011790555b61019c80546001600160a01b038086166001600160a01b0319928316811790935561019d805491861691909216179055613b8b9030600019614e33565b603c61019b5561019f805461ffff19166101901790556301312d0061019e558015610d43576000805461ff0019169055505050565b6101d254613bec906001600160a01b0316600019613bdc61097b565b6001600160a01b03169190614e33565b565b61023e5461024154613bec916001600160a01b039182169116600019614e33565b6000806000613c1e858561244a565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613c5d57600080fd5b505afa158015613c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9591906159b5565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613ccc578082613ccf565b81815b90999098509650505050505050565b6000808411613d2f5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e540000006044820152606401610a19565b600083118015613d3f5750600082115b613d8b5760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c49515549444954596044820152606401610a19565b82613d968386615d58565b613da09190615d36565b949350505050565b6101d254604051633af9e66960e01b81526000916001600160a01b031690633af9e66990613dda903090600401615af9565b602060405180830381600087803b158015613df457600080fd5b505af11580156132e6573d6000803e3d6000fd5b6101d3546040516305eff7ef60e21b81526000916001600160a01b0316906317bfdfbc90613dda903090600401615af9565b6000806000613e47612a22565b5090506000613e546145da565b9050600082613e638784615d58565b613e6d9190615d36565b90506000613e7b8284615d77565b9050613e8681614f46565b613e8f81614f78565b9550955050505050915091565b613ea58161506d565b6101d360009054906101000a90046001600160a01b03166001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613ef657600080fd5b505af1158015613f0a573d6000803e3d6000fd5b505050505050565b6101d25460405163852a12e360e01b8152600481018390526000916001600160a01b03169063852a12e390602401602060405180830381600087803b158015613f5a57600080fd5b505af1158015613f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d439190615a05565b600080613fa5613fa0613288565b611c79565b90506000613fb1613156565b90506000605f613fbf61343c565b613fd185670de0b6b3a7640000615d58565b613fdc906064615d58565b613fe69190615d36565b613ff09190615d36565b90508181111561400557506000949350505050565b60006140118284615d77565b90508581116140205780614022565b855b945061402d85613f12565b50505050919050565b600061408b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150a29092919063ffffffff16565b805190915015610d4357808060200190518101906140a99190615784565b610d435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a19565b60606000614117836002615d58565b614122906002615d1e565b6001600160401b0381111561413957614139615e48565b6040519080825280601f01601f191660200182016040528015614163576020820181803683370190505b509050600360fc1b8160008151811061417e5761417e615e32565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106141ad576141ad615e32565b60200101906001600160f81b031916908160001a90535060006141d1846002615d58565b6141dc906001615d1e565b90505b6001811115614254576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061421057614210615e32565b1a60f81b82828151811061422657614226615e32565b60200101906001600160f81b031916908160001a90535060049490941c9361424d81615dba565b90506141df565b508315610a355760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a19565b6000806142ae6150b1565b9050828110156142be5750919050565b61020954604051630952c56360e01b81526001600160a01b0390911690630952c563906142f2906000903090600401615b97565b600060405180830381600087803b15801561430c57600080fd5b505af1158015614320573d6000803e3d6000fd5b505061020a546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190614358903090600401615af9565b60206040518083038186803b15801561437057600080fd5b505afa158015614384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a89190615a05565b905080156143d55761020b5461020a546143d3916001600160a01b03908116918491166103e6610eb4565b505b61020954604051630952c56360e01b81526001600160a01b0390911690630952c56390614409906001903090600401615b97565b600060405180830381600087803b15801561442357600080fd5b505af1158015614437573d6000803e3d6000fd5b5047925050508061444a57505050919050565b614452610eb4565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561448c57600080fd5b505af11580156144a0573d6000803e3d6000fd5b50505050506144c16144b06113a8565b826144b9610eb4565b6103e661097b565b95945050505050565b61023e5460408051631e8c5c8960e11b815290516000926001600160a01b031691633d18b912916004808301928692919082900301818387803b15801561451057600080fd5b505af1158015614524573d6000803e3d6000fd5b5050610240546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319061455c903090600401615af9565b60206040518083038186803b15801561457457600080fd5b505afa158015614588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ac9190615a05565b9050806145b7575090565b61023f5461024054613282916001600160a01b03908116918491166103e661097b565b6000806145e5615234565b610241546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061461c903090600401615af9565b60206040518083038186803b15801561463457600080fd5b505afa158015614648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061466c9190615a05565b9050610f378183615d1e565b60008061469b6146866113a8565b61468e61097b565b614696610eb4565b613c0f565b90939092509050565b60008060006146b1613156565b9050838114156146c75750600093849350915050565b8381116146e7576146e06146db8286615d77565b615266565b60006146f6565b60006146f66120ed8684615d77565b909590945092505050565b60008161471057506000919050565b61019c5461019d546108cd9184916001600160a01b039182169116611c3c565b6101d35460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec90602401602060405180830381600087803b15801561477757600080fd5b505af115801561478b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147af9190615a05565b506115e08161530e565b60006147df6147c66113a8565b846147cf61097b565b6001600160a01b0316919061252d565b6147f36147ea6113a8565b836147cf610eb4565b6147fb6113a8565b6001600160a01b0316636a627842306040518263ffffffff1660e01b81526004016148269190615af9565b602060405180830381600087803b15801561484057600080fd5b505af1158015614854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190615a05565b61023e5460405163534a7e1d60e11b8152600481018390526001600160a01b039091169063a694fc3a906024015b600060405180830381600087803b1580156148c057600080fd5b505af115801561372f573d6000803e3d6000fd5b6101d25460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561491b57600080fd5b505af115801561492f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190615a05565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156149805750600090506003614a2d565b8460ff16601b1415801561499857508460ff16601c14155b156149a95750600090506004614a2d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156149fd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614a2657600060019250925050614a2d565b9150600090505b94509492505050565b6000816004811115614a4a57614a4a615e1c565b1415614a535750565b6001816004811115614a6757614a67615e1c565b1415614ab05760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610a19565b6002816004811115614ac457614ac4615e1c565b1415614b125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a19565b6003816004811115614b2657614b26615e1c565b1415614b7f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a19565b6004816004811115614b9357614b93615e1c565b14156115e05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a19565b600054610100900460ff1680614c05575060005460ff16155b614c215760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff1615801561365a576000805461ffff191661010117905580156115e0576000805461ff001916905550565b600054610100900460ff1680614c6f575060005460ff16155b614c8b5760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015614cad576000805461ffff19166101011790555b8251614cc09060369060208601906154b1565b508151614cd49060379060208501906154b1565b508015610d43576000805461ff0019169055505050565b6040805160018082528183019092526000916020808301908036833750506101d25482519293506001600160a01b031691839150600090614d2e57614d2e615e32565b6001600160a01b0392831660209182029290920101526101d454604051631853304760e31b815291169063c299823890614d6c908490600401615b4a565b600060405180830381600087803b158015614d8657600080fd5b505af1158015614d9a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eb091908101906156d8565b600054610100900460ff1680614ddb575060005460ff16155b614df75760405162461bcd60e51b8152600401610a1990615bfd565b600054610100900460ff16158015614e19576000805461ffff19166101011790555b60016101305580156115e0576000805461ff001916905550565b801580614ebc5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015614e8257600080fd5b505afa158015614e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eba9190615a05565b155b614f275760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610a19565b610d438363095ea7b360e01b8484604051602401612268929190615b31565b61023e54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d906024016148a6565b600080614f8f614f866113a8565b846147cf6113a8565b6000614fa9614f9c61097b565b614fa4610eb4565b61244a565b509050600080614fb76113a8565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401614fe29190615af9565b6040805180830381600087803b158015614ffb57600080fd5b505af115801561500f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150339190615a1e565b9150915061503f61097b565b6001600160a01b0316836001600160a01b03161461505e578082615061565b81815b94509450505050915091565b615075610eb4565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b81526004016148a691815260200190565b6060613da08484600085615350565b610209546040516305b9783d60e01b815260009182916001600160a01b03909116906305b9783d906150e99084903090600401615b97565b60206040518083038186803b15801561510157600080fd5b505afa158015615115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151399190615a05565b9050600081156151705761020b5461020a5461516b916001600160a01b0390811691859116615166610eb4565b612389565b615173565b60005b610209546040516305b9783d60e01b81529192506001600160a01b0316906305b9783d906151a8906001903090600401615b97565b60206040518083038186803b1580156151c057600080fd5b505afa1580156151d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151f89190615a05565b6152029082615d1e565b9050801561522b576152266152156113a8565b8261521e610eb4565b61516661097b565b610f37565b60009250505090565b61023e546040516370a0823160e01b81526000916001600160a01b0316906370a08231906132ba903090600401615af9565b60008061527161097b565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161529c9190615af9565b60206040518083038186803b1580156152b457600080fd5b505afa1580156152c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152ec9190615a05565b90508281116152fb57806152fd565b825b915081156134f0576134f0826148d4565b615316610eb4565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613ef657600080fd5b6060824710156153b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a19565b843b6153ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a19565b600080866001600160a01b0316858760405161541b9190615a6e565b60006040518083038185875af1925050503d8060008114615458576040519150601f19603f3d011682016040523d82523d6000602084013e61545d565b606091505b509150915061546d828286615478565b979650505050505050565b60608315615487575081610a35565b8251156154975782518084602001fd5b8160405162461bcd60e51b8152600401610a199190615bb3565b8280546154bd90615dd1565b90600052602060002090601f0160209004810192826154df5760008555615525565b82601f106154f857805160ff1916838001178555615525565b82800160010185558215615525579182015b8281111561552557825182559160200191906001019061550a565b50615531929150615535565b5090565b5b808211156155315760008155600101615536565b803561555581615e5e565b919050565b8051801515811461555557600080fd5b80516001600160701b038116811461555557600080fd5b60006020828403121561559357600080fd5b8135610a3581615e5e565b6000602082840312156155b057600080fd5b8151610a3581615e5e565b600080604083850312156155ce57600080fd5b82356155d981615e5e565b915060208301356155e981615e5e565b809150509250929050565b60008060006060848603121561560957600080fd5b833561561481615e5e565b9250602084013561562481615e5e565b929592945050506040919091013590565b600080600080600080600060e0888a03121561565057600080fd5b873561565b81615e5e565b9650602088013561566b81615e5e565b95506040880135945060608801359350608088013560ff8116811461568f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156156bf57600080fd5b82356156ca81615e5e565b946020939093013593505050565b600060208083850312156156eb57600080fd5b82516001600160401b038082111561570257600080fd5b818501915085601f83011261571657600080fd5b81518181111561572857615728615e48565b8060051b9150615739848301615cee565b8181528481019084860184860187018a101561575457600080fd5b600095505b83861015615777578051835260019590950194918601918601615759565b5098975050505050505050565b60006020828403121561579657600080fd5b610a358261555a565b6000806000606084860312156157b457600080fd5b6157bd8461555a565b9250602084015191506157d26040850161555a565b90509250925092565b6000602082840312156157ed57600080fd5b5035919050565b6000806040838503121561580757600080fd5b8235915060208301356155e981615e5e565b60006020828403121561582b57600080fd5b81356001600160e01b031981168114610a3557600080fd5b6000806000806080858703121561585957600080fd5b843561586481615e5e565b935060208501359250604085013561587b81615e5e565b9150606085013561588b81615e5e565b939692955090935050565b600061020082840312156158a957600080fd5b6158b1615cc5565b6158ba8361554a565b81526158c86020840161554a565b60208201526158d96040840161554a565b60408201526158ea6060840161554a565b60608201526158fb6080840161554a565b608082015261590c60a0840161554a565b60a082015261591d60c0840161554a565b60c082015261592e60e0840161554a565b60e082015261010061594181850161554a565b9082015261012061595384820161554a565b9082015261014061596584820161554a565b9082015261016061597784820161554a565b9082015261018083810135908201526101a080840135908201526101c080840135908201526101e06159aa81850161554a565b908201529392505050565b6000806000606084860312156159ca57600080fd5b6159d38461556a565b92506159e16020850161556a565b9150604084015163ffffffff811681146159fa57600080fd5b809150509250925092565b600060208284031215615a1757600080fd5b5051919050565b60008060408385031215615a3157600080fd5b505080516020909101519092909150565b60008151808452615a5a816020860160208601615d8e565b601f01601f19169290920160200192915050565b60008251615a80818460208701615d8e565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615abc816017850160208801615d8e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615aed816028840160208801615d8e565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015615b8b5783516001600160a01b031683529284019291840191600101615b66565b50909695505050505050565b60ff9290921682526001600160a01b0316602082015260400190565b602081526000610a356020830184615a42565b6020808252601e908201527f4865646765644c503a2053484f52545f50524943455f4d49534d415443480000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b84815283602082015260018060a01b0383166040820152608060608201526000611c6f6080830184615a42565b9283526020830191909152604082015260600190565b60405161020081016001600160401b0381118282101715615ce857615ce8615e48565b60405290565b604051601f8201601f191681016001600160401b0381118282101715615d1657615d16615e48565b604052919050565b60008219821115615d3157615d31615e06565b500190565b600082615d5357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615615d7257615d72615e06565b500290565b600082821015615d8957615d89615e06565b500390565b60005b83811015615da9578181015183820152602001615d91565b83811115611c365750506000910152565b600081615dc957615dc9615e06565b506000190190565b600181811c90821680615de557607f821691505b602082108114156134f057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115e057600080fdfedc72ed553f2544c34465af23b847953efeb813428162d767f9ba5f4013be6760241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220903cf1c298678ab3ef616d2e848525a5f593a5e76cce18c9144d0d9aff4ba2c664736f6c63430008060033",
  "libraries": {
    "UniUtils": "0x3d51b3C4Ce8B820bEb54e5bCd94AAb06A40A2B8d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "estimatedTotalAssets()": {
        "details": "Care must be taken in using this function, since it relies on external  systems, which could be manipulated by the attacker to give an inflated  (or reduced) value produced by this function, wantd on current on-chain  conditions (e.g. this function is possible to influence through  flashloan attacks, oracle manipulations, or other DeFi attack  mechanisms).",
        "returns": {
          "assets": "The estimated total assets in this Strategy."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "harvest()": {
        "details": "When `harvest()` is called, the Strategy reports to the Vault (via  `vault.report()`), so in some cases `harvest()` must be called in order  to take in profits, to borrow newly available funds from the Vault, or  otherwise adjust its position. In other cases `harvest()` must be  called to report to the Vault on the Strategy's position, especially if  any losses have occurred."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setRewards(address)": {
        "params": {
          "rewardsAddr_": "The address to use for pulling rewards."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimatedTotalAssets()": {
        "notice": "Provide an accurate estimate for the total amount of assets  (principle + return) that this Strategy is currently managing,  denominated in terms of `want` tokens.  This total should be \"realizable\" e.g. the total value that could  *actually* be obtained from this Strategy if it were to divest its  entire position wantd on current on-chain conditions."
      },
      "getPricePerShare()": {
        "notice": "Returns the share price of the strategy in `want` units, multiplied  by 1e18"
      },
      "harvest()": {
        "notice": "Harvests the Strategy  This may only be called by MANAGER_ROLE."
      },
      "setRewards(address)": {
        "notice": "Used to change `rewards`. EOA or smart contract which has the permission  to pull rewards from the vault.  This may only be called by the manager."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1463,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 530,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 536,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 538,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 540,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 542,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1083,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2117,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 2119,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "102",
        "type": "t_bytes32"
      },
      {
        "astId": 2256,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1213,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_nonces",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_struct(Counter)1470_storage)"
      },
      {
        "astId": 1215,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_PERMIT_TYPEHASH",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 1383,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2302,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_roles",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 467,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_status",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 510,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11549,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "accountDepositLimit",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      },
      {
        "astId": 11551,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "vaultTvlLimit",
        "offset": 0,
        "slot": "355",
        "type": "t_uint256"
      },
      {
        "astId": 11553,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "sharePriceTracker",
        "offset": 0,
        "slot": "356",
        "type": "t_uint256"
      },
      {
        "astId": 11555,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "operationalFee",
        "offset": 0,
        "slot": "357",
        "type": "t_uint256"
      },
      {
        "astId": 11557,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "profitFee",
        "offset": 0,
        "slot": "358",
        "type": "t_uint256"
      },
      {
        "astId": 11559,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "rewardsAddr",
        "offset": 0,
        "slot": "359",
        "type": "t_address"
      },
      {
        "astId": 11561,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "lastHarvest",
        "offset": 0,
        "slot": "360",
        "type": "t_uint256"
      },
      {
        "astId": 11886,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_gap",
        "offset": 0,
        "slot": "361",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11918,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_maxPriceMismatch",
        "offset": 0,
        "slot": "411",
        "type": "t_uint256"
      },
      {
        "astId": 11975,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_want",
        "offset": 0,
        "slot": "412",
        "type": "t_contract(IERC20)2857"
      },
      {
        "astId": 11978,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_short",
        "offset": 0,
        "slot": "413",
        "type": "t_contract(IERC20)2857"
      },
      {
        "astId": 11980,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_minLendHarvest",
        "offset": 0,
        "slot": "414",
        "type": "t_uint256"
      },
      {
        "astId": 11982,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "rebalanceThreshold",
        "offset": 0,
        "slot": "415",
        "type": "t_uint16"
      },
      {
        "astId": 13143,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_gap",
        "offset": 0,
        "slot": "416",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15601,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_cTokenLend",
        "offset": 0,
        "slot": "466",
        "type": "t_contract(ICTokenErc20)13583"
      },
      {
        "astId": 15604,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_cTokenBorrow",
        "offset": 0,
        "slot": "467",
        "type": "t_contract(ICTokenErc20)13583"
      },
      {
        "astId": 15607,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_comptroller",
        "offset": 0,
        "slot": "468",
        "type": "t_contract(IComptroller)13815"
      },
      {
        "astId": 15610,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_oracle",
        "offset": 0,
        "slot": "469",
        "type": "t_contract(ICompPriceOracle)13606"
      },
      {
        "astId": 15612,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_safeCollateralRatio",
        "offset": 0,
        "slot": "470",
        "type": "t_uint256"
      },
      {
        "astId": 15972,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_gap",
        "offset": 0,
        "slot": "471",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15347,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_comptroller",
        "offset": 0,
        "slot": "521",
        "type": "t_contract(IBenqiComptroller)13971"
      },
      {
        "astId": 15350,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_qi",
        "offset": 0,
        "slot": "522",
        "type": "t_contract(IERC20)2857"
      },
      {
        "astId": 15353,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_qiAvaxPair",
        "offset": 0,
        "slot": "523",
        "type": "t_contract(IUniswapV2Pair)14299"
      },
      {
        "astId": 15581,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_gap",
        "offset": 0,
        "slot": "524",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15997,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_farm",
        "offset": 0,
        "slot": "574",
        "type": "t_contract(IStakingRewards)14033"
      },
      {
        "astId": 16000,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_farmLp",
        "offset": 0,
        "slot": "575",
        "type": "t_contract(IUniswapV2Pair)14299"
      },
      {
        "astId": 16003,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_farmToken",
        "offset": 0,
        "slot": "576",
        "type": "t_contract(IERC20)2857"
      },
      {
        "astId": 16006,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_pair",
        "offset": 0,
        "slot": "577",
        "type": "t_contract(IUniswapV2Pair)14299"
      },
      {
        "astId": 16191,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_gap",
        "offset": 0,
        "slot": "578",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16213,
        "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
        "label": "_gap",
        "offset": 0,
        "slot": "628",
        "type": "t_array(t_uint256)200_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)200_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[200]",
        "numberOfBytes": "6400"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBenqiComptroller)13971": {
        "encoding": "inplace",
        "label": "contract IBenqiComptroller",
        "numberOfBytes": "20"
      },
      "t_contract(ICTokenErc20)13583": {
        "encoding": "inplace",
        "label": "contract ICTokenErc20",
        "numberOfBytes": "20"
      },
      "t_contract(ICompPriceOracle)13606": {
        "encoding": "inplace",
        "label": "contract ICompPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IComptroller)13815": {
        "encoding": "inplace",
        "label": "contract IComptroller",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2857": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingRewards)14033": {
        "encoding": "inplace",
        "label": "contract IStakingRewards",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)14299": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)1470_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1470_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1470_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1469,
            "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "src/vUSDCavaxPB.sol:vUSDCavaxPB",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}