{
  "address": "0xADEeD68898ee71113fF9eB780198C8ACD2Fa1785",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract Authority",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Authority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract Vault",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "VaultDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "deployVault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getVaultFromUnderlying",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Vault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "isVaultDeployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Authority",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26b12852e1f68d81a69cc8f7c152387f42abd6085252a530f537d4bfd84efbc6",
  "receipt": {
    "to": null,
    "from": "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "contractAddress": "0xADEeD68898ee71113fF9eB780198C8ACD2Fa1785",
    "transactionIndex": 9,
    "gasUsed": "4406583",
    "logsBloom": "0x
    "blockHash": "0x9801743a8c673148f7bb3171c6a0954911c468c06ca6b5e8b7b46b90447c44a8",
    "transactionHash": "0x26b12852e1f68d81a69cc8f7c152387f42abd6085252a530f537d4bfd84efbc6",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 8371175,
        "transactionHash": "0x26b12852e1f68d81a69cc8f7c152387f42abd6085252a530f537d4bfd84efbc6",
        "address": "0xADEeD68898ee71113fF9eB780198C8ACD2Fa1785",
        "topics": [
          "0x4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x9801743a8c673148f7bb3171c6a0954911c468c06ca6b5e8b7b46b90447c44a8"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 8371175,
        "transactionHash": "0x26b12852e1f68d81a69cc8f7c152387f42abd6085252a530f537d4bfd84efbc6",
        "address": "0xADEeD68898ee71113fF9eB780198C8ACD2Fa1785",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000e669f5f83616639d3442b03108233e0054afbef8"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x9801743a8c673148f7bb3171c6a0954911c468c06ca6b5e8b7b46b90447c44a8"
      }
    ],
    "blockNumber": 8371175,
    "cumulativeGasUsed": "5924206",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "0xE669f5f83616639D3442b03108233E0054afbef8"
  ],
  "solcInputHash": "9dd7be47a0ead41cf23f6aa7653a5c36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract Authority\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Authority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Vault\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"VaultDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deployVault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVaultFromUnderlying\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Vault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isVaultDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Transmissions11 and JetJadeja\",\"events\":{\"VaultDeployed(address,address)\":{\"params\":{\"underlying\":\"The underlying token the new Vault accepts.\",\"vault\":\"The newly deployed Vault contract.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_authority\":\"The Authority of the factory.\",\"_owner\":\"The owner of the factory.\"}},\"deployVault(address,uint256)\":{\"details\":\"This will revert if a Vault that accepts the same underlying token has already been deployed.\",\"params\":{\"id\":\"We may have different vaults w different credit ratings for the same asset\",\"underlying\":\"The ERC20 token that the Vault should accept.\"},\"returns\":{\"vault\":\"The newly deployed Vault contract which accepts the provided underlying token.\"}},\"getVaultFromUnderlying(address,uint256)\":{\"details\":\"The Vault returned may not be deployed yet. Use isVaultDeployed to check.\",\"params\":{\"id\":\"We may have different vaults w different credit ratings for the same asset\",\"underlying\":\"The ERC20 token that the Vault should accept.\"},\"returns\":{\"_0\":\"The address of a Vault which accepts the provided underlying token.\"}},\"isVaultDeployed(address)\":{\"details\":\"This function is useful to check the return values of getVaultFromUnderlying, as it does not check that the Vault addresses it computes have been deployed yet.\",\"params\":{\"vault\":\"The address of a Vault which may not have been deployed yet.\"},\"returns\":{\"_0\":\"A boolean indicating whether the Vault has been deployed already.\"}}},\"title\":\"Rari Vault Factory\",\"version\":1},\"userdoc\":{\"events\":{\"VaultDeployed(address,address)\":{\"notice\":\"Emitted when a new Vault is deployed.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates a Vault factory.\"},\"deployVault(address,uint256)\":{\"notice\":\"Deploys a new Vault which supports a specific underlying token.\"},\"getVaultFromUnderlying(address,uint256)\":{\"notice\":\"Computes a Vault's address from its accepted underlying token.\"},\"isVaultDeployed(address)\":{\"notice\":\"Returns if a Vault at an address has already been deployed.\"}},\"notice\":\"Factory which enables deploying a Vault for any ERC20 token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vault/VaultFactory.sol\":\"VaultFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.0;\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed owner);\\n\\n    event AuthorityUpdated(Authority indexed authority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnerUpdated(_owner);\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(owner);\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual requiresAuth {\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(authority);\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority cachedAuthority = authority;\\n\\n        if (address(cachedAuthority) != address(0)) {\\n            try cachedAuthority.canCall(user, address(this), functionSig) returns (bool canCall) {\\n                if (canCall) return true;\\n            } catch {}\\n        }\\n\\n        return user == owner;\\n    }\\n\\n    modifier requiresAuth() {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0b7f3c8e86c2b09d3498733bda5247da69956c971224f4e2a2a4e15d75eed707\",\"license\":\"AGPL-3.0\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0\"},\"solmate/src/tokens/WETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\n\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\n\\n/// @notice Minimalist and modern Wrapped Ether implementation.\\n/// @author Inspired by WETH9 (https://github.com/dapphub/ds-weth/blob/master/src/weth9.sol)\\ncontract WETH is ERC20(\\\"Wrapped Ether\\\", \\\"WETH\\\", 18) {\\n    using SafeTransferLib for address;\\n\\n    event Deposit(address indexed from, uint256 amount);\\n\\n    event Withdrawal(address indexed to, uint256 amount);\\n\\n    function deposit() public payable {\\n        _mint(msg.sender, msg.value);\\n\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n\\n        msg.sender.safeTransferETH(amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n    }\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n}\\n\",\"keccak256\":\"0x2d4eb620bad85b3bf6d5e8e4f4c53eb672c62ca4c9e053d3879d26a9d9996989\",\"license\":\"AGPL-3.0\"},\"solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Original work by Transmissions11 (https://github.com/transmissions11)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0x5eb32bbee24cd9ac132b005d0c5f3c2ef982ff4458f2bfaabc79e1207cf1c1e4\",\"license\":\"AGPL-3.0\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Modified from Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/math.sol)\\n/// and ABDK (https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol)\\nlibrary FixedPointMathLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            COMMON BASE UNITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant YAD = 1e8;\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant RAD = 1e45;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(x == 0 || (x * y) / x == y)\\n            if iszero(or(iszero(x), eq(div(z, x), y))) {\\n                revert(0, 0)\\n            }\\n\\n            // If baseUnit is zero this will return zero instead of reverting.\\n            z := div(z, baseUnit)\\n        }\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * baseUnit in z for now.\\n            z := mul(x, baseUnit)\\n\\n            if or(\\n                // Revert if y is zero to ensure we don't divide by zero below.\\n                iszero(y),\\n                // Equivalent to require(x == 0 || (x * baseUnit) / x == baseUnit)\\n                iszero(or(iszero(x), eq(div(z, x), baseUnit)))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // We ensure y is not zero above, so there is never division by zero here.\\n            z := div(z, y)\\n        }\\n    }\\n\\n    function fpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := baseUnit\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := baseUnit\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(baseUnit, 2)\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, baseUnit)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, baseUnit)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) return 0;\\n\\n        result = 1;\\n\\n        uint256 xAux = x;\\n\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n\\n        if (xAux >= 0x8) result <<= 1;\\n\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n\\n            uint256 roundedDownResult = x / result;\\n\\n            if (result > roundedDownResult) result = roundedDownResult;\\n        }\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x < y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x > y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x11bae04ee197bfb3b5dbb4a95eae81f500314b76be91ad692b10f00782fc9bf6\",\"license\":\"AGPL-3.0\"},\"solmate/src/utils/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.0;\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\\n        require(x <= type(uint248).max);\\n\\n        y = uint248(x);\\n    }\\n\\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\\n        require(x <= type(uint128).max);\\n\\n        y = uint128(x);\\n    }\\n\\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n\\n        y = uint96(x);\\n    }\\n\\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n\\n        y = uint64(x);\\n    }\\n\\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n\\n        y = uint32(x);\\n    }\\n}\\n\",\"keccak256\":\"0x58d6e9ae42c781636b8a953a009d95da627b8d1def3905245d1ccc7ffd954a1e\",\"license\":\"AGPL-3.0\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0\"},\"src/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport { Auth } from \\\"solmate/src/auth/Auth.sol\\\";\\nimport { WETH } from \\\"solmate/src/tokens/WETH.sol\\\";\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeCastLib } from \\\"solmate/src/utils/SafeCastLib.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { FixedPointMathLib } from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\nimport { Strategy, ERC20Strategy, ETHStrategy } from \\\"./interfaces/Strategy.sol\\\";\\n\\n/// @title Rari Vault (rvToken)\\n/// @author Transmissions11 and JetJadeja\\n/// @notice Flexible, minimalist, and gas-optimized yield\\n/// aggregator for earning interest on any ERC20 token.\\ncontract Vault is ERC20, Auth {\\n\\tusing SafeCastLib for uint256;\\n\\tusing SafeTransferLib for ERC20;\\n\\tusing FixedPointMathLib for uint256;\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                                IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice The underlying token the Vault accepts.\\n\\tERC20 public immutable UNDERLYING;\\n\\n\\t/// @notice The base unit of the underlying token and hence rvToken.\\n\\t/// @dev Equal to 10 ** decimals. Used for fixed point arithmetic.\\n\\tuint256 public immutable BASE_UNIT;\\n\\n\\t/// @notice Creates a new Vault that accepts a specific underlying token.\\n\\t/// @param _UNDERLYING The ERC20 compliant token the Vault should accept.\\n\\tconstructor(ERC20 _UNDERLYING)\\n\\t\\tERC20(\\n\\t\\t\\t// ex: Parasite Dai Stablecoin Vault\\n\\t\\t\\tstring(abi.encodePacked(\\\"Parasite \\\", _UNDERLYING.name(), \\\" Vault\\\")),\\n\\t\\t\\t// ex: pDAI\\n\\t\\t\\tstring(abi.encodePacked(\\\"p\\\", _UNDERLYING.symbol())),\\n\\t\\t\\t// ex: 18\\n\\t\\t\\t_UNDERLYING.decimals()\\n\\t\\t)\\n\\t\\tAuth(Auth(msg.sender).owner(), Auth(msg.sender).authority())\\n\\t{\\n\\t\\tUNDERLYING = _UNDERLYING;\\n\\n\\t\\tBASE_UNIT = 10**decimals;\\n\\n\\t\\t// Prevent minting of rvTokens until\\n\\t\\t// the initialize function is called.\\n\\t\\ttotalSupply = type(uint256).max;\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                           FEE CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice The percentage of profit recognized each harvest to reserve as fees.\\n\\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n\\tuint256 public feePercent;\\n\\n\\t/// @notice Emitted when the fee percentage is updated.\\n\\t/// @param user The authorized user who triggered the update.\\n\\t/// @param newFeePercent The new fee percentage.\\n\\tevent FeePercentUpdated(address indexed user, uint256 newFeePercent);\\n\\n\\t/// @notice Sets a new fee percentage.\\n\\t/// @param newFeePercent The new fee percentage.\\n\\tfunction setFeePercent(uint256 newFeePercent) external requiresAuth {\\n\\t\\t// A fee percentage over 100% doesn't make sense.\\n\\t\\trequire(newFeePercent <= 1e18, \\\"FEE_TOO_HIGH\\\");\\n\\n\\t\\t// Update the fee percentage.\\n\\t\\tfeePercent = newFeePercent;\\n\\n\\t\\temit FeePercentUpdated(msg.sender, newFeePercent);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                        HARVEST CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted when the harvest window is updated.\\n\\t/// @param user The authorized user who triggered the update.\\n\\t/// @param newHarvestWindow The new harvest window.\\n\\tevent HarvestWindowUpdated(address indexed user, uint128 newHarvestWindow);\\n\\n\\t/// @notice Emitted when the harvest delay is updated.\\n\\t/// @param user The authorized user who triggered the update.\\n\\t/// @param newHarvestDelay The new harvest delay.\\n\\tevent HarvestDelayUpdated(address indexed user, uint64 newHarvestDelay);\\n\\n\\t/// @notice Emitted when the harvest delay is scheduled to be updated next harvest.\\n\\t/// @param user The authorized user who triggered the update.\\n\\t/// @param newHarvestDelay The scheduled updated harvest delay.\\n\\tevent HarvestDelayUpdateScheduled(address indexed user, uint64 newHarvestDelay);\\n\\n\\t/// @notice The period in seconds during which multiple harvests can occur\\n\\t/// regardless if they are taking place before the harvest delay has elapsed.\\n\\t/// @dev Long harvest windows open the Vault up to profit distribution slowdown attacks.\\n\\tuint128 public harvestWindow;\\n\\n\\t/// @notice The period in seconds over which locked profit is unlocked.\\n\\t/// @dev Cannot be 0 as it opens harvests up to sandwich attacks.\\n\\tuint64 public harvestDelay;\\n\\n\\t/// @notice The value that will replace harvestDelay next harvest.\\n\\t/// @dev In the case that the next delay is 0, no update will be applied.\\n\\tuint64 public nextHarvestDelay;\\n\\n\\t/// @notice Sets a new harvest window.\\n\\t/// @param newHarvestWindow The new harvest window.\\n\\t/// @dev The Vault's harvestDelay must already be set before calling.\\n\\tfunction setHarvestWindow(uint128 newHarvestWindow) external requiresAuth {\\n\\t\\t// A harvest window longer than the harvest delay doesn't make sense.\\n\\t\\trequire(newHarvestWindow <= harvestDelay, \\\"WINDOW_TOO_LONG\\\");\\n\\n\\t\\t// Update the harvest window.\\n\\t\\tharvestWindow = newHarvestWindow;\\n\\n\\t\\temit HarvestWindowUpdated(msg.sender, newHarvestWindow);\\n\\t}\\n\\n\\t/// @notice Sets a new harvest delay.\\n\\t/// @param newHarvestDelay The new harvest delay to set.\\n\\t/// @dev If the current harvest delay is 0, meaning it has not\\n\\t/// been set before, it will be updated immediately, otherwise\\n\\t/// it will be scheduled to take effect after the next harvest.\\n\\tfunction setHarvestDelay(uint64 newHarvestDelay) external requiresAuth {\\n\\t\\t// A harvest delay of 0 makes harvests vulnerable to sandwich attacks.\\n\\t\\trequire(newHarvestDelay != 0, \\\"DELAY_CANNOT_BE_ZERO\\\");\\n\\n\\t\\t// A harvest delay longer than 1 year doesn't make sense.\\n\\t\\trequire(newHarvestDelay <= 365 days, \\\"DELAY_TOO_LONG\\\");\\n\\n\\t\\t// If the harvest delay is 0, meaning it has not been set before:\\n\\t\\tif (harvestDelay == 0) {\\n\\t\\t\\t// We'll apply the update immediately.\\n\\t\\t\\tharvestDelay = newHarvestDelay;\\n\\n\\t\\t\\temit HarvestDelayUpdated(msg.sender, newHarvestDelay);\\n\\t\\t} else {\\n\\t\\t\\t// We'll apply the update next harvest.\\n\\t\\t\\tnextHarvestDelay = newHarvestDelay;\\n\\n\\t\\t\\temit HarvestDelayUpdateScheduled(msg.sender, newHarvestDelay);\\n\\t\\t}\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                       TARGET FLOAT CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice The desired percentage of the Vault's holdings to keep as float.\\n\\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n\\tuint256 public targetFloatPercent;\\n\\n\\t/// @notice Emitted when the target float percentage is updated.\\n\\t/// @param user The authorized user who triggered the update.\\n\\t/// @param newTargetFloatPercent The new target float percentage.\\n\\tevent TargetFloatPercentUpdated(address indexed user, uint256 newTargetFloatPercent);\\n\\n\\t/// @notice Set a new target float percentage.\\n\\t/// @param newTargetFloatPercent The new target float percentage.\\n\\tfunction setTargetFloatPercent(uint256 newTargetFloatPercent) external requiresAuth {\\n\\t\\t// A target float percentage over 100% doesn't make sense.\\n\\t\\trequire(targetFloatPercent <= 1e18, \\\"TARGET_TOO_HIGH\\\");\\n\\n\\t\\t// Update the target float percentage.\\n\\t\\ttargetFloatPercent = newTargetFloatPercent;\\n\\n\\t\\temit TargetFloatPercentUpdated(msg.sender, newTargetFloatPercent);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                   UNDERLYING IS WETH CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Whether the Vault should treat the underlying token as WETH compatible.\\n\\t/// @dev If enabled the Vault will allow trusting strategies that accept Ether.\\n\\tbool public underlyingIsWETH;\\n\\n\\t/// @notice Emitted when whether the Vault should treat the underlying as WETH is updated.\\n\\t/// @param user The authorized user who triggered the update.\\n\\t/// @param newUnderlyingIsWETH Whether the Vault nows treats the underlying as WETH.\\n\\tevent UnderlyingIsWETHUpdated(address indexed user, bool newUnderlyingIsWETH);\\n\\n\\t/// @notice Sets whether the Vault treats the underlying as WETH.\\n\\t/// @param newUnderlyingIsWETH Whether the Vault should treat the underlying as WETH.\\n\\t/// @dev The underlying token must have 18 decimals, to match Ether's decimal scheme.\\n\\tfunction setUnderlyingIsWETH(bool newUnderlyingIsWETH) external requiresAuth {\\n\\t\\t// Ensure the underlying token's decimals match ETH.\\n\\t\\trequire(UNDERLYING.decimals() == 18, \\\"WRONG_DECIMALS\\\");\\n\\n\\t\\t// Update whether the Vault treats the underlying as WETH.\\n\\t\\tunderlyingIsWETH = newUnderlyingIsWETH;\\n\\n\\t\\temit UnderlyingIsWETHUpdated(msg.sender, newUnderlyingIsWETH);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                          STRATEGY STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice The total amount of underlying tokens held in strategies at the time of the last harvest.\\n\\t/// @dev Includes maxLockedProfit, must be correctly subtracted to compute available/free holdings.\\n\\tuint256 public totalStrategyHoldings;\\n\\n\\t/// @dev Packed struct of strategy data.\\n\\t/// @param trusted Whether the strategy is trusted.\\n\\t/// @param balance The amount of underlying tokens held in the strategy.\\n\\tstruct StrategyData {\\n\\t\\t// Used to determine if the Vault will operate on a strategy.\\n\\t\\tbool trusted;\\n\\t\\t// Used to determine profit and loss during harvests of the strategy.\\n\\t\\tuint248 balance;\\n\\t}\\n\\n\\t/// @notice Maps strategies to data the Vault holds on them.\\n\\tmapping(Strategy => StrategyData) public getStrategyData;\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                             HARVEST STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice A timestamp representing when the first harvest in the most recent harvest window occurred.\\n\\t/// @dev May be equal to lastHarvest if there was/has only been one harvest in the most last/current window.\\n\\tuint64 public lastHarvestWindowStart;\\n\\n\\t/// @notice A timestamp representing when the most recent harvest occurred.\\n\\tuint64 public lastHarvest;\\n\\n\\t/// @notice The amount of locked profit at the end of the last harvest.\\n\\tuint128 public maxLockedProfit;\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                        WITHDRAWAL QUEUE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice An ordered array of strategies representing the withdrawal queue.\\n\\t/// @dev The queue is processed in descending order, meaning the last index will be withdrawn from first.\\n\\t/// @dev Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at\\n\\t/// withdrawal time, not validated upfront, meaning the queue may not reflect the \\\"true\\\" set used for withdrawals.\\n\\tStrategy[] public withdrawalQueue;\\n\\n\\t/// @notice Gets the full withdrawal queue.\\n\\t/// @return An ordered array of strategies representing the withdrawal queue.\\n\\t/// @dev This is provided because Solidity converts public arrays into index getters,\\n\\t/// but we need a way to allow external contracts and users to access the whole array.\\n\\tfunction getWithdrawalQueue() external view returns (Strategy[] memory) {\\n\\t\\treturn withdrawalQueue;\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted after a successful deposit.\\n\\t/// @param user The address that deposited into the Vault.\\n\\t/// @param underlyingAmount The amount of underlying tokens that were deposited.\\n\\tevent Deposit(address indexed user, uint256 underlyingAmount);\\n\\n\\t/// @notice Emitted after a successful withdrawal.\\n\\t/// @param user The address that withdrew from the Vault.\\n\\t/// @param underlyingAmount The amount of underlying tokens that were withdrawn.\\n\\tevent Withdraw(address indexed user, uint256 underlyingAmount);\\n\\n\\t/// @notice Deposit a specific amount of underlying tokens.\\n\\t/// @param underlyingAmount The amount of the underlying token to deposit.\\n\\tfunction deposit(uint256 underlyingAmount) external {\\n\\t\\t// We don't allow depositing 0 to prevent emitting a useless event.\\n\\t\\trequire(underlyingAmount != 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n\\n\\t\\t// Determine the equivalent amount of rvTokens and mint them.\\n\\t\\t_mint(msg.sender, underlyingAmount.fdiv(exchangeRate(), BASE_UNIT));\\n\\n\\t\\temit Deposit(msg.sender, underlyingAmount);\\n\\n\\t\\t// Transfer in underlying tokens from the user.\\n\\t\\t// This will revert if the user does not have the amount specified.\\n\\t\\tUNDERLYING.safeTransferFrom(msg.sender, address(this), underlyingAmount);\\n\\t}\\n\\n\\t/// @notice Withdraw a specific amount of underlying tokens.\\n\\t/// @param underlyingAmount The amount of underlying tokens to withdraw.\\n\\tfunction withdraw(uint256 underlyingAmount) external {\\n\\t\\t// We don't allow withdrawing 0 to prevent emitting a useless event.\\n\\t\\trequire(underlyingAmount != 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n\\n\\t\\t// Determine the equivalent amount of rvTokens and burn them.\\n\\t\\t// This will revert if the user does not have enough rvTokens.\\n\\t\\t_burn(msg.sender, underlyingAmount.fdiv(exchangeRate(), BASE_UNIT));\\n\\n\\t\\temit Withdraw(msg.sender, underlyingAmount);\\n\\n\\t\\t// Withdraw from strategies if needed and transfer.\\n\\t\\ttransferUnderlyingTo(msg.sender, underlyingAmount);\\n\\t}\\n\\n\\t/// @notice Redeem a specific amount of rvTokens for underlying tokens.\\n\\t/// @param rvTokenAmount The amount of rvTokens to redeem for underlying tokens.\\n\\tfunction redeem(uint256 rvTokenAmount) external {\\n\\t\\t// We don't allow redeeming 0 to prevent emitting a useless event.\\n\\t\\trequire(rvTokenAmount != 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n\\n\\t\\t// Determine the equivalent amount of underlying tokens.\\n\\t\\tuint256 underlyingAmount = rvTokenAmount.fmul(exchangeRate(), BASE_UNIT);\\n\\n\\t\\t// Burn the provided amount of rvTokens.\\n\\t\\t// This will revert if the user does not have enough rvTokens.\\n\\t\\t_burn(msg.sender, rvTokenAmount);\\n\\n\\t\\temit Withdraw(msg.sender, underlyingAmount);\\n\\t\\t// Withdraw from strategies if needed and transfer.\\n\\t\\ttransferUnderlyingTo(msg.sender, underlyingAmount);\\n\\t}\\n\\n\\t/// @dev Transfers a specific amount of underlying tokens held in strategies and/or float to a recipient.\\n\\t/// @dev Only withdraws from strategies if needed and maintains the target float percentage if possible.\\n\\t/// @param recipient The user to transfer the underlying tokens to.\\n\\t/// @param underlyingAmount The amount of underlying tokens to transfer.\\n\\tfunction transferUnderlyingTo(address recipient, uint256 underlyingAmount) internal {\\n\\t\\t// Get the Vault's floating balance.\\n\\t\\tuint256 float = totalFloat();\\n\\n\\t\\t// If the amount is greater than the float, withdraw from strategies.\\n\\t\\tif (underlyingAmount > float) {\\n\\t\\t\\t// Compute the amount needed to reach our target float percentage.\\n\\t\\t\\tuint256 floatMissingForTarget = (totalHoldings() - underlyingAmount).fmul(\\n\\t\\t\\t\\ttargetFloatPercent,\\n\\t\\t\\t\\t1e18\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Compute the bare minimum amount we need for this withdrawal.\\n\\t\\t\\tuint256 floatMissingForWithdrawal = underlyingAmount - float;\\n\\n\\t\\t\\t// Pull enough to cover the withdrawal and reach our target float percentage.\\n\\t\\t\\tpullFromWithdrawalQueue(floatMissingForWithdrawal + floatMissingForTarget);\\n\\t\\t}\\n\\n\\t\\t// Transfer the provided amount of underlying tokens.\\n\\t\\tUNDERLYING.safeTransfer(recipient, underlyingAmount);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                        VAULT ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Returns a user's Vault balance in underlying tokens.\\n\\t/// @param user The user to get the underlying balance of.\\n\\t/// @return The user's Vault balance in underlying tokens.\\n\\tfunction balanceOfUnderlying(address user) external view returns (uint256) {\\n\\t\\treturn balanceOf[user].fmul(exchangeRate(), BASE_UNIT);\\n\\t}\\n\\n\\t/// @notice Returns the amount of underlying tokens an rvToken can be redeemed for.\\n\\t/// @return The amount of underlying tokens an rvToken can be redeemed for.\\n\\tfunction exchangeRate() public view returns (uint256) {\\n\\t\\t// Get the total supply of rvTokens.\\n\\t\\tuint256 rvTokenSupply = totalSupply;\\n\\n\\t\\t// If there are no rvTokens in circulation, return an exchange rate of 1:1.\\n\\t\\tif (rvTokenSupply == 0) return BASE_UNIT;\\n\\n\\t\\t// Calculate the exchange rate by dividing the total holdings by the rvToken supply.\\n\\t\\treturn totalHoldings().fdiv(rvTokenSupply, BASE_UNIT);\\n\\t}\\n\\n\\t/// @notice Calculates the total amount of underlying tokens the Vault holds.\\n\\t/// @return totalUnderlyingHeld The total amount of underlying tokens the Vault holds.\\n\\tfunction totalHoldings() public view returns (uint256 totalUnderlyingHeld) {\\n\\t\\tunchecked {\\n\\t\\t\\t// Cannot underflow as locked profit can't exceed total strategy holdings.\\n\\t\\t\\ttotalUnderlyingHeld = totalStrategyHoldings - lockedProfit();\\n\\t\\t}\\n\\n\\t\\t// Include our floating balance in the total.\\n\\t\\ttotalUnderlyingHeld += totalFloat();\\n\\t}\\n\\n\\t/// @notice Calculates the current amount of locked profit.\\n\\t/// @return The current amount of locked profit.\\n\\tfunction lockedProfit() public view returns (uint256) {\\n\\t\\t// Get the last harvest and harvest delay.\\n\\t\\tuint256 previousHarvest = lastHarvest;\\n\\t\\tuint256 harvestInterval = harvestDelay;\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// If the harvest delay has passed, there is no locked profit.\\n\\t\\t\\t// Cannot overflow on human timescales since harvestInterval is capped.\\n\\t\\t\\tif (block.timestamp >= previousHarvest + harvestInterval) return 0;\\n\\n\\t\\t\\t// Get the maximum amount we could return.\\n\\t\\t\\tuint256 maximumLockedProfit = maxLockedProfit;\\n\\n\\t\\t\\t// Compute how much profit remains locked based on the last harvest and harvest delay.\\n\\t\\t\\t// It's impossible for the previous harvest to be in the future, so this will never underflow.\\n\\t\\t\\treturn\\n\\t\\t\\t\\tmaximumLockedProfit -\\n\\t\\t\\t\\t(maximumLockedProfit * (block.timestamp - previousHarvest)) /\\n\\t\\t\\t\\tharvestInterval;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Returns the amount of underlying tokens that idly sit in the Vault.\\n\\t/// @return The amount of underlying tokens that sit idly in the Vault.\\n\\tfunction totalFloat() public view returns (uint256) {\\n\\t\\treturn UNDERLYING.balanceOf(address(this));\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                             HARVEST LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted after a successful harvest.\\n\\t/// @param user The authorized user who triggered the harvest.\\n\\t/// @param strategies The trusted strategies that were harvested.\\n\\tevent Harvest(address indexed user, Strategy[] strategies);\\n\\n\\t/// @notice Harvest a set of trusted strategies.\\n\\t/// @param strategies The trusted strategies to harvest.\\n\\t/// @dev Will always revert if called outside of an active\\n\\t/// harvest window or before the harvest delay has passed.\\n\\tfunction harvest(Strategy[] calldata strategies) external requiresAuth {\\n\\t\\t// If this is the first harvest after the last window:\\n\\t\\tif (block.timestamp >= lastHarvest + harvestDelay) {\\n\\t\\t\\t// Set the harvest window's start timestamp.\\n\\t\\t\\t// Cannot overflow 64 bits on human timescales.\\n\\t\\t\\tlastHarvestWindowStart = uint64(block.timestamp);\\n\\t\\t} else {\\n\\t\\t\\t// We know this harvest is not the first in the window so we need to ensure it's within it.\\n\\t\\t\\trequire(block.timestamp <= lastHarvestWindowStart + harvestWindow, \\\"BAD_HARVEST_TIME\\\");\\n\\t\\t}\\n\\n\\t\\t// Get the Vault's current total strategy holdings.\\n\\t\\tuint256 oldTotalStrategyHoldings = totalStrategyHoldings;\\n\\n\\t\\t// Used to store the total profit accrued by the strategies.\\n\\t\\tuint256 totalProfitAccrued;\\n\\n\\t\\t// Used to store the new total strategy holdings after harvesting.\\n\\t\\tuint256 newTotalStrategyHoldings = oldTotalStrategyHoldings;\\n\\n\\t\\t// Will revert if any of the specified strategies are untrusted.\\n\\t\\tfor (uint256 i = 0; i < strategies.length; i++) {\\n\\t\\t\\t// Get the strategy at the current index.\\n\\t\\t\\tStrategy strategy = strategies[i];\\n\\n\\t\\t\\t// If an untrusted strategy could be harvested a malicious user could use\\n\\t\\t\\t// a fake strategy that over-reports holdings to manipulate the exchange rate.\\n\\t\\t\\trequire(getStrategyData[strategy].trusted, \\\"UNTRUSTED_STRATEGY\\\");\\n\\n\\t\\t\\t// Get the strategy's previous and current balance.\\n\\t\\t\\tuint256 balanceLastHarvest = getStrategyData[strategy].balance;\\n\\t\\t\\tuint256 balanceThisHarvest = strategy.balanceOfUnderlying(address(this));\\n\\n\\t\\t\\t// Update the strategy's stored balance. Cast overflow is unrealistic.\\n\\t\\t\\tgetStrategyData[strategy].balance = balanceThisHarvest.safeCastTo248();\\n\\n\\t\\t\\t// Increase/decrease newTotalStrategyHoldings based on the profit/loss registered.\\n\\t\\t\\t// We cannot wrap the subtraction in parenthesis as it would underflow if the strategy had a loss.\\n\\t\\t\\tnewTotalStrategyHoldings =\\n\\t\\t\\t\\tnewTotalStrategyHoldings +\\n\\t\\t\\t\\tbalanceThisHarvest -\\n\\t\\t\\t\\tbalanceLastHarvest;\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t// Update the total profit accrued while counting losses as zero profit.\\n\\t\\t\\t\\t// Cannot overflow as we already increased total holdings without reverting.\\n\\t\\t\\t\\ttotalProfitAccrued += balanceThisHarvest > balanceLastHarvest\\n\\t\\t\\t\\t\\t? balanceThisHarvest - balanceLastHarvest // Profits since last harvest.\\n\\t\\t\\t\\t\\t: 0; // If the strategy registered a net loss we don't have any new profit.\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Compute fees as the fee percent multiplied by the profit.\\n\\t\\tuint256 feesAccrued = totalProfitAccrued.fmul(feePercent, 1e18);\\n\\n\\t\\t// If we accrued any fees, mint an equivalent amount of rvTokens.\\n\\t\\t// Authorized users can claim the newly minted rvTokens via claimFees.\\n\\t\\t_mint(address(this), feesAccrued.fdiv(exchangeRate(), BASE_UNIT));\\n\\n\\t\\t// Update max unlocked profit based on any remaining locked profit plus new profit.\\n\\t\\tmaxLockedProfit = (lockedProfit() + totalProfitAccrued - feesAccrued).safeCastTo128();\\n\\n\\t\\t// Set strategy holdings to our new total.\\n\\t\\ttotalStrategyHoldings = newTotalStrategyHoldings;\\n\\n\\t\\t// Update the last harvest timestamp.\\n\\t\\t// Cannot overflow on human timescales.\\n\\t\\tlastHarvest = uint64(block.timestamp);\\n\\n\\t\\temit Harvest(msg.sender, strategies);\\n\\n\\t\\t// Get the next harvest delay.\\n\\t\\tuint64 newHarvestDelay = nextHarvestDelay;\\n\\n\\t\\t// If the next harvest delay is not 0:\\n\\t\\tif (newHarvestDelay != 0) {\\n\\t\\t\\t// Update the harvest delay.\\n\\t\\t\\tharvestDelay = newHarvestDelay;\\n\\n\\t\\t\\t// Reset the next harvest delay.\\n\\t\\t\\tnextHarvestDelay = 0;\\n\\n\\t\\t\\temit HarvestDelayUpdated(msg.sender, newHarvestDelay);\\n\\t\\t}\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                    STRATEGY DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted after the Vault deposits into a strategy contract.\\n\\t/// @param user The authorized user who triggered the deposit.\\n\\t/// @param strategy The strategy that was deposited into.\\n\\t/// @param underlyingAmount The amount of underlying tokens that were deposited.\\n\\tevent StrategyDeposit(\\n\\t\\taddress indexed user,\\n\\t\\tStrategy indexed strategy,\\n\\t\\tuint256 underlyingAmount\\n\\t);\\n\\n\\t/// @notice Emitted after the Vault withdraws funds from a strategy contract.\\n\\t/// @param user The authorized user who triggered the withdrawal.\\n\\t/// @param strategy The strategy that was withdrawn from.\\n\\t/// @param underlyingAmount The amount of underlying tokens that were withdrawn.\\n\\tevent StrategyWithdrawal(\\n\\t\\taddress indexed user,\\n\\t\\tStrategy indexed strategy,\\n\\t\\tuint256 underlyingAmount\\n\\t);\\n\\n\\t/// @notice Deposit a specific amount of float into a trusted strategy.\\n\\t/// @param strategy The trusted strategy to deposit into.\\n\\t/// @param underlyingAmount The amount of underlying tokens in float to deposit.\\n\\tfunction depositIntoStrategy(Strategy strategy, uint256 underlyingAmount)\\n\\t\\texternal\\n\\t\\trequiresAuth\\n\\t{\\n\\t\\t// A strategy must be trusted before it can be deposited into.\\n\\t\\trequire(getStrategyData[strategy].trusted, \\\"UNTRUSTED_STRATEGY\\\");\\n\\n\\t\\t// We don't allow depositing 0 to prevent emitting a useless event.\\n\\t\\trequire(underlyingAmount != 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n\\n\\t\\t// Increase totalStrategyHoldings to account for the deposit.\\n\\t\\ttotalStrategyHoldings += underlyingAmount;\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// Without this the next harvest would count the deposit as profit.\\n\\t\\t\\t// Cannot overflow as the balance of one strategy can't exceed the sum of all.\\n\\t\\t\\tgetStrategyData[strategy].balance += underlyingAmount.safeCastTo248();\\n\\t\\t}\\n\\n\\t\\temit StrategyDeposit(msg.sender, strategy, underlyingAmount);\\n\\n\\t\\t// We need to deposit differently if the strategy takes ETH.\\n\\t\\tif (strategy.isCEther()) {\\n\\t\\t\\t// Unwrap the right amount of WETH.\\n\\t\\t\\tWETH(payable(address(UNDERLYING))).withdraw(underlyingAmount);\\n\\n\\t\\t\\t// Deposit into the strategy and assume it will revert on error.\\n\\t\\t\\tETHStrategy(address(strategy)).mint{ value: underlyingAmount }();\\n\\t\\t} else {\\n\\t\\t\\t// Approve underlyingAmount to the strategy so we can deposit.\\n\\t\\t\\tUNDERLYING.safeApprove(address(strategy), underlyingAmount);\\n\\n\\t\\t\\t// Deposit into the strategy and revert if it returns an error code.\\n\\t\\t\\trequire(ERC20Strategy(address(strategy)).mint(underlyingAmount) == 0, \\\"MINT_FAILED\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Withdraw a specific amount of underlying tokens from a strategy.\\n\\t/// @param strategy The strategy to withdraw from.\\n\\t/// @param underlyingAmount  The amount of underlying tokens to withdraw.\\n\\t/// @dev Withdrawing from a strategy will not remove it from the withdrawal queue.\\n\\tfunction withdrawFromStrategy(Strategy strategy, uint256 underlyingAmount)\\n\\t\\texternal\\n\\t\\trequiresAuth\\n\\t{\\n\\t\\t// A strategy must be trusted before it can be withdrawn from.\\n\\t\\trequire(getStrategyData[strategy].trusted, \\\"UNTRUSTED_STRATEGY\\\");\\n\\n\\t\\t// We don't allow withdrawing 0 to prevent emitting a useless event.\\n\\t\\trequire(underlyingAmount != 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n\\n\\t\\t// Without this the next harvest would count the withdrawal as a loss.\\n\\t\\tgetStrategyData[strategy].balance -= underlyingAmount.safeCastTo248();\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// Decrease totalStrategyHoldings to account for the withdrawal.\\n\\t\\t\\t// Cannot underflow as the balance of one strategy will never exceed the sum of all.\\n\\t\\t\\ttotalStrategyHoldings -= underlyingAmount;\\n\\t\\t}\\n\\n\\t\\temit StrategyWithdrawal(msg.sender, strategy, underlyingAmount);\\n\\n\\t\\t// Withdraw from the strategy and revert if it returns an error code.\\n\\t\\trequire(strategy.redeemUnderlying(underlyingAmount) == 0, \\\"REDEEM_FAILED\\\");\\n\\n\\t\\t// Wrap the withdrawn Ether into WETH if necessary.\\n\\t\\tif (strategy.isCEther())\\n\\t\\t\\tWETH(payable(address(UNDERLYING))).deposit{ value: underlyingAmount }();\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                      STRATEGY TRUST/DISTRUST LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted when a strategy is set to trusted.\\n\\t/// @param user The authorized user who trusted the strategy.\\n\\t/// @param strategy The strategy that became trusted.\\n\\tevent StrategyTrusted(address indexed user, Strategy indexed strategy);\\n\\n\\t/// @notice Emitted when a strategy is set to untrusted.\\n\\t/// @param user The authorized user who untrusted the strategy.\\n\\t/// @param strategy The strategy that became untrusted.\\n\\tevent StrategyDistrusted(address indexed user, Strategy indexed strategy);\\n\\n\\t/// @notice Stores a strategy as trusted, enabling it to be harvested.\\n\\t/// @param strategy The strategy to make trusted.\\n\\tfunction trustStrategy(Strategy strategy) external requiresAuth {\\n\\t\\t// Ensure the strategy accepts the correct underlying token.\\n\\t\\t// If the strategy accepts ETH the Vault should accept WETH, it'll handle wrapping when necessary.\\n\\t\\trequire(\\n\\t\\t\\tstrategy.isCEther()\\n\\t\\t\\t\\t? underlyingIsWETH\\n\\t\\t\\t\\t: ERC20Strategy(address(strategy)).underlying() == UNDERLYING,\\n\\t\\t\\t\\\"WRONG_UNDERLYING\\\"\\n\\t\\t);\\n\\n\\t\\t// Store the strategy as trusted.\\n\\t\\tgetStrategyData[strategy].trusted = true;\\n\\n\\t\\temit StrategyTrusted(msg.sender, strategy);\\n\\t}\\n\\n\\t/// @notice Stores a strategy as untrusted, disabling it from being harvested.\\n\\t/// @param strategy The strategy to make untrusted.\\n\\tfunction distrustStrategy(Strategy strategy) external requiresAuth {\\n\\t\\t// Store the strategy as untrusted.\\n\\t\\tgetStrategyData[strategy].trusted = false;\\n\\n\\t\\temit StrategyDistrusted(msg.sender, strategy);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                         WITHDRAWAL QUEUE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted when a strategy is pushed to the withdrawal queue.\\n\\t/// @param user The authorized user who triggered the push.\\n\\t/// @param pushedStrategy The strategy pushed to the withdrawal queue.\\n\\tevent WithdrawalQueuePushed(address indexed user, Strategy indexed pushedStrategy);\\n\\n\\t/// @notice Emitted when a strategy is popped from the withdrawal queue.\\n\\t/// @param user The authorized user who triggered the pop.\\n\\t/// @param poppedStrategy The strategy popped from the withdrawal queue.\\n\\tevent WithdrawalQueuePopped(address indexed user, Strategy indexed poppedStrategy);\\n\\n\\t/// @notice Emitted when the withdrawal queue is updated.\\n\\t/// @param user The authorized user who triggered the set.\\n\\t/// @param replacedWithdrawalQueue The new withdrawal queue.\\n\\tevent WithdrawalQueueSet(address indexed user, Strategy[] replacedWithdrawalQueue);\\n\\n\\t/// @notice Emitted when an index in the withdrawal queue is replaced.\\n\\t/// @param user The authorized user who triggered the replacement.\\n\\t/// @param index The index of the replaced strategy in the withdrawal queue.\\n\\t/// @param replacedStrategy The strategy in the withdrawal queue that was replaced.\\n\\t/// @param replacementStrategy The strategy that overrode the replaced strategy at the index.\\n\\tevent WithdrawalQueueIndexReplaced(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 index,\\n\\t\\tStrategy indexed replacedStrategy,\\n\\t\\tStrategy indexed replacementStrategy\\n\\t);\\n\\n\\t/// @notice Emitted when an index in the withdrawal queue is replaced with the tip.\\n\\t/// @param user The authorized user who triggered the replacement.\\n\\t/// @param index The index of the replaced strategy in the withdrawal queue.\\n\\t/// @param replacedStrategy The strategy in the withdrawal queue replaced by the tip.\\n\\t/// @param previousTipStrategy The previous tip of the queue that replaced the strategy.\\n\\tevent WithdrawalQueueIndexReplacedWithTip(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 index,\\n\\t\\tStrategy indexed replacedStrategy,\\n\\t\\tStrategy indexed previousTipStrategy\\n\\t);\\n\\n\\t/// @notice Emitted when the strategies at two indexes are swapped.\\n\\t/// @param user The authorized user who triggered the swap.\\n\\t/// @param index1 One index involved in the swap\\n\\t/// @param index2 The other index involved in the swap.\\n\\t/// @param newStrategy1 The strategy (previously at index2) that replaced index1.\\n\\t/// @param newStrategy2 The strategy (previously at index1) that replaced index2.\\n\\tevent WithdrawalQueueIndexesSwapped(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 index1,\\n\\t\\tuint256 index2,\\n\\t\\tStrategy indexed newStrategy1,\\n\\t\\tStrategy indexed newStrategy2\\n\\t);\\n\\n\\t/// @dev Withdraw a specific amount of underlying tokens from strategies in the withdrawal queue.\\n\\t/// @param underlyingAmount The amount of underlying tokens to pull into float.\\n\\t/// @dev Automatically removes depleted strategies from the withdrawal queue.\\n\\tfunction pullFromWithdrawalQueue(uint256 underlyingAmount) internal {\\n\\t\\t// We will update this variable as we pull from strategies.\\n\\t\\tuint256 amountLeftToPull = underlyingAmount;\\n\\n\\t\\t// We'll start at the tip of the queue and traverse backwards.\\n\\t\\tuint256 currentIndex = withdrawalQueue.length - 1;\\n\\n\\t\\t// Iterate in reverse so we pull from the queue in a \\\"last in, first out\\\" manner.\\n\\t\\t// Will revert due to underflow if we empty the queue before pulling the desired amount.\\n\\t\\tfor (; ; currentIndex--) {\\n\\t\\t\\t// Get the strategy at the current queue index.\\n\\t\\t\\tStrategy strategy = withdrawalQueue[currentIndex];\\n\\n\\t\\t\\t// Get the balance of the strategy before we withdraw from it.\\n\\t\\t\\tuint256 strategyBalance = getStrategyData[strategy].balance;\\n\\n\\t\\t\\t// If the strategy is currently untrusted or was already depleted:\\n\\t\\t\\tif (!getStrategyData[strategy].trusted || strategyBalance == 0) {\\n\\t\\t\\t\\t// Remove it from the queue.\\n\\t\\t\\t\\twithdrawalQueue.pop();\\n\\n\\t\\t\\t\\temit WithdrawalQueuePopped(msg.sender, strategy);\\n\\n\\t\\t\\t\\t// Move onto the next strategy.\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// We want to pull as much as we can from the strategy, but no more than we need.\\n\\t\\t\\tuint256 amountToPull = FixedPointMathLib.min(amountLeftToPull, strategyBalance);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t// Compute the balance of the strategy that will remain after we withdraw.\\n\\t\\t\\t\\t// Cannot underflow as we cap the amount to pull at the strategy's balance.\\n\\t\\t\\t\\tuint256 strategyBalanceAfterWithdrawal = strategyBalance - amountToPull;\\n\\n\\t\\t\\t\\t// Without this the next harvest would count the withdrawal as a loss.\\n\\t\\t\\t\\tgetStrategyData[strategy].balance = strategyBalanceAfterWithdrawal.safeCastTo248();\\n\\n\\t\\t\\t\\t// Adjust our goal based on how much we can pull from the strategy.\\n\\t\\t\\t\\t// Cannot underflow as we cap the amount to pull at the amount left to pull.\\n\\t\\t\\t\\tamountLeftToPull -= amountToPull;\\n\\n\\t\\t\\t\\temit StrategyWithdrawal(msg.sender, strategy, amountToPull);\\n\\n\\t\\t\\t\\t// Withdraw from the strategy and revert if returns an error code.\\n\\t\\t\\t\\trequire(strategy.redeemUnderlying(amountToPull) == 0, \\\"REDEEM_FAILED\\\");\\n\\n\\t\\t\\t\\t// If we fully depleted the strategy:\\n\\t\\t\\t\\tif (strategyBalanceAfterWithdrawal == 0) {\\n\\t\\t\\t\\t\\t// Remove it from the queue.\\n\\t\\t\\t\\t\\twithdrawalQueue.pop();\\n\\n\\t\\t\\t\\t\\temit WithdrawalQueuePopped(msg.sender, strategy);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we've pulled all we need, exit the loop.\\n\\t\\t\\tif (amountLeftToPull == 0) break;\\n\\t\\t}\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// Account for the withdrawals done in the loop above.\\n\\t\\t\\t// Cannot underflow as the balances of some strategies cannot exceed the sum of all.\\n\\t\\t\\ttotalStrategyHoldings -= underlyingAmount;\\n\\t\\t}\\n\\n\\t\\t// Cache the Vault's balance of ETH.\\n\\t\\tuint256 ethBalance = address(this).balance;\\n\\n\\t\\t// If the Vault's underlying token is WETH compatible and we have some ETH, wrap it into WETH.\\n\\t\\tif (ethBalance != 0 && underlyingIsWETH)\\n\\t\\t\\tWETH(payable(address(UNDERLYING))).deposit{ value: ethBalance }();\\n\\t}\\n\\n\\t/// @notice Pushes a single strategy to front of the withdrawal queue.\\n\\t/// @param strategy The strategy to be inserted at the front of the withdrawal queue.\\n\\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\\n\\t/// filtered out when encountered at withdrawal time, not validated upfront.\\n\\tfunction pushToWithdrawalQueue(Strategy strategy) external requiresAuth {\\n\\t\\t// Push the strategy to the front of the queue.\\n\\t\\twithdrawalQueue.push(strategy);\\n\\n\\t\\temit WithdrawalQueuePushed(msg.sender, strategy);\\n\\t}\\n\\n\\t/// @notice Removes the strategy at the tip of the withdrawal queue.\\n\\t/// @dev Be careful, another authorized user could push a different strategy\\n\\t/// than expected to the queue while a popFromWithdrawalQueue transaction is pending.\\n\\tfunction popFromWithdrawalQueue() external requiresAuth {\\n\\t\\t// Get the (soon to be) popped strategy.\\n\\t\\tStrategy poppedStrategy = withdrawalQueue[withdrawalQueue.length - 1];\\n\\n\\t\\t// Pop the first strategy in the queue.\\n\\t\\twithdrawalQueue.pop();\\n\\n\\t\\temit WithdrawalQueuePopped(msg.sender, poppedStrategy);\\n\\t}\\n\\n\\t/// @notice Sets a new withdrawal queue.\\n\\t/// @param newQueue The new withdrawal queue.\\n\\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\\n\\t/// filtered out when encountered at withdrawal time, not validated upfront.\\n\\tfunction setWithdrawalQueue(Strategy[] calldata newQueue) external requiresAuth {\\n\\t\\t// Replace the withdrawal queue.\\n\\t\\twithdrawalQueue = newQueue;\\n\\n\\t\\temit WithdrawalQueueSet(msg.sender, newQueue);\\n\\t}\\n\\n\\t/// @notice Replaces an index in the withdrawal queue with another strategy.\\n\\t/// @param index The index in the queue to replace.\\n\\t/// @param replacementStrategy The strategy to override the index with.\\n\\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\\n\\t/// filtered out when encountered at withdrawal time, not validated upfront.\\n\\tfunction replaceWithdrawalQueueIndex(uint256 index, Strategy replacementStrategy)\\n\\t\\texternal\\n\\t\\trequiresAuth\\n\\t{\\n\\t\\t// Get the (soon to be) replaced strategy.\\n\\t\\tStrategy replacedStrategy = withdrawalQueue[index];\\n\\n\\t\\t// Update the index with the replacement strategy.\\n\\t\\twithdrawalQueue[index] = replacementStrategy;\\n\\n\\t\\temit WithdrawalQueueIndexReplaced(msg.sender, index, replacedStrategy, replacementStrategy);\\n\\t}\\n\\n\\t/// @notice Moves the strategy at the tip of the queue to the specified index and pop the tip off the queue.\\n\\t/// @param index The index of the strategy in the withdrawal queue to replace with the tip.\\n\\tfunction replaceWithdrawalQueueIndexWithTip(uint256 index) external requiresAuth {\\n\\t\\t// Get the (soon to be) previous tip and strategy we will replace at the index.\\n\\t\\tStrategy previousTipStrategy = withdrawalQueue[withdrawalQueue.length - 1];\\n\\t\\tStrategy replacedStrategy = withdrawalQueue[index];\\n\\n\\t\\t// Replace the index specified with the tip of the queue.\\n\\t\\twithdrawalQueue[index] = previousTipStrategy;\\n\\n\\t\\t// Remove the now duplicated tip from the array.\\n\\t\\twithdrawalQueue.pop();\\n\\n\\t\\temit WithdrawalQueueIndexReplacedWithTip(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tindex,\\n\\t\\t\\treplacedStrategy,\\n\\t\\t\\tpreviousTipStrategy\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Swaps two indexes in the withdrawal queue.\\n\\t/// @param index1 One index involved in the swap\\n\\t/// @param index2 The other index involved in the swap.\\n\\tfunction swapWithdrawalQueueIndexes(uint256 index1, uint256 index2) external requiresAuth {\\n\\t\\t// Get the (soon to be) new strategies at each index.\\n\\t\\tStrategy newStrategy2 = withdrawalQueue[index1];\\n\\t\\tStrategy newStrategy1 = withdrawalQueue[index2];\\n\\n\\t\\t// Swap the strategies at both indexes.\\n\\t\\twithdrawalQueue[index1] = newStrategy1;\\n\\t\\twithdrawalQueue[index2] = newStrategy2;\\n\\n\\t\\temit WithdrawalQueueIndexesSwapped(msg.sender, index1, index2, newStrategy1, newStrategy2);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                         SEIZE STRATEGY LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted after a strategy is seized.\\n\\t/// @param user The authorized user who triggered the seize.\\n\\t/// @param strategy The strategy that was seized.\\n\\tevent StrategySeized(address indexed user, Strategy indexed strategy);\\n\\n\\t/// @notice Seizes a strategy.\\n\\t/// @param strategy The strategy to seize.\\n\\t/// @dev Intended for use in emergencies or other extraneous situations where the\\n\\t/// strategy requires interaction outside of the Vault's standard operating procedures.\\n\\tfunction seizeStrategy(Strategy strategy) external requiresAuth {\\n\\t\\t// A strategy must be trusted before it can be seized.\\n\\t\\trequire(getStrategyData[strategy].trusted, \\\"UNTRUSTED_STRATEGY\\\");\\n\\n\\t\\t// Get the strategy's last reported balance of underlying tokens.\\n\\t\\tuint256 strategyBalance = getStrategyData[strategy].balance;\\n\\n\\t\\t// If the strategy's balance exceeds the Vault's current\\n\\t\\t// holdings, instantly unlock any remaining locked profit.\\n\\t\\tif (strategyBalance > totalHoldings()) maxLockedProfit = 0;\\n\\n\\t\\t// Set the strategy's balance to 0.\\n\\t\\tgetStrategyData[strategy].balance = 0;\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// Decrease totalStrategyHoldings to account for the seize.\\n\\t\\t\\t// Cannot underflow as the balance of one strategy will never exceed the sum of all.\\n\\t\\t\\ttotalStrategyHoldings -= strategyBalance;\\n\\t\\t}\\n\\n\\t\\temit StrategySeized(msg.sender, strategy);\\n\\n\\t\\t// Transfer all of the strategy's tokens to the caller.\\n\\t\\tERC20(strategy).safeTransfer(msg.sender, strategy.balanceOf(address(this)));\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                             FEE CLAIM LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted after fees are claimed.\\n\\t/// @param user The authorized user who claimed the fees.\\n\\t/// @param rvTokenAmount The amount of rvTokens that were claimed.\\n\\tevent FeesClaimed(address indexed user, uint256 rvTokenAmount);\\n\\n\\t/// @notice Claims fees accrued from harvests.\\n\\t/// @param rvTokenAmount The amount of rvTokens to claim.\\n\\t/// @dev Accrued fees are measured as rvTokens held by the Vault.\\n\\tfunction claimFees(uint256 rvTokenAmount) external requiresAuth {\\n\\t\\temit FeesClaimed(msg.sender, rvTokenAmount);\\n\\n\\t\\t// Transfer the provided amount of rvTokens to the caller.\\n\\t\\tERC20(this).safeTransfer(msg.sender, rvTokenAmount);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                    INITIALIZATION AND DESTRUCTION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted when the Vault is initialized.\\n\\t/// @param user The authorized user who triggered the initialization.\\n\\tevent Initialized(address indexed user);\\n\\n\\t/// @notice Whether the Vault has been initialized yet.\\n\\t/// @dev Can go from false to true, never from true to false.\\n\\tbool public isInitialized;\\n\\n\\t/// @notice Initializes the Vault, enabling it to receive deposits.\\n\\t/// @dev All critical parameters must already be set before calling.\\n\\tfunction initialize() external requiresAuth {\\n\\t\\t// Ensure the Vault has not already been initialized.\\n\\t\\trequire(!isInitialized, \\\"ALREADY_INITIALIZED\\\");\\n\\n\\t\\t// Mark the Vault as initialized.\\n\\t\\tisInitialized = true;\\n\\n\\t\\t// Open for deposits.\\n\\t\\ttotalSupply = 0;\\n\\n\\t\\temit Initialized(msg.sender);\\n\\t}\\n\\n\\t/// @notice Self destructs a Vault, enabling it to be redeployed.\\n\\t/// @dev Caller will receive any ETH held as float in the Vault.\\n\\tfunction destroy() external requiresAuth {\\n\\t\\tselfdestruct(payable(msg.sender));\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                          RECIEVE ETHER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @dev Required for the Vault to receive unwrapped ETH.\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x9edb7b5020282788b8ca68d7523c3b3b0d49bf68b584517d01992feec52a72ef\",\"license\":\"AGPL-3.0\"},\"src/vault/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { Auth, Authority } from \\\"solmate/src/auth/Auth.sol\\\";\\nimport { Bytes32AddressLib } from \\\"solmate/src/utils/Bytes32AddressLib.sol\\\";\\n\\nimport { Vault } from \\\"./Vault.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Rari Vault Factory\\n/// @author Transmissions11 and JetJadeja\\n/// @notice Factory which enables deploying a Vault for any ERC20 token.\\ncontract VaultFactory is Auth {\\n\\tusing Bytes32AddressLib for address;\\n\\tusing Bytes32AddressLib for bytes32;\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Creates a Vault factory.\\n\\t/// @param _owner The owner of the factory.\\n\\t/// @param _authority The Authority of the factory.\\n\\tconstructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                          VAULT DEPLOYMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Emitted when a new Vault is deployed.\\n\\t/// @param vault The newly deployed Vault contract.\\n\\t/// @param underlying The underlying token the new Vault accepts.\\n\\tevent VaultDeployed(Vault vault, ERC20 underlying);\\n\\n\\t/// @notice Deploys a new Vault which supports a specific underlying token.\\n\\t/// @dev This will revert if a Vault that accepts the same underlying token has already been deployed.\\n\\t/// @param underlying The ERC20 token that the Vault should accept.\\n\\t/// @param id We may have different vaults w different credit ratings for the same asset\\n\\t/// @return vault The newly deployed Vault contract which accepts the provided underlying token.\\n\\tfunction deployVault(ERC20 underlying, uint256 id) external returns (Vault vault) {\\n\\t\\t// Use the CREATE2 opcode to deploy a new Vault contract.\\n\\t\\t// This will revert if a Vault which accepts this underlying token has already\\n\\t\\t// been deployed, as the salt would be the same and we can't deploy with it twice.\\n\\t\\tvault = new Vault{ salt: address(underlying).fillLast12Bytes() | bytes32(id) }(underlying);\\n\\n\\t\\temit VaultDeployed(vault, underlying);\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                            VAULT LOOKUP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Computes a Vault's address from its accepted underlying token.\\n\\t/// @param underlying The ERC20 token that the Vault should accept.\\n\\t/// @param id We may have different vaults w different credit ratings for the same asset\\n\\t/// @return The address of a Vault which accepts the provided underlying token.\\n\\t/// @dev The Vault returned may not be deployed yet. Use isVaultDeployed to check.\\n\\tfunction getVaultFromUnderlying(ERC20 underlying, uint256 id) external view returns (Vault) {\\n\\t\\treturn\\n\\t\\t\\tVault(\\n\\t\\t\\t\\tpayable(\\n\\t\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t// Prefix:\\n\\t\\t\\t\\t\\t\\t\\tbytes1(0xFF),\\n\\t\\t\\t\\t\\t\\t\\t// Creator:\\n\\t\\t\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t\\t\\t// Salt:\\n\\t\\t\\t\\t\\t\\t\\taddress(underlying).fillLast12Bytes() | bytes32(id),\\n\\t\\t\\t\\t\\t\\t\\t// Bytecode hash:\\n\\t\\t\\t\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Deployment bytecode:\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttype(Vault).creationCode,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Constructor arguments:\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tabi.encode(underlying)\\n\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t).fromLast20Bytes() // Convert the CREATE2 hash into an address.\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice Returns if a Vault at an address has already been deployed.\\n\\t/// @param vault The address of a Vault which may not have been deployed yet.\\n\\t/// @return A boolean indicating whether the Vault has been deployed already.\\n\\t/// @dev This function is useful to check the return values of getVaultFromUnderlying,\\n\\t/// as it does not check that the Vault addresses it computes have been deployed yet.\\n\\tfunction isVaultDeployed(Vault vault) external view returns (bool) {\\n\\t\\treturn address(vault).code.length > 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x9585913f2ee8c73abca14bfa2f1e6fb61eb4200cc630f65ec1ff3c09a01da35f\",\"license\":\"AGPL-3.0\"},\"src/vault/interfaces/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\n/// @dev Designed for out of the box compatibility with Fuse cTokens.\\n/// @dev Like cTokens, strategies must be transferrable ERC20s.\\nabstract contract Strategy is ERC20 {\\n\\t/// @notice Returns whether the strategy accepts ETH or an ERC20.\\n\\t/// @return True if the strategy accepts ETH, false otherwise.\\n\\t/// @dev Only present in Fuse cTokens, not Compound cTokens.\\n\\tfunction isCEther() external view virtual returns (bool);\\n\\n\\t/// @notice Withdraws a specific amount of underlying tokens from the strategy.\\n\\t/// @param amount The amount of underlying tokens to withdraw.\\n\\t/// @return An error code, or 0 if the withdrawal was successful.\\n\\tfunction redeemUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n\\t/// @notice Returns a user's strategy balance in underlying tokens.\\n\\t/// @param user The user to get the underlying balance of.\\n\\t/// @return The user's strategy balance in underlying tokens.\\n\\t/// @dev May mutate the state of the strategy by accruing interest.\\n\\tfunction balanceOfUnderlying(address user) external virtual returns (uint256);\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ERC20s.\\n/// @dev Designed for out of the box compatibility with Fuse cERC20s.\\nabstract contract ERC20Strategy is Strategy {\\n\\t/// @notice Returns the underlying ERC20 token the strategy accepts.\\n\\t/// @return The underlying ERC20 token the strategy accepts.\\n\\tfunction underlying() external view virtual returns (ERC20);\\n\\n\\t/// @notice Deposit a specific amount of underlying tokens into the strategy.\\n\\t/// @param amount The amount of underlying tokens to deposit.\\n\\t/// @return An error code, or 0 if the deposit was successful.\\n\\tfunction mint(uint256 amount) external virtual returns (uint256);\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ETH.\\n/// @dev Designed for out of the box compatibility with Fuse cEther.\\nabstract contract ETHStrategy is Strategy {\\n\\t/// @notice Deposit a specific amount of ETH into the strategy.\\n\\t/// @dev The amount of ETH is specified via msg.value. Reverts on error.\\n\\tfunction mint() external payable virtual;\\n}\\n\",\"keccak256\":\"0xd4d9b8156bf24e60585bdd7e74e7f343a59440fa73b18d7b46b1b80e585f39c6\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051614f24380380614f2483398101604081905261002f916100de565b600080546001600160a01b03199081166001600160a01b038581169182178455600180549093169085161790915560405184928492917f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b9190a26040516001600160a01b038216907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250505050610118565b6001600160a01b03811681146100db57600080fd5b50565b600080604083850312156100f157600080fd5b82516100fc816100c6565b602084015190925061010d816100c6565b809150509250929050565b614dfd806101276000396000f3fe60806040523480156200001157600080fd5b5060043610620000765760003560e01c806313af4035146200007b5780637a9e5e4b14620000945780637d6020f414620000ab5780638da5cb5b14620000e0578063aa04f8ac1462000103578063bf7e214f146200011a578063e0185487146200012e575b600080fd5b620000926200008c366004620004e8565b62000145565b005b62000092620000a5366004620004e8565b620001cd565b620000cb620000bc366004620004e8565b6001600160a01b03163b151590565b60405190151581526020015b60405180910390f35b600054620000f4906001600160a01b031681565b604051620000d791906200050f565b620000f46200011436600462000523565b6200024e565b600154620000f4906001600160a01b031681565b620000f46200013f36600462000523565b62000346565b6200015d336000356001600160e01b031916620003e7565b620001855760405162461bcd60e51b81526004016200017c9062000552565b60405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b91a250565b620001e5336000356001600160e01b031916620003e7565b620002045760405162461bcd60e51b81526004016200017c9062000552565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60006200033d6001600160f81b03193084620002736001600160a01b038816620004b1565b17604051806020016200028690620004c1565b601f1982820381018352601f909101166040819052620002ab9089906020016200050f565b60408051601f1981840301815290829052620002cb9291602001620005b6565b604051602081830303815290604052805190602001206040516020016200032494939291906001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6040516020818303038152906040528051906020012090565b90505b92915050565b6000816200035d6001600160a01b038516620004b1565b17836040516200036d90620004c1565b6200037991906200050f565b8190604051809103906000f59050801580156200039a573d6000803e3d6000fd5b50604080516001600160a01b038084168252861660208201529192507f09d75e12e349f79020715b0ea7b2c707e8acf1889b6d6f1337fce7f4e1b9e5c7910160405180910390a192915050565b6001546000906001600160a01b03168015620004985760405163b700961360e01b81526001600160a01b0385811660048301523060248301526001600160e01b03198516604483015282169063b700961390606401602060405180830381865afa92505050801562000478575060408051601f3d908101601f191682019092526200047591810190620005d7565b60015b620004835762000498565b8015620004965760019250505062000340565b505b50506000546001600160a01b0383811691161492915050565b60601b6001600160601b03191690565b6147cc80620005fc83390190565b6001600160a01b0381168114620004e557600080fd5b50565b600060208284031215620004fb57600080fd5b81356200050881620004cf565b9392505050565b6001600160a01b0391909116815260200190565b600080604083850312156200053757600080fd5b82356200054481620004cf565b946020939093013593505050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b6000815160005b818110156200059b57602081850181015186830152016200057f565b81811115620005ab576000828601525b509290920192915050565b6000620005cf620005c8838662000578565b8462000578565b949350505050565b600060208284031215620005ea57600080fd5b815180151581146200050857600080fdfe6101206040523480156200001257600080fd5b50604051620047cc380380620047cc8339810160408190526200003591620004ec565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009a9190620004ec565b336001600160a01b031663bf7e214f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ff9190620004ec565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200013e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200016891908101906200055c565b6040516020016200017a919062000614565b604051602081830303815290604052836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001f291908101906200055c565b60405160200162000204919062000657565b604051602081830303815290604052846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000278919062000682565b82516200028d9060009060208601906200042d565b508151620002a39060019060208501906200042d565b5060ff81166080524660a052620002b96200037c565b60c0525050600680546001600160a01b038086166001600160a01b0319928316811790935560078054918616919092161790556040519091507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b90600090a26040516001600160a01b038216907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250506001600160a01b03811660e0526080516200036b90600a620007bc565b6101005250600019600255620008ae565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620003b091906200080a565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8280546200043b90620007cd565b90600052602060002090601f0160209004810192826200045f5760008555620004aa565b82601f106200047a57805160ff1916838001178555620004aa565b82800160010185558215620004aa579182015b82811115620004aa5782518255916020019190600101906200048d565b50620004b8929150620004bc565b5090565b5b80821115620004b85760008155600101620004bd565b6001600160a01b0381168114620004e957600080fd5b50565b600060208284031215620004ff57600080fd5b81516200050c81620004d3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620005465781810151838201526020016200052c565b8381111562000556576000848401525b50505050565b6000602082840312156200056f57600080fd5b81516001600160401b03808211156200058757600080fd5b818401915084601f8301126200059c57600080fd5b815181811115620005b157620005b162000513565b604051601f8201601f19908116603f01168101908382118183101715620005dc57620005dc62000513565b81604052828152876020848701011115620005f657600080fd5b6200060983602083016020880162000529565b979650505050505050565b6802830b930b9b4ba32960bd1b8152600082516200063a81600985016020870162000529565b650815985d5b1d60d21b6009939091019283015250600f01919050565b600760fc1b8152600082516200067581600185016020870162000529565b9190910160010192915050565b6000602082840312156200069557600080fd5b815160ff811681146200050c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620006fe578160001904821115620006e257620006e2620006a7565b80851615620006f057918102915b93841c9390800290620006c2565b509250929050565b6000826200071757506001620007b6565b816200072657506000620007b6565b81600181146200073f57600281146200074a576200076a565b6001915050620007b6565b60ff8411156200075e576200075e620006a7565b50506001821b620007b6565b5060208310610133831016604e8410600b84101617156200078f575081810a620007b6565b6200079b8383620006bd565b8060001904821115620007b257620007b2620006a7565b0290505b92915050565b60006200050c60ff84168362000706565b600181811c90821680620007e257607f821691505b602082108114156200080457634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c9150808316806200082757607f831692505b60208084108214156200084857634e487b7160e01b86526022600452602486fd5b8180156200085f57600181146200087157620008a0565b60ff19861689528489019650620008a0565b60008a81526020902060005b86811015620008985781548b8201529085019083016200087d565b505084890196505b509498975050505050505050565b60805160a05160c05160e05161010051613e776200095560003960008181610373015281816110500152818161126701528181611298015281816112c30152612ba10152600081816108c2015281816110dd015281816117b901528181611d5201528181611e3b015281816120b70152818161216301528181612cba0152818161302501526135700152600061121c015260006111e7015260006104e20152613e776000f3fe6080604052600436106102b65760003560e01c806306fdde03146102c257806307b35d1d146102ed578063095ea7b31461030f5780630e73ecef1461033f5780630e962f001461036157806313af4035146103a357806318160ddd146103c35780631c693478146103d957806320ea2cc3146103ef57806323b872dd1461040f5780632968676e1461042f5780632e1a7d4d1461048e57806330adf81f146104ae578063313ce567146104d057806332ff7732146105165780633644e51514610536578063392e53cd1461054b5780633af9e669146105655780633ba0b9a9146105855780633fd409251461059a578063448f56b9146105ba57806344b81396146105ee57806370a0823114610603578063797ba463146106305780637a9e5e4b146106575780637b72aeb9146106775780637ce3489b146106975780637ecebe00146106b75780637fd6f15c146106e45780638129fc1c146106fa57806383197ef01461070f578063841219e5146107245780638da5cb5b1461073957806395d89b41146107665780639bb5989d1461077b578063a210dbcc1461079b578063a9059cbb146107b0578063ac579b77146107d0578063ac68a748146107f0578063b53d095814610810578063b6b55f2514610830578063bd662f8814610850578063bdf06c8e14610870578063bf7e214f14610890578063c5d664c6146108b0578063c62e20c3146108e4578063c822adda14610904578063c866983b14610924578063c89d346014610944578063d00364be14610964578063d183ce1e14610998578063d505accf146109b8578063db006a75146109d8578063dd62ed3e146109f8578063e9ec2e9914610a30578063ec523afd14610a45578063ecad956514610a65578063eed74e6714610a7b578063f1a392da14610a9b578063f84d73f414610ac2578063f97d2ed714610adc57600080fd5b366102bd57005b600080fd5b3480156102ce57600080fd5b506102d7610afc565b6040516102e4919061366f565b60405180910390f35b3480156102f957600080fd5b5061030d6103083660046136c4565b610b8a565b005b34801561031b57600080fd5b5061032f61032a366004613702565b610c7a565b60405190151581526020016102e4565b34801561034b57600080fd5b50610354610cd5565b6040516102e4919061372e565b34801561036d57600080fd5b506103957f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016102e4565b3480156103af57600080fd5b5061030d6103be36600461377b565b610d37565b3480156103cf57600080fd5b5061039560025481565b3480156103e557600080fd5b50610395600a5481565b3480156103fb57600080fd5b5061030d61040a36600461377b565b610db3565b34801561041b57600080fd5b5061032f61042a366004613798565b610f38565b34801561043b57600080fd5b5061046f61044a36600461377b565b600d6020526000908152604090205460ff81169061010090046001600160f81b031682565b6040805192151583526001600160f81b039091166020830152016102e4565b34801561049a57600080fd5b5061030d6104a93660046137d9565b611020565b3480156104ba57600080fd5b50610395600080516020613e0283398151915281565b3480156104dc57600080fd5b506105047f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016102e4565b34801561052257600080fd5b5061030d610531366004613800565b6110a9565b34801561054257600080fd5b506103956111e3565b34801561055757600080fd5b5060105461032f9060ff1681565b34801561057157600080fd5b5061039561058036600461377b565b61123e565b34801561059157600080fd5b5061039561128b565b3480156105a657600080fd5b5061030d6105b536600461377b565b6112f7565b3480156105c657600080fd5b506009546105e190600160801b90046001600160401b031681565b6040516102e4919061381d565b3480156105fa57600080fd5b506103956113a4565b34801561060f57600080fd5b5061039561061e36600461377b565b60036020526000908152604090205481565b34801561063c57600080fd5b506009546105e190600160c01b90046001600160401b031681565b34801561066357600080fd5b5061030d61067236600461377b565b61140b565b34801561068357600080fd5b5061030d610692366004613831565b611487565b3480156106a357600080fd5b5061030d6106b23660046137d9565b611601565b3480156106c357600080fd5b506103956106d236600461377b565b60056020526000908152604090205481565b3480156106f057600080fd5b5061039560085481565b34801561070657600080fd5b5061030d6116b1565b34801561071b57600080fd5b5061030d61176a565b34801561073057600080fd5b5061039561179f565b34801561074557600080fd5b50600654610759906001600160a01b031681565b6040516102e4919061385a565b34801561077257600080fd5b506102d761182f565b34801561078757600080fd5b5061030d61079636600461386e565b61183c565b3480156107a757600080fd5b5061030d611918565b3480156107bc57600080fd5b5061032f6107cb366004613702565b6119e3565b3480156107dc57600080fd5b5061030d6107eb36600461389e565b611a49565b3480156107fc57600080fd5b5061030d61080b3660046137d9565b611acf565b34801561081c57600080fd5b5061030d61082b366004613702565b611b41565b34801561083c57600080fd5b5061030d61084b3660046137d9565b611dc8565b34801561085c57600080fd5b5061030d61086b3660046137d9565b611e63565b34801561087c57600080fd5b5061030d61088b366004613702565b611f18565b34801561089c57600080fd5b50600754610759906001600160a01b031681565b3480156108bc57600080fd5b506107597f000000000000000000000000000000000000000000000000000000000000000081565b3480156108f057600080fd5b5061030d6108ff3660046137d9565b612230565b34801561091057600080fd5b5061075961091f3660046137d9565b612387565b34801561093057600080fd5b5061030d61093f36600461377b565b6123b1565b34801561095057600080fd5b5061030d61095f36600461389e565b61242d565b34801561097057600080fd5b50600e5461098b90600160801b90046001600160801b031681565b6040516102e49190613912565b3480156109a457600080fd5b5061030d6109b3366004613926565b6127f0565b3480156109c457600080fd5b5061030d6109d3366004613957565b612942565b3480156109e457600080fd5b5061030d6109f33660046137d9565b612b73565b348015610a0457600080fd5b50610395610a133660046139c8565b600460209081526000928352604080842090915290825290205481565b348015610a3c57600080fd5b50610395612bfe565b348015610a5157600080fd5b5061030d610a6036600461377b565b612c20565b348015610a7157600080fd5b50610395600c5481565b348015610a8757600080fd5b50600e546105e1906001600160401b031681565b348015610aa757600080fd5b50600e546105e190600160401b90046001600160401b031681565b348015610ace57600080fd5b50600b5461032f9060ff1681565b348015610ae857600080fd5b5060095461098b906001600160801b031681565b60008054610b09906139f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b35906139f6565b8015610b825780601f10610b5757610100808354040283529160200191610b82565b820191906000526020600020905b815481529060010190602001808311610b6557829003601f168201915b505050505081565b610ba0336000356001600160e01b031916612de6565b610bc55760405162461bcd60e51b8152600401610bbc90613a31565b60405180910390fd5b600954600160801b90046001600160401b03166001600160801b0382161115610c225760405162461bcd60e51b815260206004820152600f60248201526e57494e444f575f544f4f5f4c4f4e4760881b6044820152606401610bbc565b600980546001600160801b0319166001600160801b03831617905560405133907ff61ebd3c01f656aba479c738a8744215d6f1ec2c19169500f3bff0a9d8374ce190610c6f908490613912565b60405180910390a250565b3360008181526004602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020613e2283398151915290610cc39086815260200190565b60405180910390a35060015b92915050565b6060600f805480602002602001604051908101604052809291908181526020018280548015610d2d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d0f575b5050505050905090565b610d4d336000356001600160e01b031916612de6565b610d695760405162461bcd60e51b8152600401610bbc90613a31565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b90600090a250565b610dc9336000356001600160e01b031916612de6565b610de55760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0381166000908152600d602052604090205460ff16610e1d5760405162461bcd60e51b8152600401610bbc90613a57565b6001600160a01b0381166000908152600d602052604090205461010090046001600160f81b0316610e4c612bfe565b811115610e6357600e80546001600160801b031690555b6001600160a01b0382166000818152600d6020526040808220805460ff169055600c805485900390555133917fe5211b194c7994bf5eba21ddab25713549e67c4c84028d2f28c1377195de0fb991a3610f3433836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610ee2919061385a565b602060405180830381865afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f239190613a83565b6001600160a01b0385169190612ea8565b5050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610f9d576001600160a01b038416600090815260046020908152604080832033845290915281208054849290610f97908490613ab2565b90915550505b6001600160a01b03841660009081526003602052604081208054849290610fc5908490613ab2565b90915550506001600160a01b0380841660008181526003602052604090819020805486019055519091861690600080516020613de28339815191529061100e9086815260200190565b60405180910390a35060019392505050565b8061103d5760405162461bcd60e51b8152600401610bbc90613ac9565b6110793361107461104c61128b565b84907f0000000000000000000000000000000000000000000000000000000000000000612f27565b612f4a565b6040518181523390600080516020613d828339815191529060200160405180910390a26110a63382612fb4565b50565b6110bf336000356001600160e01b031916612de6565b6110db5760405162461bcd60e51b8152600401610bbc90613a31565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d9190613af8565b60ff166012146111a05760405162461bcd60e51b815260206004820152600e60248201526d57524f4e475f444543494d414c5360901b6044820152606401610bbc565b600b805460ff191682151590811790915560405190815233907f6375b140d4463d47b864f1f47e5d2893cc3478e73aedcc268b054fab0230a84190602001610c6f565b60007f0000000000000000000000000000000000000000000000000000000000000000461461121957611214613051565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6000610ccf61124b61128b565b6001600160a01b038416600090815260036020526040902054907f0000000000000000000000000000000000000000000000000000000000000000613100565b600254600090806112bd577f000000000000000000000000000000000000000000000000000000000000000091505090565b6112f1817f00000000000000000000000000000000000000000000000000000000000000006112ea612bfe565b9190612f27565b91505090565b61130d336000356001600160e01b031916612de6565b6113295760405162461bcd60e51b8152600401610bbc90613a31565b600f805460018101825560009182527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b038416908117909155604051909133917fd3c85e764bd8fe5c02e811c9538a4d50d8ffff22143526e00197d3cd0d11178a9190a350565b600e546009546000916001600160401b03600160401b909104811691600160801b90041680820142106113da5760009250505090565b600e54600160801b90046001600160801b0316814284900382028161140157611401613b15565b0490039392505050565b611421336000356001600160e01b031916612de6565b61143d5760405162461bcd60e51b8152600401610bbc90613a31565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b61149d336000356001600160e01b031916612de6565b6114b95760405162461bcd60e51b8152600401610bbc90613a31565b6001600160401b0381166115065760405162461bcd60e51b815260206004820152601460248201527344454c41595f43414e4e4f545f42455f5a45524f60601b6044820152606401610bbc565b6301e13380816001600160401b031611156115545760405162461bcd60e51b815260206004820152600e60248201526d44454c41595f544f4f5f4c4f4e4760901b6044820152606401610bbc565b600954600160801b90046001600160401b03166115af5760098054600160801b600160c01b031916600160801b6001600160401b038416021790556040513390600080516020613d6283398151915290610c6f90849061381d565b600980546001600160c01b0316600160c01b6001600160401b0384160217905560405133907f342b344c0ac2ffff8f84b1d82d8235a2401a0accf4666f1fec4a1c3cdf1d29e790610c6f90849061381d565b611617336000356001600160e01b031916612de6565b6116335760405162461bcd60e51b8152600401610bbc90613a31565b670de0b6b3a764000081111561167a5760405162461bcd60e51b815260206004820152600c60248201526b08c8a8abea89e9ebe90928e960a31b6044820152606401610bbc565b600881905560405181815233907fec370615cc81fb334e5566fbc80664d9082377bf59288d64a79f3fbecf4323a990602001610c6f565b6116c7336000356001600160e01b031916612de6565b6116e35760405162461bcd60e51b8152600401610bbc90613a31565b60105460ff161561172c5760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b6044820152606401610bbc565b6010805460ff191660011790556000600281905560405133917f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e691a2565b611780336000356001600160e01b031916612de6565b61179c5760405162461bcd60e51b8152600401610bbc90613a31565b33ff5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117ee90309060040161385a565b602060405180830381865afa15801561180b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190613a83565b60018054610b09906139f6565b611852336000356001600160e01b031916612de6565b61186e5760405162461bcd60e51b8152600401610bbc90613a31565b6000600f838154811061188357611883613b2b565b600091825260209091200154600f80546001600160a01b0390921692508391859081106118b2576118b2613b2b565b60009182526020918290200180546001600160a01b0319166001600160a01b039384161790556040518581528483169284169133917f4a0a125a0f77451ab4de43b53c0a93266c6e542ceaa7ae0067e4ba66b4ce3a2d91015b60405180910390a4505050565b61192e336000356001600160e01b031916612de6565b61194a5760405162461bcd60e51b8152600401610bbc90613a31565b600f80546000919061195e90600190613ab2565b8154811061196e5761196e613b2b565b600091825260209091200154600f80546001600160a01b039092169250908061199957611999613b41565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038316913391600080516020613da28339815191529190a350565b33600090815260036020526040812080548391908390611a04908490613ab2565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020613de283398151915290610cc39086815260200190565b611a5f336000356001600160e01b031916612de6565b611a7b5760405162461bcd60e51b8152600401610bbc90613a31565b611a87600f8383613600565b50336001600160a01b03167f93fc2f83177365343f59862c6a290117bb3036bca4db453f92d1c6e9163f53848383604051611ac3929190613b57565b60405180910390a25050565b611ae5336000356001600160e01b031916612de6565b611b015760405162461bcd60e51b8152600401610bbc90613a31565b60405181815233907f9493e5bbe4e8e0ac67284469a2d677403d0378a85a59e341d3abc433d0d9a2099060200160405180910390a26110a6303383612ea8565b611b57336000356001600160e01b031916612de6565b611b735760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0382166000908152600d602052604090205460ff16611bab5760405162461bcd60e51b8152600401610bbc90613a57565b80611bc85760405162461bcd60e51b8152600401610bbc90613ac9565b611bd18161311b565b6001600160a01b0383166000908152600d602052604090208054600190611c0790849061010090046001600160f81b0316613ba5565b82546001600160f81b039182166101009390930a928302919092021990911617905550600c805482900390556040518181526001600160a01b038316903390600080516020613dc28339815191529060200160405180910390a360405163852a12e360e01b8152600481018290526001600160a01b0383169063852a12e3906024016020604051808303816000875af1158015611ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccc9190613a83565b15611ce95760405162461bcd60e51b8152600401610bbc90613bcd565b816001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190613bf4565b15610f34577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611dab57600080fd5b505af1158015611dbf573d6000803e3d6000fd5b50505050505050565b80611de55760405162461bcd60e51b8152600401610bbc90613ac9565b611df933611df461104c61128b565b613135565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26110a66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084613187565b611e79336000356001600160e01b031916612de6565b611e955760405162461bcd60e51b8152600401610bbc90613a31565b670de0b6b3a7640000600a541115611ee15760405162461bcd60e51b815260206004820152600f60248201526e0a882a48e8aa8bea89e9ebe90928e9608b1b6044820152606401610bbc565b600a81905560405181815233907f95bc4480b51f4860106d42850bcae222cf3303fb2b7d433e896205e0ebefe36990602001610c6f565b611f2e336000356001600160e01b031916612de6565b611f4a5760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0382166000908152600d602052604090205460ff16611f825760405162461bcd60e51b8152600401610bbc90613a57565b80611f9f5760405162461bcd60e51b8152600401610bbc90613ac9565b80600c6000828254611fb19190613c11565b90915550611fc090508161311b565b6001600160a01b0383166000818152600d60205260409081902080546001600160f81b0361010080830482169096011690940260ff90941693909317909255905133907f49e9138fe0dacf001ea634236e38aa8bd229efd55ec4d7975228d679db6ce8f9906120329085815260200190565b60405180910390a3816001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209c9190613bf4565b1561215657604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561210357600080fd5b505af1158015612117573d6000803e3d6000fd5b50505050816001600160a01b0316631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611dab57600080fd5b61218a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838361321b565b60405163140e25ad60e31b8152600481018290526001600160a01b0383169063a0712d68906024016020604051808303816000875af11580156121d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f59190613a83565b15610f345760405162461bcd60e51b815260206004820152600b60248201526a1352539517d1905253115160aa1b6044820152606401610bbc565b612246336000356001600160e01b031916612de6565b6122625760405162461bcd60e51b8152600401610bbc90613a31565b600f80546000919061227690600190613ab2565b8154811061228657612286613b2b565b6000918252602082200154600f80546001600160a01b03909216935090849081106122b3576122b3613b2b565b600091825260209091200154600f80546001600160a01b0390921692508391859081106122e2576122e2613b2b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600f80548061232157612321613b41565b600082815260209020810160001990810180546001600160a01b03191690550190556040516001600160a01b03838116919083169033907f53bddc0ebb11647d046bd37b2965cd6d82f69c263b0b100658daad9ae79f41d89061190b9088815260200190565b600f818154811061239757600080fd5b6000918252602090912001546001600160a01b0316905081565b6123c7336000356001600160e01b031916612de6565b6123e35760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0381166000818152600d6020526040808220805460ff191690555133917fff8fe190f3935e9e8681ce444b08be824a6be3e5184465ddbd710cc4f1a9f2f291a350565b612443336000356001600160e01b031916612de6565b61245f5760405162461bcd60e51b8152600401610bbc90613a31565b600954600e54612489916001600160401b03600160801b909104811691600160401b900416613c29565b6001600160401b031642106124b857600e80546001600160401b031916426001600160401b0316179055612525565b600954600e546124da916001600160801b0316906001600160401b0316613c54565b6001600160801b03164211156125255760405162461bcd60e51b815260206004820152601060248201526f4241445f484152564553545f54494d4560801b6044820152606401610bbc565b600c54600081815b848110156126aa57600086868381811061254957612549613b2b565b905060200201602081019061255e919061377b565b6001600160a01b0381166000908152600d602052604090205490915060ff166125995760405162461bcd60e51b8152600401610bbc90613a57565b6001600160a01b0381166000818152600d6020526040808220549051633af9e66960e01b81526101009091046001600160f81b03169290633af9e669906125e490309060040161385a565b6020604051808303816000875af1158015612603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126279190613a83565b90506126328161311b565b6001600160a01b0384166000908152600d6020526040902080546001600160f81b03929092166101000260ff909216919091179055816126728287613c11565b61267c9190613ab2565b945081811161268c576000612690565b8181035b8601955050505080806126a290613c76565b91505061252d565b506008546000906126c5908490670de0b6b3a7640000613100565b90506126d630611df461104c61128b565b6126fc81846126e36113a4565b6126ed9190613c11565b6126f79190613ab2565b613293565b600e8054600c8590556001600160401b03428116600160401b02600160401b600160801b03196001600160801b0395909516600160801b029490941691161791909117905560405133907f69e9c71f6799744a94d9897e77c3ed426cc2f92ba0ef3300785368209b6f4b2d906127759089908990613b57565b60405180910390a2600954600160c01b90046001600160401b03168015611dbf57600980546001600160801b0316600160801b6001600160401b038416026001600160c01b03161790556040513390600080516020613d62833981519152906127df90849061381d565b60405180910390a250505050505050565b612806336000356001600160e01b031916612de6565b6128225760405162461bcd60e51b8152600401610bbc90613a31565b6000600f838154811061283757612837613b2b565b6000918252602082200154600f80546001600160a01b039092169350908490811061286457612864613b2b565b600091825260209091200154600f80546001600160a01b03909216925082918690811061289357612893613b2b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600f84815481106128d5576128d5613b2b565b60009182526020918290200180546001600160a01b0319166001600160a01b03938416179055604080518781529182018690528483169284169133917f86d0d8ebf0f4d918d7d5ea876055270042ae67e3ba4af1023531eaf10045b6da910160405180910390a450505050565b4284101561298c5760405162461bcd60e51b815260206004820152601760248201527614115493525517d11150511312539157d1561412549151604a1b6044820152606401610bbc565b60006129966111e3565b6001600160a01b038981166000818152600560209081526040918290208054600181019091558251600080516020613e028339815191528184015280840194909452938c166060840152608083018b905260a083019390935260c08083018a90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612a9d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612ad35750886001600160a01b0316816001600160a01b0316145b612b1a5760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5045524d49545f5349474e415455524560401b6044820152606401610bbc565b6001600160a01b0390811660009081526004602090815260408083208b8516808552908352928190208a905551898152919350918a1691600080516020613e22833981519152910160405180910390a350505050505050565b80612b905760405162461bcd60e51b8152600401610bbc90613ac9565b6000612bc5612b9d61128b565b83907f0000000000000000000000000000000000000000000000000000000000000000613100565b9050612bd13383612f4a565b6040518181523390600080516020613d828339815191529060200160405180910390a2610f343382612fb4565b6000612c086113a4565b600c54039050612c1661179f565b6112149082613c11565b612c36336000356001600160e01b031916612de6565b612c525760405162461bcd60e51b8152600401610bbc90613a31565b806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb49190613bf4565b612d53577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d449190613c91565b6001600160a01b031614612d5a565b600b5460ff165b612d995760405162461bcd60e51b815260206004820152601060248201526f57524f4e475f554e4445524c59494e4760801b6044820152606401610bbc565b6001600160a01b0381166000818152600d6020526040808220805460ff191660011790555133917f2fc1f5b589e399a463bf89605c1539bdd9878a9a3acd089abeca7a15e1fbe6ec91a350565b6007546000906001600160a01b03168015612e8f5760405163b700961360e01b81526001600160a01b0385811660048301523060248301526001600160e01b03198516604483015282169063b700961390606401602060405180830381865afa925050508015612e73575060408051601f3d908101601f19168201909252612e7091810190613bf4565b60015b612e7c57612e8f565b8015612e8d57600192505050610ccf565b505b50506006546001600160a01b0383811691161492915050565b600060405163a9059cbb60e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050612ee3816132a9565b612f215760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610bbc565b50505050565b82810282158415858304841417151715612f4057600080fd5b9190910492915050565b6001600160a01b03821660009081526003602052604081208054839290612f72908490613ab2565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020613de2833981519152906020015b60405180910390a35050565b6000612fbe61179f565b905080821115613018576000612ff3600a54670de0b6b3a764000085612fe2612bfe565b612fec9190613ab2565b9190613100565b905060006130018385613ab2565b90506130156130108383613c11565b6132f0565b50505b61304c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484612ea8565b505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516130839190613cae565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b828202831584820484141761311457600080fd5b0492915050565b60006001600160f81b0382111561313157600080fd5b5090565b80600260008282546131479190613c11565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020613de28339815191529101612fa8565b60006040516323b872dd60e01b81526001600160a01b03851660048201526001600160a01b038416602482015282604482015260008060648360008a5af19150506131d1816132a9565b6132145760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610bbc565b5050505050565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050613256816132a9565b612f215760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610bbc565b60006001600160801b0382111561313157600080fd5b60003d826132bb57806000803e806000fd5b80602081146132d35780156132e457600092506132e9565b816000803e600051151592506132e9565b600192505b5050919050565b600f54819060009061330490600190613ab2565b90505b6000600f828154811061331c5761331c613b2b565b60009182526020808320909101546001600160a01b0316808352600d9091526040909120549091506001600160f81b036101008204169060ff161580613360575080155b156133c457600f80548061337657613376613b41565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416913391600080516020613da28339815191529190a3505061353c565b60006133d085836135e8565b90508082036133de8161311b565b6001600160a01b0385166000818152600d60205260409081902080546001600160f81b03949094166101000260ff90941693909317909255905196839003963390600080516020613dc28339815191529061343c9086815260200190565b60405180910390a360405163852a12e360e01b8152600481018390526001600160a01b0385169063852a12e3906024016020604051808303816000875af115801561348b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134af9190613a83565b156134cc5760405162461bcd60e51b8152600401610bbc90613bcd565b8061352a57600f8054806134e2576134e2613b41565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038616913391600080516020613da28339815191529190a35b50846135385750505061354e565b5050505b8061354681613d4a565b915050613307565b600c805484900390554780158015906135695750600b5460ff165b15612f21577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050505050505050565b60008183106135f757816135f9565b825b9392505050565b828054828255906000526020600020908101928215613653579160200282015b828111156136535781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613620565b506131319291505b80821115613131576000815560010161365b565b600060208083528351808285015260005b8181101561369c57858101830151858201604001528201613680565b818111156136ae576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156136d657600080fd5b81356001600160801b03811681146135f957600080fd5b6001600160a01b03811681146110a657600080fd5b6000806040838503121561371557600080fd5b8235613720816136ed565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561376f5783516001600160a01b03168352928401929184019160010161374a565b50909695505050505050565b60006020828403121561378d57600080fd5b81356135f9816136ed565b6000806000606084860312156137ad57600080fd5b83356137b8816136ed565b925060208401356137c8816136ed565b929592945050506040919091013590565b6000602082840312156137eb57600080fd5b5035919050565b80151581146110a657600080fd5b60006020828403121561381257600080fd5b81356135f9816137f2565b6001600160401b0391909116815260200190565b60006020828403121561384357600080fd5b81356001600160401b03811681146135f957600080fd5b6001600160a01b0391909116815260200190565b6000806040838503121561388157600080fd5b823591506020830135613893816136ed565b809150509250929050565b600080602083850312156138b157600080fd5b82356001600160401b03808211156138c857600080fd5b818501915085601f8301126138dc57600080fd5b8135818111156138eb57600080fd5b8660208260051b850101111561390057600080fd5b60209290920196919550909350505050565b6001600160801b0391909116815260200190565b6000806040838503121561393957600080fd5b50508035926020909101359150565b60ff811681146110a657600080fd5b600080600080600080600060e0888a03121561397257600080fd5b873561397d816136ed565b9650602088013561398d816136ed565b9550604088013594506060880135935060808801356139ab81613948565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156139db57600080fd5b82356139e6816136ed565b91506020830135613893816136ed565b600181811c90821680613a0a57607f821691505b60208210811415613a2b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b602080825260129082015271554e545255535445445f535452415445475960701b604082015260600190565b600060208284031215613a9557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613ac457613ac4613a9c565b500390565b602080825260159082015274414d4f554e545f43414e4e4f545f42455f5a45524f60581b604082015260600190565b600060208284031215613b0a57600080fd5b81516135f981613948565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60208082528181018390526000908460408401835b86811015613b9a578235613b7f816136ed565b6001600160a01b031682529183019190830190600101613b6c565b509695505050505050565b60006001600160f81b0383811690831681811015613bc557613bc5613a9c565b039392505050565b6020808252600d908201526c14915111515357d19052531151609a1b604082015260600190565b600060208284031215613c0657600080fd5b81516135f9816137f2565b60008219821115613c2457613c24613a9c565b500190565b60006001600160401b03828116848216808303821115613c4b57613c4b613a9c565b01949350505050565b60006001600160801b03828116848216808303821115613c4b57613c4b613a9c565b6000600019821415613c8a57613c8a613a9c565b5060010190565b600060208284031215613ca357600080fd5b81516135f9816136ed565b600080835481600182811c915080831680613cca57607f831692505b6020808410821415613cea57634e487b7160e01b86526022600452602486fd5b818015613cfe5760018114613d0f57613d3c565b60ff19861689528489019650613d3c565b60008a81526020902060005b86811015613d345781548b820152908501908301613d1b565b505084890196505b509498975050505050505050565b600081613d5957613d59613a9c565b50600019019056fee893fa207c5a5094cad036347b877c23ebecd9df94ae0426f287040c13220b3f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436457075a8110ddb2863422424e354eb417b3b58b5ebce466afa64f3d894154507e8d851b682e239b1de720e92e5c5cffdb72d353104cc63dc6ed144d7080217fbeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122042a7deba28b061fb75eaa8f9caf203476a792d54db6b9b8eba96bdfd2898289a64736f6c634300080a0033a26469706673582212209c8b3619fdc07d423061df6325e2e13cfe852f20b07043ed5388c155583b092764736f6c634300080a0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000765760003560e01c806313af4035146200007b5780637a9e5e4b14620000945780637d6020f414620000ab5780638da5cb5b14620000e0578063aa04f8ac1462000103578063bf7e214f146200011a578063e0185487146200012e575b600080fd5b620000926200008c366004620004e8565b62000145565b005b62000092620000a5366004620004e8565b620001cd565b620000cb620000bc366004620004e8565b6001600160a01b03163b151590565b60405190151581526020015b60405180910390f35b600054620000f4906001600160a01b031681565b604051620000d791906200050f565b620000f46200011436600462000523565b6200024e565b600154620000f4906001600160a01b031681565b620000f46200013f36600462000523565b62000346565b6200015d336000356001600160e01b031916620003e7565b620001855760405162461bcd60e51b81526004016200017c9062000552565b60405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b91a250565b620001e5336000356001600160e01b031916620003e7565b620002045760405162461bcd60e51b81526004016200017c9062000552565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60006200033d6001600160f81b03193084620002736001600160a01b038816620004b1565b17604051806020016200028690620004c1565b601f1982820381018352601f909101166040819052620002ab9089906020016200050f565b60408051601f1981840301815290829052620002cb9291602001620005b6565b604051602081830303815290604052805190602001206040516020016200032494939291906001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6040516020818303038152906040528051906020012090565b90505b92915050565b6000816200035d6001600160a01b038516620004b1565b17836040516200036d90620004c1565b6200037991906200050f565b8190604051809103906000f59050801580156200039a573d6000803e3d6000fd5b50604080516001600160a01b038084168252861660208201529192507f09d75e12e349f79020715b0ea7b2c707e8acf1889b6d6f1337fce7f4e1b9e5c7910160405180910390a192915050565b6001546000906001600160a01b03168015620004985760405163b700961360e01b81526001600160a01b0385811660048301523060248301526001600160e01b03198516604483015282169063b700961390606401602060405180830381865afa92505050801562000478575060408051601f3d908101601f191682019092526200047591810190620005d7565b60015b620004835762000498565b8015620004965760019250505062000340565b505b50506000546001600160a01b0383811691161492915050565b60601b6001600160601b03191690565b6147cc80620005fc83390190565b6001600160a01b0381168114620004e557600080fd5b50565b600060208284031215620004fb57600080fd5b81356200050881620004cf565b9392505050565b6001600160a01b0391909116815260200190565b600080604083850312156200053757600080fd5b82356200054481620004cf565b946020939093013593505050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b6000815160005b818110156200059b57602081850181015186830152016200057f565b81811115620005ab576000828601525b509290920192915050565b6000620005cf620005c8838662000578565b8462000578565b949350505050565b600060208284031215620005ea57600080fd5b815180151581146200050857600080fdfe6101206040523480156200001257600080fd5b50604051620047cc380380620047cc8339810160408190526200003591620004ec565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009a9190620004ec565b336001600160a01b031663bf7e214f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ff9190620004ec565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200013e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200016891908101906200055c565b6040516020016200017a919062000614565b604051602081830303815290604052836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001f291908101906200055c565b60405160200162000204919062000657565b604051602081830303815290604052846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000278919062000682565b82516200028d9060009060208601906200042d565b508151620002a39060019060208501906200042d565b5060ff81166080524660a052620002b96200037c565b60c0525050600680546001600160a01b038086166001600160a01b0319928316811790935560078054918616919092161790556040519091507f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b90600090a26040516001600160a01b038216907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250506001600160a01b03811660e0526080516200036b90600a620007bc565b6101005250600019600255620008ae565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620003b091906200080a565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8280546200043b90620007cd565b90600052602060002090601f0160209004810192826200045f5760008555620004aa565b82601f106200047a57805160ff1916838001178555620004aa565b82800160010185558215620004aa579182015b82811115620004aa5782518255916020019190600101906200048d565b50620004b8929150620004bc565b5090565b5b80821115620004b85760008155600101620004bd565b6001600160a01b0381168114620004e957600080fd5b50565b600060208284031215620004ff57600080fd5b81516200050c81620004d3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620005465781810151838201526020016200052c565b8381111562000556576000848401525b50505050565b6000602082840312156200056f57600080fd5b81516001600160401b03808211156200058757600080fd5b818401915084601f8301126200059c57600080fd5b815181811115620005b157620005b162000513565b604051601f8201601f19908116603f01168101908382118183101715620005dc57620005dc62000513565b81604052828152876020848701011115620005f657600080fd5b6200060983602083016020880162000529565b979650505050505050565b6802830b930b9b4ba32960bd1b8152600082516200063a81600985016020870162000529565b650815985d5b1d60d21b6009939091019283015250600f01919050565b600760fc1b8152600082516200067581600185016020870162000529565b9190910160010192915050565b6000602082840312156200069557600080fd5b815160ff811681146200050c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620006fe578160001904821115620006e257620006e2620006a7565b80851615620006f057918102915b93841c9390800290620006c2565b509250929050565b6000826200071757506001620007b6565b816200072657506000620007b6565b81600181146200073f57600281146200074a576200076a565b6001915050620007b6565b60ff8411156200075e576200075e620006a7565b50506001821b620007b6565b5060208310610133831016604e8410600b84101617156200078f575081810a620007b6565b6200079b8383620006bd565b8060001904821115620007b257620007b2620006a7565b0290505b92915050565b60006200050c60ff84168362000706565b600181811c90821680620007e257607f821691505b602082108114156200080457634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c9150808316806200082757607f831692505b60208084108214156200084857634e487b7160e01b86526022600452602486fd5b8180156200085f57600181146200087157620008a0565b60ff19861689528489019650620008a0565b60008a81526020902060005b86811015620008985781548b8201529085019083016200087d565b505084890196505b509498975050505050505050565b60805160a05160c05160e05161010051613e776200095560003960008181610373015281816110500152818161126701528181611298015281816112c30152612ba10152600081816108c2015281816110dd015281816117b901528181611d5201528181611e3b015281816120b70152818161216301528181612cba0152818161302501526135700152600061121c015260006111e7015260006104e20152613e776000f3fe6080604052600436106102b65760003560e01c806306fdde03146102c257806307b35d1d146102ed578063095ea7b31461030f5780630e73ecef1461033f5780630e962f001461036157806313af4035146103a357806318160ddd146103c35780631c693478146103d957806320ea2cc3146103ef57806323b872dd1461040f5780632968676e1461042f5780632e1a7d4d1461048e57806330adf81f146104ae578063313ce567146104d057806332ff7732146105165780633644e51514610536578063392e53cd1461054b5780633af9e669146105655780633ba0b9a9146105855780633fd409251461059a578063448f56b9146105ba57806344b81396146105ee57806370a0823114610603578063797ba463146106305780637a9e5e4b146106575780637b72aeb9146106775780637ce3489b146106975780637ecebe00146106b75780637fd6f15c146106e45780638129fc1c146106fa57806383197ef01461070f578063841219e5146107245780638da5cb5b1461073957806395d89b41146107665780639bb5989d1461077b578063a210dbcc1461079b578063a9059cbb146107b0578063ac579b77146107d0578063ac68a748146107f0578063b53d095814610810578063b6b55f2514610830578063bd662f8814610850578063bdf06c8e14610870578063bf7e214f14610890578063c5d664c6146108b0578063c62e20c3146108e4578063c822adda14610904578063c866983b14610924578063c89d346014610944578063d00364be14610964578063d183ce1e14610998578063d505accf146109b8578063db006a75146109d8578063dd62ed3e146109f8578063e9ec2e9914610a30578063ec523afd14610a45578063ecad956514610a65578063eed74e6714610a7b578063f1a392da14610a9b578063f84d73f414610ac2578063f97d2ed714610adc57600080fd5b366102bd57005b600080fd5b3480156102ce57600080fd5b506102d7610afc565b6040516102e4919061366f565b60405180910390f35b3480156102f957600080fd5b5061030d6103083660046136c4565b610b8a565b005b34801561031b57600080fd5b5061032f61032a366004613702565b610c7a565b60405190151581526020016102e4565b34801561034b57600080fd5b50610354610cd5565b6040516102e4919061372e565b34801561036d57600080fd5b506103957f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016102e4565b3480156103af57600080fd5b5061030d6103be36600461377b565b610d37565b3480156103cf57600080fd5b5061039560025481565b3480156103e557600080fd5b50610395600a5481565b3480156103fb57600080fd5b5061030d61040a36600461377b565b610db3565b34801561041b57600080fd5b5061032f61042a366004613798565b610f38565b34801561043b57600080fd5b5061046f61044a36600461377b565b600d6020526000908152604090205460ff81169061010090046001600160f81b031682565b6040805192151583526001600160f81b039091166020830152016102e4565b34801561049a57600080fd5b5061030d6104a93660046137d9565b611020565b3480156104ba57600080fd5b50610395600080516020613e0283398151915281565b3480156104dc57600080fd5b506105047f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016102e4565b34801561052257600080fd5b5061030d610531366004613800565b6110a9565b34801561054257600080fd5b506103956111e3565b34801561055757600080fd5b5060105461032f9060ff1681565b34801561057157600080fd5b5061039561058036600461377b565b61123e565b34801561059157600080fd5b5061039561128b565b3480156105a657600080fd5b5061030d6105b536600461377b565b6112f7565b3480156105c657600080fd5b506009546105e190600160801b90046001600160401b031681565b6040516102e4919061381d565b3480156105fa57600080fd5b506103956113a4565b34801561060f57600080fd5b5061039561061e36600461377b565b60036020526000908152604090205481565b34801561063c57600080fd5b506009546105e190600160c01b90046001600160401b031681565b34801561066357600080fd5b5061030d61067236600461377b565b61140b565b34801561068357600080fd5b5061030d610692366004613831565b611487565b3480156106a357600080fd5b5061030d6106b23660046137d9565b611601565b3480156106c357600080fd5b506103956106d236600461377b565b60056020526000908152604090205481565b3480156106f057600080fd5b5061039560085481565b34801561070657600080fd5b5061030d6116b1565b34801561071b57600080fd5b5061030d61176a565b34801561073057600080fd5b5061039561179f565b34801561074557600080fd5b50600654610759906001600160a01b031681565b6040516102e4919061385a565b34801561077257600080fd5b506102d761182f565b34801561078757600080fd5b5061030d61079636600461386e565b61183c565b3480156107a757600080fd5b5061030d611918565b3480156107bc57600080fd5b5061032f6107cb366004613702565b6119e3565b3480156107dc57600080fd5b5061030d6107eb36600461389e565b611a49565b3480156107fc57600080fd5b5061030d61080b3660046137d9565b611acf565b34801561081c57600080fd5b5061030d61082b366004613702565b611b41565b34801561083c57600080fd5b5061030d61084b3660046137d9565b611dc8565b34801561085c57600080fd5b5061030d61086b3660046137d9565b611e63565b34801561087c57600080fd5b5061030d61088b366004613702565b611f18565b34801561089c57600080fd5b50600754610759906001600160a01b031681565b3480156108bc57600080fd5b506107597f000000000000000000000000000000000000000000000000000000000000000081565b3480156108f057600080fd5b5061030d6108ff3660046137d9565b612230565b34801561091057600080fd5b5061075961091f3660046137d9565b612387565b34801561093057600080fd5b5061030d61093f36600461377b565b6123b1565b34801561095057600080fd5b5061030d61095f36600461389e565b61242d565b34801561097057600080fd5b50600e5461098b90600160801b90046001600160801b031681565b6040516102e49190613912565b3480156109a457600080fd5b5061030d6109b3366004613926565b6127f0565b3480156109c457600080fd5b5061030d6109d3366004613957565b612942565b3480156109e457600080fd5b5061030d6109f33660046137d9565b612b73565b348015610a0457600080fd5b50610395610a133660046139c8565b600460209081526000928352604080842090915290825290205481565b348015610a3c57600080fd5b50610395612bfe565b348015610a5157600080fd5b5061030d610a6036600461377b565b612c20565b348015610a7157600080fd5b50610395600c5481565b348015610a8757600080fd5b50600e546105e1906001600160401b031681565b348015610aa757600080fd5b50600e546105e190600160401b90046001600160401b031681565b348015610ace57600080fd5b50600b5461032f9060ff1681565b348015610ae857600080fd5b5060095461098b906001600160801b031681565b60008054610b09906139f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b35906139f6565b8015610b825780601f10610b5757610100808354040283529160200191610b82565b820191906000526020600020905b815481529060010190602001808311610b6557829003601f168201915b505050505081565b610ba0336000356001600160e01b031916612de6565b610bc55760405162461bcd60e51b8152600401610bbc90613a31565b60405180910390fd5b600954600160801b90046001600160401b03166001600160801b0382161115610c225760405162461bcd60e51b815260206004820152600f60248201526e57494e444f575f544f4f5f4c4f4e4760881b6044820152606401610bbc565b600980546001600160801b0319166001600160801b03831617905560405133907ff61ebd3c01f656aba479c738a8744215d6f1ec2c19169500f3bff0a9d8374ce190610c6f908490613912565b60405180910390a250565b3360008181526004602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020613e2283398151915290610cc39086815260200190565b60405180910390a35060015b92915050565b6060600f805480602002602001604051908101604052809291908181526020018280548015610d2d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d0f575b5050505050905090565b610d4d336000356001600160e01b031916612de6565b610d695760405162461bcd60e51b8152600401610bbc90613a31565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b90600090a250565b610dc9336000356001600160e01b031916612de6565b610de55760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0381166000908152600d602052604090205460ff16610e1d5760405162461bcd60e51b8152600401610bbc90613a57565b6001600160a01b0381166000908152600d602052604090205461010090046001600160f81b0316610e4c612bfe565b811115610e6357600e80546001600160801b031690555b6001600160a01b0382166000818152600d6020526040808220805460ff169055600c805485900390555133917fe5211b194c7994bf5eba21ddab25713549e67c4c84028d2f28c1377195de0fb991a3610f3433836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610ee2919061385a565b602060405180830381865afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f239190613a83565b6001600160a01b0385169190612ea8565b5050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610f9d576001600160a01b038416600090815260046020908152604080832033845290915281208054849290610f97908490613ab2565b90915550505b6001600160a01b03841660009081526003602052604081208054849290610fc5908490613ab2565b90915550506001600160a01b0380841660008181526003602052604090819020805486019055519091861690600080516020613de28339815191529061100e9086815260200190565b60405180910390a35060019392505050565b8061103d5760405162461bcd60e51b8152600401610bbc90613ac9565b6110793361107461104c61128b565b84907f0000000000000000000000000000000000000000000000000000000000000000612f27565b612f4a565b6040518181523390600080516020613d828339815191529060200160405180910390a26110a63382612fb4565b50565b6110bf336000356001600160e01b031916612de6565b6110db5760405162461bcd60e51b8152600401610bbc90613a31565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d9190613af8565b60ff166012146111a05760405162461bcd60e51b815260206004820152600e60248201526d57524f4e475f444543494d414c5360901b6044820152606401610bbc565b600b805460ff191682151590811790915560405190815233907f6375b140d4463d47b864f1f47e5d2893cc3478e73aedcc268b054fab0230a84190602001610c6f565b60007f0000000000000000000000000000000000000000000000000000000000000000461461121957611214613051565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6000610ccf61124b61128b565b6001600160a01b038416600090815260036020526040902054907f0000000000000000000000000000000000000000000000000000000000000000613100565b600254600090806112bd577f000000000000000000000000000000000000000000000000000000000000000091505090565b6112f1817f00000000000000000000000000000000000000000000000000000000000000006112ea612bfe565b9190612f27565b91505090565b61130d336000356001600160e01b031916612de6565b6113295760405162461bcd60e51b8152600401610bbc90613a31565b600f805460018101825560009182527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b038416908117909155604051909133917fd3c85e764bd8fe5c02e811c9538a4d50d8ffff22143526e00197d3cd0d11178a9190a350565b600e546009546000916001600160401b03600160401b909104811691600160801b90041680820142106113da5760009250505090565b600e54600160801b90046001600160801b0316814284900382028161140157611401613b15565b0490039392505050565b611421336000356001600160e01b031916612de6565b61143d5760405162461bcd60e51b8152600401610bbc90613a31565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b61149d336000356001600160e01b031916612de6565b6114b95760405162461bcd60e51b8152600401610bbc90613a31565b6001600160401b0381166115065760405162461bcd60e51b815260206004820152601460248201527344454c41595f43414e4e4f545f42455f5a45524f60601b6044820152606401610bbc565b6301e13380816001600160401b031611156115545760405162461bcd60e51b815260206004820152600e60248201526d44454c41595f544f4f5f4c4f4e4760901b6044820152606401610bbc565b600954600160801b90046001600160401b03166115af5760098054600160801b600160c01b031916600160801b6001600160401b038416021790556040513390600080516020613d6283398151915290610c6f90849061381d565b600980546001600160c01b0316600160c01b6001600160401b0384160217905560405133907f342b344c0ac2ffff8f84b1d82d8235a2401a0accf4666f1fec4a1c3cdf1d29e790610c6f90849061381d565b611617336000356001600160e01b031916612de6565b6116335760405162461bcd60e51b8152600401610bbc90613a31565b670de0b6b3a764000081111561167a5760405162461bcd60e51b815260206004820152600c60248201526b08c8a8abea89e9ebe90928e960a31b6044820152606401610bbc565b600881905560405181815233907fec370615cc81fb334e5566fbc80664d9082377bf59288d64a79f3fbecf4323a990602001610c6f565b6116c7336000356001600160e01b031916612de6565b6116e35760405162461bcd60e51b8152600401610bbc90613a31565b60105460ff161561172c5760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b6044820152606401610bbc565b6010805460ff191660011790556000600281905560405133917f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e691a2565b611780336000356001600160e01b031916612de6565b61179c5760405162461bcd60e51b8152600401610bbc90613a31565b33ff5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117ee90309060040161385a565b602060405180830381865afa15801561180b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190613a83565b60018054610b09906139f6565b611852336000356001600160e01b031916612de6565b61186e5760405162461bcd60e51b8152600401610bbc90613a31565b6000600f838154811061188357611883613b2b565b600091825260209091200154600f80546001600160a01b0390921692508391859081106118b2576118b2613b2b565b60009182526020918290200180546001600160a01b0319166001600160a01b039384161790556040518581528483169284169133917f4a0a125a0f77451ab4de43b53c0a93266c6e542ceaa7ae0067e4ba66b4ce3a2d91015b60405180910390a4505050565b61192e336000356001600160e01b031916612de6565b61194a5760405162461bcd60e51b8152600401610bbc90613a31565b600f80546000919061195e90600190613ab2565b8154811061196e5761196e613b2b565b600091825260209091200154600f80546001600160a01b039092169250908061199957611999613b41565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038316913391600080516020613da28339815191529190a350565b33600090815260036020526040812080548391908390611a04908490613ab2565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020613de283398151915290610cc39086815260200190565b611a5f336000356001600160e01b031916612de6565b611a7b5760405162461bcd60e51b8152600401610bbc90613a31565b611a87600f8383613600565b50336001600160a01b03167f93fc2f83177365343f59862c6a290117bb3036bca4db453f92d1c6e9163f53848383604051611ac3929190613b57565b60405180910390a25050565b611ae5336000356001600160e01b031916612de6565b611b015760405162461bcd60e51b8152600401610bbc90613a31565b60405181815233907f9493e5bbe4e8e0ac67284469a2d677403d0378a85a59e341d3abc433d0d9a2099060200160405180910390a26110a6303383612ea8565b611b57336000356001600160e01b031916612de6565b611b735760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0382166000908152600d602052604090205460ff16611bab5760405162461bcd60e51b8152600401610bbc90613a57565b80611bc85760405162461bcd60e51b8152600401610bbc90613ac9565b611bd18161311b565b6001600160a01b0383166000908152600d602052604090208054600190611c0790849061010090046001600160f81b0316613ba5565b82546001600160f81b039182166101009390930a928302919092021990911617905550600c805482900390556040518181526001600160a01b038316903390600080516020613dc28339815191529060200160405180910390a360405163852a12e360e01b8152600481018290526001600160a01b0383169063852a12e3906024016020604051808303816000875af1158015611ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccc9190613a83565b15611ce95760405162461bcd60e51b8152600401610bbc90613bcd565b816001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190613bf4565b15610f34577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611dab57600080fd5b505af1158015611dbf573d6000803e3d6000fd5b50505050505050565b80611de55760405162461bcd60e51b8152600401610bbc90613ac9565b611df933611df461104c61128b565b613135565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26110a66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084613187565b611e79336000356001600160e01b031916612de6565b611e955760405162461bcd60e51b8152600401610bbc90613a31565b670de0b6b3a7640000600a541115611ee15760405162461bcd60e51b815260206004820152600f60248201526e0a882a48e8aa8bea89e9ebe90928e9608b1b6044820152606401610bbc565b600a81905560405181815233907f95bc4480b51f4860106d42850bcae222cf3303fb2b7d433e896205e0ebefe36990602001610c6f565b611f2e336000356001600160e01b031916612de6565b611f4a5760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0382166000908152600d602052604090205460ff16611f825760405162461bcd60e51b8152600401610bbc90613a57565b80611f9f5760405162461bcd60e51b8152600401610bbc90613ac9565b80600c6000828254611fb19190613c11565b90915550611fc090508161311b565b6001600160a01b0383166000818152600d60205260409081902080546001600160f81b0361010080830482169096011690940260ff90941693909317909255905133907f49e9138fe0dacf001ea634236e38aa8bd229efd55ec4d7975228d679db6ce8f9906120329085815260200190565b60405180910390a3816001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209c9190613bf4565b1561215657604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561210357600080fd5b505af1158015612117573d6000803e3d6000fd5b50505050816001600160a01b0316631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611dab57600080fd5b61218a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838361321b565b60405163140e25ad60e31b8152600481018290526001600160a01b0383169063a0712d68906024016020604051808303816000875af11580156121d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f59190613a83565b15610f345760405162461bcd60e51b815260206004820152600b60248201526a1352539517d1905253115160aa1b6044820152606401610bbc565b612246336000356001600160e01b031916612de6565b6122625760405162461bcd60e51b8152600401610bbc90613a31565b600f80546000919061227690600190613ab2565b8154811061228657612286613b2b565b6000918252602082200154600f80546001600160a01b03909216935090849081106122b3576122b3613b2b565b600091825260209091200154600f80546001600160a01b0390921692508391859081106122e2576122e2613b2b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600f80548061232157612321613b41565b600082815260209020810160001990810180546001600160a01b03191690550190556040516001600160a01b03838116919083169033907f53bddc0ebb11647d046bd37b2965cd6d82f69c263b0b100658daad9ae79f41d89061190b9088815260200190565b600f818154811061239757600080fd5b6000918252602090912001546001600160a01b0316905081565b6123c7336000356001600160e01b031916612de6565b6123e35760405162461bcd60e51b8152600401610bbc90613a31565b6001600160a01b0381166000818152600d6020526040808220805460ff191690555133917fff8fe190f3935e9e8681ce444b08be824a6be3e5184465ddbd710cc4f1a9f2f291a350565b612443336000356001600160e01b031916612de6565b61245f5760405162461bcd60e51b8152600401610bbc90613a31565b600954600e54612489916001600160401b03600160801b909104811691600160401b900416613c29565b6001600160401b031642106124b857600e80546001600160401b031916426001600160401b0316179055612525565b600954600e546124da916001600160801b0316906001600160401b0316613c54565b6001600160801b03164211156125255760405162461bcd60e51b815260206004820152601060248201526f4241445f484152564553545f54494d4560801b6044820152606401610bbc565b600c54600081815b848110156126aa57600086868381811061254957612549613b2b565b905060200201602081019061255e919061377b565b6001600160a01b0381166000908152600d602052604090205490915060ff166125995760405162461bcd60e51b8152600401610bbc90613a57565b6001600160a01b0381166000818152600d6020526040808220549051633af9e66960e01b81526101009091046001600160f81b03169290633af9e669906125e490309060040161385a565b6020604051808303816000875af1158015612603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126279190613a83565b90506126328161311b565b6001600160a01b0384166000908152600d6020526040902080546001600160f81b03929092166101000260ff909216919091179055816126728287613c11565b61267c9190613ab2565b945081811161268c576000612690565b8181035b8601955050505080806126a290613c76565b91505061252d565b506008546000906126c5908490670de0b6b3a7640000613100565b90506126d630611df461104c61128b565b6126fc81846126e36113a4565b6126ed9190613c11565b6126f79190613ab2565b613293565b600e8054600c8590556001600160401b03428116600160401b02600160401b600160801b03196001600160801b0395909516600160801b029490941691161791909117905560405133907f69e9c71f6799744a94d9897e77c3ed426cc2f92ba0ef3300785368209b6f4b2d906127759089908990613b57565b60405180910390a2600954600160c01b90046001600160401b03168015611dbf57600980546001600160801b0316600160801b6001600160401b038416026001600160c01b03161790556040513390600080516020613d62833981519152906127df90849061381d565b60405180910390a250505050505050565b612806336000356001600160e01b031916612de6565b6128225760405162461bcd60e51b8152600401610bbc90613a31565b6000600f838154811061283757612837613b2b565b6000918252602082200154600f80546001600160a01b039092169350908490811061286457612864613b2b565b600091825260209091200154600f80546001600160a01b03909216925082918690811061289357612893613b2b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600f84815481106128d5576128d5613b2b565b60009182526020918290200180546001600160a01b0319166001600160a01b03938416179055604080518781529182018690528483169284169133917f86d0d8ebf0f4d918d7d5ea876055270042ae67e3ba4af1023531eaf10045b6da910160405180910390a450505050565b4284101561298c5760405162461bcd60e51b815260206004820152601760248201527614115493525517d11150511312539157d1561412549151604a1b6044820152606401610bbc565b60006129966111e3565b6001600160a01b038981166000818152600560209081526040918290208054600181019091558251600080516020613e028339815191528184015280840194909452938c166060840152608083018b905260a083019390935260c08083018a90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612a9d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612ad35750886001600160a01b0316816001600160a01b0316145b612b1a5760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5045524d49545f5349474e415455524560401b6044820152606401610bbc565b6001600160a01b0390811660009081526004602090815260408083208b8516808552908352928190208a905551898152919350918a1691600080516020613e22833981519152910160405180910390a350505050505050565b80612b905760405162461bcd60e51b8152600401610bbc90613ac9565b6000612bc5612b9d61128b565b83907f0000000000000000000000000000000000000000000000000000000000000000613100565b9050612bd13383612f4a565b6040518181523390600080516020613d828339815191529060200160405180910390a2610f343382612fb4565b6000612c086113a4565b600c54039050612c1661179f565b6112149082613c11565b612c36336000356001600160e01b031916612de6565b612c525760405162461bcd60e51b8152600401610bbc90613a31565b806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb49190613bf4565b612d53577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d449190613c91565b6001600160a01b031614612d5a565b600b5460ff165b612d995760405162461bcd60e51b815260206004820152601060248201526f57524f4e475f554e4445524c59494e4760801b6044820152606401610bbc565b6001600160a01b0381166000818152600d6020526040808220805460ff191660011790555133917f2fc1f5b589e399a463bf89605c1539bdd9878a9a3acd089abeca7a15e1fbe6ec91a350565b6007546000906001600160a01b03168015612e8f5760405163b700961360e01b81526001600160a01b0385811660048301523060248301526001600160e01b03198516604483015282169063b700961390606401602060405180830381865afa925050508015612e73575060408051601f3d908101601f19168201909252612e7091810190613bf4565b60015b612e7c57612e8f565b8015612e8d57600192505050610ccf565b505b50506006546001600160a01b0383811691161492915050565b600060405163a9059cbb60e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050612ee3816132a9565b612f215760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610bbc565b50505050565b82810282158415858304841417151715612f4057600080fd5b9190910492915050565b6001600160a01b03821660009081526003602052604081208054839290612f72908490613ab2565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020613de2833981519152906020015b60405180910390a35050565b6000612fbe61179f565b905080821115613018576000612ff3600a54670de0b6b3a764000085612fe2612bfe565b612fec9190613ab2565b9190613100565b905060006130018385613ab2565b90506130156130108383613c11565b6132f0565b50505b61304c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484612ea8565b505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516130839190613cae565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b828202831584820484141761311457600080fd5b0492915050565b60006001600160f81b0382111561313157600080fd5b5090565b80600260008282546131479190613c11565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020613de28339815191529101612fa8565b60006040516323b872dd60e01b81526001600160a01b03851660048201526001600160a01b038416602482015282604482015260008060648360008a5af19150506131d1816132a9565b6132145760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610bbc565b5050505050565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050613256816132a9565b612f215760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610bbc565b60006001600160801b0382111561313157600080fd5b60003d826132bb57806000803e806000fd5b80602081146132d35780156132e457600092506132e9565b816000803e600051151592506132e9565b600192505b5050919050565b600f54819060009061330490600190613ab2565b90505b6000600f828154811061331c5761331c613b2b565b60009182526020808320909101546001600160a01b0316808352600d9091526040909120549091506001600160f81b036101008204169060ff161580613360575080155b156133c457600f80548061337657613376613b41565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416913391600080516020613da28339815191529190a3505061353c565b60006133d085836135e8565b90508082036133de8161311b565b6001600160a01b0385166000818152600d60205260409081902080546001600160f81b03949094166101000260ff90941693909317909255905196839003963390600080516020613dc28339815191529061343c9086815260200190565b60405180910390a360405163852a12e360e01b8152600481018390526001600160a01b0385169063852a12e3906024016020604051808303816000875af115801561348b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134af9190613a83565b156134cc5760405162461bcd60e51b8152600401610bbc90613bcd565b8061352a57600f8054806134e2576134e2613b41565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038616913391600080516020613da28339815191529190a35b50846135385750505061354e565b5050505b8061354681613d4a565b915050613307565b600c805484900390554780158015906135695750600b5460ff165b15612f21577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050505050505050565b60008183106135f757816135f9565b825b9392505050565b828054828255906000526020600020908101928215613653579160200282015b828111156136535781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613620565b506131319291505b80821115613131576000815560010161365b565b600060208083528351808285015260005b8181101561369c57858101830151858201604001528201613680565b818111156136ae576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156136d657600080fd5b81356001600160801b03811681146135f957600080fd5b6001600160a01b03811681146110a657600080fd5b6000806040838503121561371557600080fd5b8235613720816136ed565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561376f5783516001600160a01b03168352928401929184019160010161374a565b50909695505050505050565b60006020828403121561378d57600080fd5b81356135f9816136ed565b6000806000606084860312156137ad57600080fd5b83356137b8816136ed565b925060208401356137c8816136ed565b929592945050506040919091013590565b6000602082840312156137eb57600080fd5b5035919050565b80151581146110a657600080fd5b60006020828403121561381257600080fd5b81356135f9816137f2565b6001600160401b0391909116815260200190565b60006020828403121561384357600080fd5b81356001600160401b03811681146135f957600080fd5b6001600160a01b0391909116815260200190565b6000806040838503121561388157600080fd5b823591506020830135613893816136ed565b809150509250929050565b600080602083850312156138b157600080fd5b82356001600160401b03808211156138c857600080fd5b818501915085601f8301126138dc57600080fd5b8135818111156138eb57600080fd5b8660208260051b850101111561390057600080fd5b60209290920196919550909350505050565b6001600160801b0391909116815260200190565b6000806040838503121561393957600080fd5b50508035926020909101359150565b60ff811681146110a657600080fd5b600080600080600080600060e0888a03121561397257600080fd5b873561397d816136ed565b9650602088013561398d816136ed565b9550604088013594506060880135935060808801356139ab81613948565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156139db57600080fd5b82356139e6816136ed565b91506020830135613893816136ed565b600181811c90821680613a0a57607f821691505b60208210811415613a2b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b602080825260129082015271554e545255535445445f535452415445475960701b604082015260600190565b600060208284031215613a9557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613ac457613ac4613a9c565b500390565b602080825260159082015274414d4f554e545f43414e4e4f545f42455f5a45524f60581b604082015260600190565b600060208284031215613b0a57600080fd5b81516135f981613948565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60208082528181018390526000908460408401835b86811015613b9a578235613b7f816136ed565b6001600160a01b031682529183019190830190600101613b6c565b509695505050505050565b60006001600160f81b0383811690831681811015613bc557613bc5613a9c565b039392505050565b6020808252600d908201526c14915111515357d19052531151609a1b604082015260600190565b600060208284031215613c0657600080fd5b81516135f9816137f2565b60008219821115613c2457613c24613a9c565b500190565b60006001600160401b03828116848216808303821115613c4b57613c4b613a9c565b01949350505050565b60006001600160801b03828116848216808303821115613c4b57613c4b613a9c565b6000600019821415613c8a57613c8a613a9c565b5060010190565b600060208284031215613ca357600080fd5b81516135f9816136ed565b600080835481600182811c915080831680613cca57607f831692505b6020808410821415613cea57634e487b7160e01b86526022600452602486fd5b818015613cfe5760018114613d0f57613d3c565b60ff19861689528489019650613d3c565b60008a81526020902060005b86811015613d345781548b820152908501908301613d1b565b505084890196505b509498975050505050505050565b600081613d5957613d59613a9c565b50600019019056fee893fa207c5a5094cad036347b877c23ebecd9df94ae0426f287040c13220b3f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436457075a8110ddb2863422424e354eb417b3b58b5ebce466afa64f3d894154507e8d851b682e239b1de720e92e5c5cffdb72d353104cc63dc6ed144d7080217fbeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122042a7deba28b061fb75eaa8f9caf203476a792d54db6b9b8eba96bdfd2898289a64736f6c634300080a0033a26469706673582212209c8b3619fdc07d423061df6325e2e13cfe852f20b07043ed5388c155583b092764736f6c634300080a0033",
  "devdoc": {
    "author": "Transmissions11 and JetJadeja",
    "events": {
      "VaultDeployed(address,address)": {
        "params": {
          "underlying": "The underlying token the new Vault accepts.",
          "vault": "The newly deployed Vault contract."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_authority": "The Authority of the factory.",
          "_owner": "The owner of the factory."
        }
      },
      "deployVault(address,uint256)": {
        "details": "This will revert if a Vault that accepts the same underlying token has already been deployed.",
        "params": {
          "id": "We may have different vaults w different credit ratings for the same asset",
          "underlying": "The ERC20 token that the Vault should accept."
        },
        "returns": {
          "vault": "The newly deployed Vault contract which accepts the provided underlying token."
        }
      },
      "getVaultFromUnderlying(address,uint256)": {
        "details": "The Vault returned may not be deployed yet. Use isVaultDeployed to check.",
        "params": {
          "id": "We may have different vaults w different credit ratings for the same asset",
          "underlying": "The ERC20 token that the Vault should accept."
        },
        "returns": {
          "_0": "The address of a Vault which accepts the provided underlying token."
        }
      },
      "isVaultDeployed(address)": {
        "details": "This function is useful to check the return values of getVaultFromUnderlying, as it does not check that the Vault addresses it computes have been deployed yet.",
        "params": {
          "vault": "The address of a Vault which may not have been deployed yet."
        },
        "returns": {
          "_0": "A boolean indicating whether the Vault has been deployed already."
        }
      }
    },
    "title": "Rari Vault Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "VaultDeployed(address,address)": {
        "notice": "Emitted when a new Vault is deployed."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates a Vault factory."
      },
      "deployVault(address,uint256)": {
        "notice": "Deploys a new Vault which supports a specific underlying token."
      },
      "getVaultFromUnderlying(address,uint256)": {
        "notice": "Computes a Vault's address from its accepted underlying token."
      },
      "isVaultDeployed(address)": {
        "notice": "Returns if a Vault at an address has already been deployed."
      }
    },
    "notice": "Factory which enables deploying a Vault for any ERC20 token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9760,
        "contract": "src/vault/VaultFactory.sol:VaultFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9763,
        "contract": "src/vault/VaultFactory.sol:VaultFactory",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Authority)9748"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Authority)9748": {
        "encoding": "inplace",
        "label": "contract Authority",
        "numberOfBytes": "20"
      }
    }
  }
}
