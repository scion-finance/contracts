{
  "language": "Solidity",
  "sources": {
    "src/interfaces/compound/ICompPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./ICTokenInterfaces.sol\";\n\ninterface ICompPriceOracle {\n\tfunction isPriceOracle() external view returns (bool);\n\n\t/**\n\t * @notice Get the underlying price of a cToken asset\n\t * @param cToken The cToken to get the underlying price of\n\t * @return The underlying asset price mantissa (scaled by 1e18).\n\t *  Zero means the price is unavailable.\n\t */\n\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\n}\n"
    },
    "src/interfaces/compound/ICTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./IComptroller.sol\";\nimport \"./InterestRateModel.sol\";\n\ninterface ICTokenStorage {\n\t/**\n\t * @dev Container for borrow balance information\n\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n\t */\n\tstruct BorrowSnapshot {\n\t\tuint256 principal;\n\t\tuint256 interestIndex;\n\t}\n}\n\ninterface ICToken is ICTokenStorage {\n\t/*** Market Events ***/\n\n\t/**\n\t * @dev Event emitted when interest is accrued\n\t */\n\tevent AccrueInterest(\n\t\tuint256 cashPrior,\n\t\tuint256 interestAccumulated,\n\t\tuint256 borrowIndex,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when tokens are minted\n\t */\n\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n\t/**\n\t * @dev Event emitted when tokens are redeemed\n\t */\n\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n\t/**\n\t * @dev Event emitted when underlying is borrowed\n\t */\n\tevent Borrow(\n\t\taddress borrower,\n\t\tuint256 borrowAmount,\n\t\tuint256 accountBorrows,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when a borrow is repaid\n\t */\n\tevent RepayBorrow(\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 accountBorrows,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when a borrow is liquidated\n\t */\n\tevent LiquidateBorrow(\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\taddress cTokenCollateral,\n\t\tuint256 seizeTokens\n\t);\n\n\t/*** Admin Events ***/\n\n\t/**\n\t * @dev Event emitted when pendingAdmin is changed\n\t */\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n\t/**\n\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\n\t */\n\tevent NewAdmin(address oldAdmin, address newAdmin);\n\n\t/**\n\t * @dev Event emitted when comptroller is changed\n\t */\n\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\n\n\t/**\n\t * @dev Event emitted when interestRateModel is changed\n\t */\n\tevent NewMarketInterestRateModel(\n\t\tInterestRateModel oldInterestRateModel,\n\t\tInterestRateModel newInterestRateModel\n\t);\n\n\t/**\n\t * @dev Event emitted when the reserve factor is changed\n\t */\n\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\n\n\t/**\n\t * @dev Event emitted when the reserves are added\n\t */\n\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\n\n\t/**\n\t * @dev Event emitted when the reserves are reduced\n\t */\n\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\n\n\t/**\n\t * @dev EIP20 Transfer event\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\n\n\t/**\n\t * @dev EIP20 Approval event\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\n\n\t/**\n\t * @dev Failure event\n\t */\n\tevent Failure(uint256 error, uint256 info, uint256 detail);\n\n\t/*** User Interface ***/\n\tfunction totalBorrows() external view returns (uint256);\n\n\tfunction totalReserves() external view returns (uint256);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction transfer(address dst, uint256 amount) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\tfunction balanceOfUnderlying(address owner) external returns (uint256);\n\n\tfunction getAccountSnapshot(address account)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\tfunction borrowRatePerBlock() external view returns (uint256);\n\n\tfunction supplyRatePerBlock() external view returns (uint256);\n\n\tfunction totalBorrowsCurrent() external returns (uint256);\n\n\tfunction borrowBalanceCurrent(address account) external returns (uint256);\n\n\tfunction borrowBalanceStored(address account) external view returns (uint256);\n\n\tfunction exchangeRateCurrent() external returns (uint256);\n\n\tfunction exchangeRateStored() external view returns (uint256);\n\n\tfunction getCash() external view returns (uint256);\n\n\tfunction accrueInterest() external returns (uint256);\n\n\tfunction seize(\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external returns (uint256);\n\n\t/*** CCap Interface ***/\n\n\t// ONLY SCREAM\n\tfunction totalCollateralTokens() external view returns (uint256);\n\n\t// ONLY SCREAM\n\tfunction isCollateralTokenInit(address account) external view returns (bool);\n\n\t// ONLY SCREAM\n\tfunction collateralCap() external view returns (uint256);\n\n\t/*** Admin Functions ***/\n\n\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\n\n\tfunction _acceptAdmin() external returns (uint256);\n\n\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\n\n\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\n\n\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\n\n\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\n\t\texternal\n\t\treturns (uint256);\n}\n\ninterface ICTokenErc20 is ICToken {\n\t/*** User Interface ***/\n\n\tfunction mint(uint256 mintAmount) external returns (uint256);\n\n\tfunction redeem(uint256 redeemTokens) external returns (uint256);\n\n\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n\tfunction borrow(uint256 borrowAmount) external returns (uint256);\n\n\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\n\n\tfunction liquidateBorrow(\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tICToken cTokenCollateral\n\t) external returns (uint256);\n\n\t/*** Admin Functions ***/\n\n\tfunction _addReserves(uint256 addAmount) external returns (uint256);\n}\n\ninterface ICTokenBase is ICToken {\n\tfunction repayBorrow() external payable;\n}\n"
    },
    "src/interfaces/compound/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IComptroller {\n\t/*** Assets You Are In ***/\n\n\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n\tfunction exitMarket(address cToken) external returns (uint256);\n\n\t/*** Policy Hooks ***/\n\n\tfunction mintAllowed(\n\t\taddress cToken,\n\t\taddress minter,\n\t\tuint256 mintAmount\n\t) external returns (uint256);\n\n\tfunction mintVerify(\n\t\taddress cToken,\n\t\taddress minter,\n\t\tuint256 mintAmount,\n\t\tuint256 mintTokens\n\t) external;\n\n\tfunction redeemAllowed(\n\t\taddress cToken,\n\t\taddress redeemer,\n\t\tuint256 redeemTokens\n\t) external returns (uint256);\n\n\tfunction redeemVerify(\n\t\taddress cToken,\n\t\taddress redeemer,\n\t\tuint256 redeemAmount,\n\t\tuint256 redeemTokens\n\t) external;\n\n\tfunction borrowAllowed(\n\t\taddress cToken,\n\t\taddress borrower,\n\t\tuint256 borrowAmount\n\t) external returns (uint256);\n\n\tfunction borrowVerify(\n\t\taddress cToken,\n\t\taddress borrower,\n\t\tuint256 borrowAmount\n\t) external;\n\n\tfunction repayBorrowAllowed(\n\t\taddress cToken,\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount\n\t) external returns (uint256);\n\n\tfunction repayBorrowVerify(\n\t\taddress cToken,\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 borrowerIndex\n\t) external;\n\n\tfunction liquidateBorrowAllowed(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount\n\t) external returns (uint256);\n\n\tfunction liquidateBorrowVerify(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 seizeTokens\n\t) external;\n\n\tfunction seizeAllowed(\n\t\taddress cTokenCollateral,\n\t\taddress cTokenBorrowed,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external returns (uint256);\n\n\tfunction seizeVerify(\n\t\taddress cTokenCollateral,\n\t\taddress cTokenBorrowed,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external;\n\n\tfunction transferAllowed(\n\t\taddress cToken,\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 transferTokens\n\t) external returns (uint256);\n\n\tfunction transferVerify(\n\t\taddress cToken,\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 transferTokens\n\t) external;\n\n\tfunction claimComp(address holder) external;\n\n\t/*** Liquidity/Liquidation Calculations ***/\n\n\tfunction liquidateCalculateSeizeTokens(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\tuint256 repayAmount\n\t) external view returns (uint256, uint256);\n}\n\ninterface UnitrollerAdminStorage {\n\t/**\n\t * @notice Administrator for this contract\n\t */\n\t// address external admin;\n\tfunction admin() external view returns (address);\n\n\t/**\n\t * @notice Pending administrator for this contract\n\t */\n\t// address external pendingAdmin;\n\tfunction pendingAdmin() external view returns (address);\n\n\t/**\n\t * @notice Active brains of Unitroller\n\t */\n\t// address external comptrollerImplementation;\n\tfunction comptrollerImplementation() external view returns (address);\n\n\t/**\n\t * @notice Pending brains of Unitroller\n\t */\n\t// address external pendingComptrollerImplementation;\n\tfunction pendingComptrollerImplementation() external view returns (address);\n}\n\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\n\t/**\n\t * @notice Oracle which gives the price of any given asset\n\t */\n\t// PriceOracle external oracle;\n\tfunction oracle() external view returns (address);\n\n\t/**\n\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n\t */\n\t// uint external closeFactorMantissa;\n\tfunction closeFactorMantissa() external view returns (uint256);\n\n\t/**\n\t * @notice Multiplier representing the discount on collateral that a liquidator receives\n\t */\n\t// uint external liquidationIncentiveMantissa;\n\tfunction liquidationIncentiveMantissa() external view returns (uint256);\n\n\t/**\n\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\n\t */\n\t// uint external maxAssets;\n\tfunction maxAssets() external view returns (uint256);\n\n\t/**\n\t * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n\t */\n\t// mapping(address => CToken[]) external accountAssets;\n\t// function accountAssets(address) external view returns (CToken[]);\n}\n\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\n\tenum Version {\n\t\tVANILLA,\n\t\tCOLLATERALCAP,\n\t\tWRAPPEDNATIVE\n\t}\n\n\tstruct Market {\n\t\tbool isListed;\n\t\tuint256 collateralFactorMantissa;\n\t\tmapping(address => bool) accountMembership;\n\t\tbool isComped;\n\t\t// Version version;\n\t}\n\n\t/**\n\t * @notice Official mapping of cTokens -> Market metadata\n\t * @dev Used e.g. to determine if a market is supported\n\t */\n\tmapping(address => Market) public markets;\n\n\t/**\n\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n\t *  Actions which allow users to remove their own assets cannot be paused.\n\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\n\t */\n\t// address external pauseGuardian;\n\t// bool external _mintGuardianPaused;\n\t// bool external _borrowGuardianPaused;\n\t// bool external transferGuardianPaused;\n\t// bool external seizeGuardianPaused;\n\t// mapping(address => bool) external mintGuardianPaused;\n\t// mapping(address => bool) external borrowGuardianPaused;\n}\n\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\n\t// struct CompMarketState {\n\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n\t//     uint224 index;\n\t//     /// @notice The block number the index was last updated at\n\t//     uint32 block;\n\t// }\n\t// /// @notice A list of all markets\n\t// CToken[] external allMarkets;\n\t// /// @notice The rate at which the flywheel distributes COMP, per block\n\t// uint external compRate;\n\t// /// @notice The portion of compRate that each market currently receives\n\t// mapping(address => uint) external compSpeeds;\n\t// /// @notice The COMP market supply state for each market\n\t// mapping(address => CompMarketState) external compSupplyState;\n\t// /// @notice The COMP market borrow state for each market\n\t// mapping(address => CompMarketState) external compBorrowState;\n\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\n\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\n\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\n\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\n\t// /// @notice The COMP accrued but not yet transferred to each user\n\t// mapping(address => uint) external compAccrued;\n}\n\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\n\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n\t// address external borrowCapGuardian;\n\tfunction borrowCapGuardian() external view virtual returns (address);\n\n\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n\t// mapping(address => uint) external borrowCaps;\n\tfunction borrowCaps(address) external view virtual returns (uint256);\n}\n\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\n\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\n\t// address external supplyCapGuardian;\n\tfunction supplyCapGuardian() external view virtual returns (address);\n\n\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\n\t// mapping(address => uint) external supplyCaps;\n\tfunction supplyCaps(address) external view virtual returns (uint256);\n}\n"
    },
    "src/interfaces/compound/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n/**\n * @title Compound's InterestRateModel Interface\n * @author Compound\n */\ninterface InterestRateModel {\n\t/**\n\t * @dev Calculates the current borrow interest rate per block\n\t * @param cash The total amount of cash the market has\n\t * @param borrows The total amount of borrows the market has outstanding\n\t * @param reserves The total amnount of reserves the market has\n\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n\t */\n\tfunction getBorrowRate(\n\t\tuint256 cash,\n\t\tuint256 borrows,\n\t\tuint256 reserves\n\t) external view returns (uint256);\n\n\t/**\n\t * @dev Calculates the current supply interest rate per block\n\t * @param cash The total amount of cash the market has\n\t * @param borrows The total amount of borrows the market has outstanding\n\t * @param reserves The total amnount of reserves the market has\n\t * @param reserveFactorMantissa The current reserve factor the market has\n\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\n\t */\n\tfunction getSupplyRate(\n\t\tuint256 cash,\n\t\tuint256 borrows,\n\t\tuint256 reserves,\n\t\tuint256 reserveFactorMantissa\n\t) external view returns (uint256);\n}\n"
    },
    "src/strategies/modules/Compound.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../../interfaces/compound/ICTokenInterfaces.sol\";\nimport \"../../interfaces/compound/IComptroller.sol\";\nimport \"../../interfaces/compound/ICompPriceOracle.sol\";\nimport \"../../interfaces/compound/IComptroller.sol\";\n\nimport \"../../mixins/ILending.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract Compound is Initializable, ILending {\n\tusing SafeERC20 for IERC20;\n\n\tICTokenErc20 private _cTokenLend;\n\tICTokenErc20 private _cTokenBorrow;\n\n\tIComptroller private _comptroller;\n\tICompPriceOracle private _oracle;\n\n\tuint256 private _safeCollateralRatio; // percentage of max ratio\n\n\tfunction __Compound_init_unchained(\n\t\taddress comptroller_,\n\t\taddress cTokenLend_,\n\t\taddress cTokenBorrow_,\n\t\tuint256 safeCollateralRatio_\n\t) internal initializer {\n\t\t_cTokenLend = ICTokenErc20(cTokenLend_);\n\t\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\n\t\t_comptroller = IComptroller(comptroller_);\n\t\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\n\t\t_safeCollateralRatio = safeCollateralRatio_;\n\t\t_enterMarket();\n\t}\n\n\tfunction _addLendingApprovals() internal override {\n\t\t// ensure USDC approval - assume we trust USDC\n\t\tunderlying().safeApprove(address(_cTokenLend), type(uint256).max);\n\t}\n\n\tfunction safeCollateralRatio() public view override returns (uint256) {\n\t\treturn _safeCollateralRatio;\n\t}\n\n\tfunction oracle() public view returns (ICompPriceOracle) {\n\t\treturn _oracle;\n\t}\n\n\tfunction comptroller() public view returns (IComptroller) {\n\t\treturn _comptroller;\n\t}\n\n\tfunction _enterMarket() internal {\n\t\taddress[] memory cTokens = new address[](1);\n\t\tcTokens[0] = address(_cTokenLend);\n\t\t_comptroller.enterMarkets(cTokens);\n\t}\n\n\tfunction _getCollateralFactor() internal view override returns (uint256) {\n\t\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(_comptroller))\n\t\t\t.markets(address(_cTokenLend));\n\t\treturn collateralFactorMantissa;\n\t}\n\n\tfunction _redeem(uint256 amount) internal override {\n\t\tuint256 err = _cTokenLend.redeemUnderlying(amount);\n\t\t// if (err != 0) console.log(\"Compund: error redeeming underlying\");\n\t\t// require(err == 0, \"Compund: error redeeming underlying\");\n\t}\n\n\tfunction _borrow(uint256 amount) internal override {\n\t\t_cTokenBorrow.borrow(amount);\n\n\t\t// hook in case we need to wrap any tokens\n\t\t_postBorrowHook(amount);\n\t}\n\n\tfunction _lend(uint256 amount) internal override {\n\t\t_cTokenLend.mint(amount);\n\t}\n\n\tfunction _repay(uint256 amount) internal override {\n\t\t_preRepayHook(amount);\n\t\tICTokenBase(address(_cTokenBorrow)).repayBorrow{ value: amount }();\n\t}\n\n\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\n\t\treturn _cTokenLend.balanceOfUnderlying(address(this));\n\t}\n\n\tfunction _getCollateralBalance() internal view override returns (uint256) {\n\t\tuint256 b = _cTokenLend.balanceOf(address(this));\n\t\treturn (b * _cTokenLend.exchangeRateStored()) / 1e18;\n\t}\n\n\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\n\t\treturn _cTokenBorrow.borrowBalanceCurrent(address(this));\n\t}\n\n\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\n\t\tshortBorrow = _cTokenBorrow.borrowBalanceStored(address(this));\n\t}\n\n\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\n\t\treturn\n\t\t\t(amount * _oracle.getUnderlyingPrice(address(_cTokenBorrow))) /\n\t\t\t_oracle.getUnderlyingPrice(address(_cTokenLend));\n\t}\n\n\tfunction _oraclePriceOfWant(uint256 amount) internal view override returns (uint256) {\n\t\treturn\n\t\t\t(amount * _oracle.getUnderlyingPrice(address(_cTokenLend))) /\n\t\t\t_oracle.getUnderlyingPrice(address(_cTokenBorrow));\n\t}\n\n\t// default hook\n\tfunction _postBorrowHook(uint256 borrow) internal virtual {}\n\n\tfunction _preRepayHook(uint256 borrow) internal virtual {}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/mixins/ILending.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./IBase.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract ILending is IBase {\n\tfunction _addLendingApprovals() internal virtual;\n\n\tfunction _getCollateralBalance() internal view virtual returns (uint256);\n\n\tfunction _getBorrowBalance() internal view virtual returns (uint256);\n\n\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\n\n\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\n\n\tfunction _getCollateralFactor() internal view virtual returns (uint256);\n\n\tfunction safeCollateralRatio() public view virtual returns (uint256);\n\n\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\n\n\tfunction _oraclePriceOfWant(uint256 amount) internal view virtual returns (uint256);\n\n\tfunction _lend(uint256 amount) internal virtual;\n\n\tfunction _redeem(uint256 amount) internal virtual;\n\n\tfunction _borrow(uint256 amount) internal virtual;\n\n\tfunction _repay(uint256 amount) internal virtual;\n\n\tfunction _harvestLending(uint256 minHarvest) internal virtual returns (uint256);\n\n\tfunction _pendingLendingHarvest() internal virtual returns (uint256);\n\n\tfunction getCollateralRatio() public view returns (uint256) {\n\t\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\n\t}\n\n\tfunction _adjustCollateral(uint256 targetCollateral)\n\t\tinternal\n\t\treturns (uint256 added, uint256 removed)\n\t{\n\t\tuint256 collateralBalance = _getCollateralBalance();\n\t\tif (collateralBalance == targetCollateral) return (0, 0);\n\t\t(added, removed) = collateralBalance > targetCollateral\n\t\t\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\n\t\t\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\n\t}\n\n\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\n\t\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\n\t\tuint256 collateral = _getCollateralBalance();\n\n\t\t// stay within 5% of the liquidation threshold\n\t\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 95;\n\t\tif (minCollateral > collateral) return 0;\n\n\t\tuint256 maxRemove = collateral - minCollateral;\n\t\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\n\t\t_redeem(removed);\n\t}\n\n\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\n\t\tuint256 wantBalance = underlying().balanceOf(address(this));\n\t\tadded = wantBalance > amountToAdd ? amountToAdd : wantBalance;\n\t\tif (added != 0) _lend(added);\n\t}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "src/mixins/IBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// all interfaces need to inherit from base\nabstract contract IBase {\n\tfunction short() public view virtual returns (IERC20);\n\n\tfunction underlying() public view virtual returns (IERC20);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/strategies/USDCavaxPNGqi.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./HedgedLP.sol\";\nimport \"./modules/Compound.sol\";\nimport \"./modules/FarmableUniLp.sol\";\nimport \"./modules/BenqiFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract USDCavaxPNGqi is Initializable, HedgedLP, Compound, BenqiFarm, FarmableUniLp {\n\tuint256[200] private _gap;\n\n\tstruct Config {\n\t\taddress underlying;\n\t\taddress short;\n\t\taddress cTokenLend;\n\t\taddress cTokenBorrow;\n\t\taddress uniPair;\n\t\taddress uniFarm;\n\t\taddress farmLp;\n\t\taddress farmToken;\n\t\tuint256 farmId;\n\t\taddress router;\n\t\taddress comptroller;\n\t\taddress benqiPair;\n\t\taddress benqiToken;\n\t\tuint256 safeCollateralRatio;\n\t\taddress vault;\n\t\tstring symbol;\n\t\tstring name;\n\t}\n\n\t// @custom:oz-upgrades-unsafe-allow constructor\n\t// constructor() initializer {}\n\n\tfunction initialize(Config memory config) public initializer {\n\t\t__FarmableUniLp_init_unchained(\n\t\t\tconfig.uniPair,\n\t\t\tconfig.uniFarm,\n\t\t\tconfig.farmLp,\n\t\t\tconfig.farmToken,\n\t\t\tconfig.farmId\n\t\t);\n\t\t__Compound_init_unchained(\n\t\t\tconfig.comptroller,\n\t\t\tconfig.cTokenLend,\n\t\t\tconfig.cTokenBorrow,\n\t\t\tconfig.safeCollateralRatio\n\t\t);\n\t\t__BenqiFarm_init_unchained(config.comptroller, config.benqiPair, config.benqiToken);\n\n\t\t__BaseStrategy_init(config.vault, config.symbol, config.name);\n\n\t\t// main strategy  should allways be intialized last\n\t\t__HedgedLP_init_unchained(config.underlying, config.short);\n\n\t\t// TODO should this be a separate admin func?\n\t\t// TODO revoke aprovals methods?\n\t\t_addLendingApprovals();\n\t\t_addFarmApprovals();\n\t}\n\n\treceive() external payable {}\n\n\t// required implementations: hooks\n\tfunction _postBorrowHook(uint256 amount) internal override(Compound) {\n\t\t// wrap avax\n\t\tIWETH(address(short())).deposit{ value: amount }();\n\t}\n\n\tfunction _preRepayHook(uint256 amount) internal override(Compound) {\n\t\t// wrap avax\n\t\tIWETH(address(short())).withdraw(amount);\n\t}\n}\n"
    },
    "src/strategies/HedgedLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../mixins/ILending.sol\";\nimport \"../mixins/IFarmable.sol\";\nimport \"../mixins/IUniLp.sol\";\nimport \"../mixins/IBase.sol\";\nimport \"../mixins/ISwappable.sol\";\nimport \"./BaseStrategy.sol\";\nimport \"../interfaces/uniswap/IWETH.sol\";\n\nimport \"hardhat/console.sol\";\n\n// @custom: alphabetize dependencies to avoid linearization conflicts\nabstract contract HedgedLP is\n\tInitializable,\n\tBaseStrategy,\n\tIBase,\n\tIFarmable,\n\tILending,\n\tISwappable,\n\tIUniLp\n{\n\tusing SafeERC20 for IERC20;\n\n\tuint256 private _maxPriceMismatch;\n\n\tmodifier checkPrice() {\n\t\tuint256 minPrice = _quote(1e18, address(_short), address(_underlying));\n\t\tuint256 maxPrice = _oraclePriceOfShort(1e18);\n\t\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\n\t\trequire(\n\t\t\t((maxPrice - minPrice) * BPS_ADJUST) / maxPrice < _maxPriceMismatch,\n\t\t\t\"HedgedLP: SHORT_PRICE_MISMATCH\"\n\t\t);\n\t\t_;\n\t}\n\n\tIERC20 private _underlying;\n\tIERC20 private _short;\n\n\tuint256 _minLendHarvest; // don't harvest until we have this balance\n\tuint16 public rebalanceThreshold; // 4% of lp\n\n\tfunction __HedgedLP_init_unchained(address underlying_, address short_) internal initializer {\n\t\t_underlying = IERC20(underlying_);\n\t\t_short = IERC20(short_);\n\n\t\t_underlying.safeApprove(address(this), type(uint256).max);\n\n\t\t// init params\n\t\t_maxPriceMismatch = 60; // .6% based on uniswap .6% bid-ask spread\n\t\trebalanceThreshold = 400;\n\t\t_minLendHarvest = 20 * 1e6;\n\t}\n\n\tfunction updateParams(\n\t\tuint256 minLendHarvest_,\n\t\tuint256 maxPriceMismatch_,\n\t\tuint16 rebalanceThreshold_\n\t) public onlyOwner {\n\t\t_minLendHarvest = minLendHarvest_;\n\t\t_maxPriceMismatch = maxPriceMismatch_;\n\t\trebalanceThreshold = rebalanceThreshold_;\n\t}\n\n\t// PUBLIC METHODS\n\n\tfunction short() public view override returns (IERC20) {\n\t\treturn _short;\n\t}\n\n\tfunction underlying() public view override returns (IERC20) {\n\t\treturn _underlying;\n\t}\n\n\t// assets are deposited but rebalance needs to be called before assets are deployed\n\t// should rebalance here\n\tfunction _deposit(uint256 amount)\n\t\tinternal\n\t\toverride\n\t\tcheckPrice\n\t\tnonReentrant\n\t\treturns (uint256 newShares)\n\t{\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tnewShares = totalSupply() == 0 ? amount : (totalSupply() * amount) / tvl;\n\t\t_underlying.transferFrom(vault(), address(this), amount);\n\t\t_increasePosition(amount);\n\t\temit Deposit(msg.sender, amount);\n\t}\n\n\tfunction _withdraw(uint256 amount)\n\t\tinternal\n\t\toverride\n\t\tonlyVault\n\t\tcheckPrice\n\t\tnonReentrant\n\t\treturns (uint256 burnShares)\n\t{\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tuint256 reserves = _underlying.balanceOf(address(this));\n\t\tuint256 balance = balanceOfUnderlying();\n\n\t\t// if we can not withdraw straight out of reserves\n\t\tif (reserves < amount) {\n\t\t\t// add 1% to withdraw amount for tx fees etc\n\t\t\tuint256 withdrawAmnt = (amount * 101) / 100;\n\n\t\t\tif (withdrawAmnt >= balance) {\n\t\t\t\tconsole.log(\"close\", amount, balance);\n\t\t\t\t// decrease current position\n\t\t\t\t_closePosition();\n\t\t\t\twithdrawAmnt = _underlying.balanceOf(address(this));\n\t\t\t} else withdrawAmnt = _decreasePosition(withdrawAmnt - reserves) + reserves;\n\t\t\t// use the minimum of the two\n\t\t\tamount = min(withdrawAmnt, amount);\n\t\t}\n\t\tburnShares = (amount * totalSupply()) / tvl;\n\t\t_underlying.safeTransferFrom(address(this), vault(), amount);\n\t\temit Withdraw(msg.sender, amount);\n\t}\n\n\t// decreases position based on current desired balance\n\t// ** does not rebalance remaining portfolio\n\t// ** may return slighly less then desired amount\n\t// ** make sure to update lending positions before calling this\n\tfunction _decreasePosition(uint256 amount) internal returns (uint256) {\n\t\tuint256 removeLpAmnt = _totalToLp(amount);\n\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\n\t\tuint256 shortPosition = _getBorrowBalance();\n\n\t\t// remove lp\n\t\t(uint256 underlyingBalance, uint256 shortBalance) = _decreaseLpTo(\n\t\t\tunderlyingLp - removeLpAmnt\n\t\t);\n\n\t\tuint256 repayAmnt = shortBalance;\n\n\t\tif (shortPosition < shortBalance) {\n\t\t\t// this means we are closing the short position\n\t\t\tunderlyingBalance += _swapExactTokensForTokens(\n\t\t\t\tpair(),\n\t\t\t\tshortBalance - shortPosition,\n\t\t\t\taddress(_short),\n\t\t\t\taddress(_underlying)\n\t\t\t);\n\t\t\trepayAmnt = shortPosition;\n\t\t}\n\t\t_repay(repayAmnt);\n\n\t\t// this might remove less collateral than desired if we hit the limit\n\t\t// this happens when position is close to empty\n\t\tuint256 removed = _removeCollateral(amount - underlyingBalance);\n\t\treturn underlyingBalance + removed;\n\t}\n\n\t// increases the position based on current desired balance\n\t// ** does not rebalance remaining portfolio\n\tfunction _increasePosition(uint256 amount) internal {\n\t\tuint256 amntWant = _totalToLp(amount);\n\t\tuint256 amntShort = _quote(amntWant, address(_underlying), address(_short));\n\t\t_lend(amount - amntWant);\n\t\t_borrow(amntShort);\n\t\tuint256 liquidity = _addLiquidity(amntWant, amntShort);\n\t\t_depositIntoFarm(liquidity);\n\t}\n\n\tfunction _harvestInternal()\n\t\tinternal\n\t\toverride\n\t\tcheckPrice\n\t\tnonReentrant\n\t\treturns (uint256 harvested)\n\t{\n\t\tharvested += _harvestLending(_minLendHarvest);\n\t\tharvested += _harvestFarm();\n\t\tuint256 balance = _underlying.balanceOf(address(this));\n\t\tif (balance > 0) _increasePosition(_underlying.balanceOf(address(this)));\n\t}\n\n\t// MANAGER + OWNER METHODS\n\t// TODO rebalance can be public eventually\n\tfunction rebalance() public onlyAuth checkPrice nonReentrant {\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tuint256 targetWantLP = _totalToLp(tvl);\n\n\t\t(bool needsRebalance, bool shouldIncrease, uint256 positionOffset) = _shouldRebalance(\n\t\t\ttargetWantLP,\n\t\t\tunderlyingLp\n\t\t);\n\t\trequire(needsRebalance); // maybe next time...\n\n\t\tuint256 targetCollateral = tvl - targetWantLP;\n\n\t\tif (shouldIncrease)\n\t\t\t// this means lp is low - short price went down\n\t\t\t// most of the time we should not have to remove collateral\n\t\t\t_rebalanceUp(targetWantLP, targetCollateral);\n\t\t\t// this means lp is too high - short price went up\n\t\telse _rebalanceDown(targetWantLP, targetCollateral);\n\t\temit Rebalance(_shortToWant(1e18), positionOffset, tvl);\n\t}\n\n\tfunction closePosition() external onlyAuth {\n\t\t_closePosition();\n\t}\n\n\tfunction _closePosition() internal {\n\t\t_decreaseLpTo(0);\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 shortBalance = _short.balanceOf(address(this));\n\t\tif (shortPosition > shortBalance) {\n\t\t\tuint256 adjustShort = shortPosition - shortBalance;\n\t\t\t_swapTokensForExactTokens(pair(), adjustShort, address(_underlying), address(_short));\n\t\t} else if (shortBalance > shortPosition) {\n\t\t\tuint256 adjustShort = shortBalance - shortPosition;\n\t\t\t_swapExactTokensForTokens(pair(), adjustShort, address(_short), address(_underlying));\n\t\t}\n\t\t_repay(_short.balanceOf(address(this)));\n\n\t\tuint256 collateralBalance = _updateAndGetCollateralBalance();\n\t\t_redeem(collateralBalance);\n\t}\n\n\tfunction _shouldRebalance(uint256 targetWantLP, uint256 underlyingLp)\n\t\tinternal\n\t\tview\n\t\treturns (\n\t\t\tbool needsRebalance,\n\t\t\tbool shouldIncrease,\n\t\t\tuint256 positionOffset\n\t\t)\n\t{\n\t\tshouldIncrease = targetWantLP > underlyingLp ? true : false;\n\t\tif (underlyingLp == 0 || targetWantLP == 0)\n\t\t\treturn (underlyingLp != targetWantLP, shouldIncrease, positionOffset);\n\n\t\tuint256 shortPosition = _getBorrowBalance();\n\n\t\t// this is the % by which our position has moved from beeing balanced\n\t\tpositionOffset = shouldIncrease\n\t\t\t? ((targetWantLP - underlyingLp) * BPS_ADJUST) / underlyingLp\n\t\t\t: ((underlyingLp - targetWantLP) * BPS_ADJUST) / targetWantLP;\n\n\t\t// don't rebalance unless\n\t\tneedsRebalance =\n\t\t\tpositionOffset > rebalanceThreshold ||\n\t\t\t_underlying.balanceOf(address(this)) > 10e6 ||\n\t\t\tshortPosition == 0;\n\t}\n\n\t// TODO handle case for when lp is not 100% in farm?\n\tfunction _decreaseLpTo(uint256 targetWantLP)\n\t\tinternal\n\t\treturns (uint256 underlyingRemove, uint256 shortRemove)\n\t{\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tuint256 liquidity = _getLiquidity();\n\t\tuint256 underlyingLiquidity = (liquidity * targetWantLP) / underlyingLp;\n\t\tuint256 removeLp = liquidity - underlyingLiquidity;\n\t\t_withdrawFromFarm(removeLp);\n\t\treturn _removeLiquidity(removeLp);\n\t}\n\n\t// remove collateral (short price moved down so target collateral is lower)\n\t// borrow short\n\t// sell extra short\n\t// add lp\n\tfunction _rebalanceUp(uint256 targetWantLP, uint256 targetCollateral) internal {\n\t\t_adjustCollateral(targetCollateral);\n\n\t\t// borrow\n\t\tuint256 targetShortPosition = _underlyingToShort(targetWantLP);\n\t\tuint256 shortPosition = _getBorrowBalance();\n\n\t\t_borrow(targetShortPosition - shortPosition);\n\n\t\t// sell extra short\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\n\t\tuint256 buyWant = targetWantLP - (_underlying.balanceOf(address(this)) + underlyingLp);\n\t\tif (buyWant > 0)\n\t\t\t_swapTokensForExactTokens(pair(), buyWant, address(_short), address(_underlying));\n\n\t\t// we will have more underlying tokens as a result of the tx fees\n\t\t// so we use short balance to compute final lp amounts\n\t\tuint256 amntShort = _short.balanceOf(address(this));\n\t\tuint256 amntWant = _shortToWant(amntShort);\n\t\tuint256 balWant = _underlying.balanceOf(address(this));\n\t\tif (balWant < amntWant) {\n\t\t\tamntWant = balWant;\n\t\t\tamntShort = _underlyingToShort(amntWant);\n\t\t}\n\n\t\t// add liquidity\n\t\tuint256 liquidity = _addLiquidity(amntWant, amntShort);\n\n\t\t// ape into farm\n\t\t_depositIntoFarm(liquidity);\n\n\t\t// TODO - might have leftover underlying tokens here\n\t}\n\n\t// remove lp\n\t// return borrow\n\t// remove collateral\n\t// buy back extra short\n\t// return extra short borrow\n\tfunction _rebalanceDown(uint256 targetWantLP, uint256 targetCollateral) internal {\n\t\tif (targetWantLP == 0) return _closePosition();\n\n\t\t// remove lp\n\t\t_decreaseLpTo(targetWantLP);\n\n\t\tuint256 shortBalance = _short.balanceOf(address(this));\n\t\t_repay(shortBalance);\n\n\t\t// if we're already over collateral threshold we may not have enought to buy back\n\t\t// full amount of short tokens\n\t\t(, uint256 removed) = _adjustCollateral(targetCollateral);\n\n\t\t// if we're withdrawing we may end up with extra $$\n\t\t// do the check here\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 adjustBorrow = shortPosition - _underlyingToShort(targetWantLP);\n\n\t\tif (adjustBorrow == 0) return;\n\n\t\tuint256 underlyingIn = UniUtils._getAmountIn(\n\t\t\tpair(),\n\t\t\tadjustBorrow,\n\t\t\taddress(_underlying),\n\t\t\taddress(_short)\n\t\t);\n\t\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\n\t\tuint256 sellShort = underlyingIn < underlyingBalance ? underlyingIn : underlyingBalance;\n\t\t_swapExactTokensForTokens(pair(), sellShort, address(_underlying), address(_short));\n\n\t\tshortBalance = _short.balanceOf(address(this));\n\t\t// return borrow\n\t\t_repay(shortBalance);\n\t\tif (targetCollateral > removed) _adjustCollateral(targetCollateral);\n\t}\n\n\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\n\t\tuint256 cRatio = getCollateralRatio();\n\t\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\n\t}\n\n\t// TODO should we compute pending farm & lending rewards here?\n\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\n\t\tuint256 collateralBalance = _updateAndGetCollateralBalance();\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 shortBalance = _shortToWant(shortPosition);\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\n\t\ttvl = collateralBalance + underlyingLp * 2 - shortBalance + underlyingBalance;\n\t}\n\n\tfunction balanceOfUnderlying() public view override returns (uint256 assets) {\n\t\t(assets, , , , , ) = getTVL();\n\t}\n\n\t// VIEW\n\tfunction getTVL()\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint256 tvl,\n\t\t\tuint256 collateralBalance,\n\t\t\tuint256 shortPosition,\n\t\t\tuint256 shortBalance,\n\t\t\tuint256 lpBalance,\n\t\t\tuint256 underlyingBalance\n\t\t)\n\t{\n\t\tcollateralBalance = _getCollateralBalance();\n\t\tshortPosition = _getBorrowBalance();\n\t\t// shortBalance is the short position denominated in underlying tokens\n\t\tshortBalance = _shortToWant(shortPosition);\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tlpBalance = underlyingLp * 2;\n\t\tunderlyingBalance = _underlying.balanceOf(address(this));\n\n\t\ttvl = collateralBalance + lpBalance - shortBalance + underlyingBalance;\n\t}\n\n\tfunction _shortToWant(uint256 amount) internal view returns (uint256) {\n\t\tif (amount == 0) return 0;\n\t\t// lending oracle price\n\t\t// return _oraclePriceOfShort(amount);\n\n\t\t// uni price\n\t\treturn _quote(amount, address(_short), address(_underlying));\n\t}\n\n\tfunction _underlyingToShort(uint256 amount) internal view returns (uint256) {\n\t\tif (amount == 0) return 0;\n\t\t// lending oracle price\n\t\t// return _oraclePriceOfWant(amount);\n\n\t\t// uni price\n\t\treturn _quote(amount, address(_underlying), address(_short));\n\t}\n\n\t/**\n\t * @dev Returns the smallest of two numbers.\n\t */\n\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn a < b ? a : b;\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/strategies/modules/FarmableUniLp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { IMiniChefV2 } from \"../../interfaces/uniswap/IStakingRewards.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\n\nimport \"../../mixins/IFarmable.sol\";\nimport \"../../mixins/ISwappable.sol\";\nimport \"../../mixins/IUniLp.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract FarmableUniLp is Initializable, IFarmable, ISwappable, IUniLp {\n\tusing SafeERC20 for IERC20;\n\n\tIMiniChefV2 private _farm;\n\tIUniswapV2Pair private _farmLp;\n\tIERC20 private _farmToken;\n\tIUniswapV2Pair private _pair;\n\tuint256 private _farmId;\n\n\tfunction __FarmableUniLp_init_unchained(\n\t\taddress pair_,\n\t\taddress farm_,\n\t\taddress farmLp_,\n\t\taddress farmToken_,\n\t\tuint256 farmPid_\n\t) internal initializer {\n\t\t_farm = IMiniChefV2(farm_);\n\t\t_farmLp = IUniswapV2Pair(farmLp_);\n\t\t_farmToken = IERC20(farmToken_);\n\t\t_pair = IUniswapV2Pair(pair_);\n\t\t_farmId = farmPid_;\n\t}\n\n\tfunction _addFarmApprovals() internal {\n\t\t// farm approvals\n\t\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\n\t}\n\n\tfunction pair() public view override returns (IUniswapV2Pair) {\n\t\treturn _pair;\n\t}\n\n\tfunction _withdrawFromFarm(uint256 amount) internal override {\n\t\t_farm.withdraw(_farmId, amount, address(this));\n\t}\n\n\tfunction _depositIntoFarm(uint256 amount) internal override {\n\t\t_farm.deposit(_farmId, amount, address(this));\n\t}\n\n\tfunction _harvestFarm() internal override returns (uint256 harvested) {\n\t\t_farm.harvest(_farmId, address(this));\n\t\tuint256 farmTokenBalance = _farmToken.balanceOf(address(this));\n\t\tif (farmTokenBalance == 0) return harvested;\n\t\tharvested = _swapExactTokensForTokens(\n\t\t\t_farmLp,\n\t\t\tfarmTokenBalance,\n\t\t\taddress(_farmToken),\n\t\t\taddress(underlying())\n\t\t);\n\t}\n\n\tfunction _getFarmLp() internal view override returns (uint256) {\n\t\t(uint256 lp, ) = _farm.userInfo(_farmId, address(this));\n\t\treturn lp;\n\t}\n\n\tfunction _getLiquidity() internal view override returns (uint256) {\n\t\tuint256 farmLp = _getFarmLp();\n\t\tuint256 poolLp = _pair.balanceOf(address(this));\n\t\treturn farmLp + poolLp;\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/strategies/modules/BenqiFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../../interfaces/forks/IBenqiComptroller.sol\";\nimport \"../../mixins/ISwappable.sol\";\nimport \"../../mixins/IUniLp.sol\";\nimport \"../../mixins/ILending.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../../interfaces/uniswap/IWETH.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract BenqiFarm is Initializable, ILending, ISwappable, IUniLp {\n\tIBenqiComptroller _comptroller;\n\tIERC20 _qi;\n\tIUniswapV2Pair private _qiAvaxPair;\n\n\tfunction __BenqiFarm_init_unchained(\n\t\taddress comptroller_,\n\t\taddress pair_,\n\t\taddress token_\n\t) internal initializer {\n\t\t_comptroller = IBenqiComptroller(comptroller_);\n\t\t_qiAvaxPair = IUniswapV2Pair(pair_);\n\t\t_qi = IERC20(token_);\n\t}\n\n\tfunction _pendingLendingHarvest() internal view override returns (uint256 pendingWant) {\n\t\tuint256 pendingQi = _comptroller.rewardAccrued(0, address(this));\n\n\t\tuint256 pendingShort = pendingQi == 0\n\t\t\t? 0\n\t\t\t: UniUtils._getAmountOut(_qiAvaxPair, pendingQi, address(_qi), address(short()));\n\t\tpendingShort += _comptroller.rewardAccrued(1, address(this));\n\t\tpendingWant = pendingShort == 0\n\t\t\t? 0\n\t\t\t: UniUtils._getAmountOut(pair(), pendingShort, address(short()), address(underlying()));\n\t}\n\n\tfunction _harvestLending(uint256 minHarvest) internal override returns (uint256 harvested) {\n\t\tuint256 pending = _pendingLendingHarvest();\n\t\tif (pending < minHarvest) return harvested;\n\n\t\t// qi rewards\n\t\t_comptroller.claimReward(0, payable(address(this)));\n\t\tuint256 farmTokenBalance = _qi.balanceOf(address(this));\n\n\t\tif (farmTokenBalance > 0) {\n\t\t\t// qi - wavax pair is the most liquid\n\t\t\t_swapExactTokensForTokens(\n\t\t\t\t_qiAvaxPair,\n\t\t\t\tfarmTokenBalance,\n\t\t\t\taddress(_qi),\n\t\t\t\taddress(short())\n\t\t\t);\n\t\t}\n\n\t\t// avax rewards\n\t\t_comptroller.claimReward(1, payable(address(this)));\n\t\tuint256 avaxBalance = address(this).balance;\n\t\tif (avaxBalance == 0) return harvested;\n\n\t\tIWETH(address(short())).deposit{ value: avaxBalance }();\n\t\tharvested = _swapExactTokensForTokens(\n\t\t\tpair(),\n\t\t\tavaxBalance,\n\t\t\taddress(short()),\n\t\t\taddress(underlying())\n\t\t);\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/mixins/IFarmable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./IBase.sol\";\n\nabstract contract IFarmable is IBase {\n\tfunction _depositIntoFarm(uint256 amount) internal virtual;\n\n\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\n\n\tfunction _harvestFarm() internal virtual returns (uint256);\n\n\tfunction _getFarmLp() internal view virtual returns (uint256);\n}\n"
    },
    "src/mixins/IUniLp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../libraries/UniUtils.sol\";\n\nimport \"./IBase.sol\";\nimport \"./ILp.sol\";\n\nabstract contract IUniLp is IBase, ILp {\n\tusing SafeERC20 for IERC20;\n\n\tfunction pair() public view virtual returns (IUniswapV2Pair);\n\n\tfunction _getLiquidity() internal view virtual returns (uint256);\n\n\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\n\t\tinternal\n\t\toverride\n\t\treturns (uint256 liquidity)\n\t{\n\t\tunderlying().safeTransfer(address(pair()), amountToken0);\n\t\tshort().safeTransfer(address(pair()), amountToken1);\n\t\tliquidity = pair().mint(address(this));\n\t}\n\n\tfunction _removeLiquidity(uint256 liquidity) internal override returns (uint256, uint256) {\n\t\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\n\t\t(address tokenA, ) = UniUtils._sortTokens(address(underlying()), address(short()));\n\t\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\n\t\treturn\n\t\t\ttokenA == address(underlying())\n\t\t\t\t? (amountToken0, amountToken1)\n\t\t\t\t: (amountToken1, amountToken0);\n\t}\n\n\tfunction _quote(\n\t\tuint256 amount,\n\t\taddress token0,\n\t\taddress token1\n\t) internal view override returns (uint256 price) {\n\t\tif (amount == 0) return 0;\n\t\t(uint256 reserve0, uint256 reserve1) = UniUtils._getPairReserves(pair(), token0, token1);\n\t\tprice = UniUtils._quote(amount, reserve0, reserve1);\n\t}\n\n\t// fetches and sorts the reserves for a uniswap pair\n\tfunction _getWantShortReserves() internal view returns (uint256 reserveA, uint256 reserveB) {\n\t\t(reserveA, reserveB) = UniUtils._getPairReserves(\n\t\t\tpair(),\n\t\t\taddress(underlying()),\n\t\t\taddress(short())\n\t\t);\n\t}\n\n\tfunction _getLPBalances()\n\t\tinternal\n\t\tview\n\t\toverride\n\t\treturns (uint256 wantBalance, uint256 shortBalance)\n\t{\n\t\tuint256 totalLp = _getLiquidity();\n\t\t(uint256 totalWantBalance, uint256 totalShortBalance) = _getWantShortReserves();\n\t\tuint256 total = pair().totalSupply();\n\t\twantBalance = (totalWantBalance * totalLp) / total;\n\t\tshortBalance = (totalShortBalance * totalLp) / total;\n\t}\n}\n"
    },
    "src/mixins/ISwappable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/uniswap/IStakingRewards.sol\";\nimport \"../libraries/UniUtils.sol\";\n\nabstract contract ISwappable {\n\tusing SafeERC20 for IERC20;\n\n\t// TODO custom swap method requires custom price match check!\n\t// TODO in the future this should use the optimal path determined externally & router\n\t// using https://docs.uniswap.org/sdk/2.0.0/reference/trade#besttradeexactin\n\tfunction _swapExactTokensForTokens(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountIn,\n\t\taddress inToken,\n\t\taddress outToken\n\t) public returns (uint256) {\n\t\tuint256 amountOut = UniUtils._getAmountOut(pair, amountIn, inToken, outToken);\n\t\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\n\t\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\n\t\t\t? (uint256(0), amountOut)\n\t\t\t: (amountOut, uint256(0));\n\n\t\tIERC20(inToken).safeTransfer(address(pair), amountIn);\n\t\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n\t\treturn amountOut;\n\t}\n\n\tfunction _swapTokensForExactTokens(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountOut,\n\t\taddress inToken,\n\t\taddress outToken\n\t) public returns (uint256) {\n\t\tuint256 amountIn = UniUtils._getAmountIn(pair, amountOut, inToken, outToken);\n\t\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\n\t\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\n\t\t\t? (uint256(0), amountOut)\n\t\t\t: (amountOut, uint256(0));\n\n\t\tIERC20(inToken).safeTransfer(address(pair), amountIn);\n\t\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n\t\treturn amountIn;\n\t}\n}\n"
    },
    "src/strategies/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract BaseStrategy is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n\tusing SafeERC20 for IERC20;\n\n\tmodifier onlyVault() {\n\t\trequire(msg.sender == vault(), \"Strat: NO_AUTH\");\n\t\t_;\n\t}\n\n\tmodifier onlyAuth() {\n\t\trequire(msg.sender == owner() || _managers[msg.sender] == true, \"Strat: NO_AUTH\");\n\t\t_;\n\t}\n\n\tuint256 private constant SHARE_DECIMALS = 1e18;\n\tuint256 constant BPS_ADJUST = 10000;\n\tuint256 public lastHarvest; // block.timestamp;\n\taddress private _vault;\n\tuint256 private _shares;\n\n\tstring public name;\n\tstring public symbol;\n\n\tmapping(address => bool) private _managers;\n\n\tevent Harvest(uint256 harvested);\n\tevent Deposit(address sender, uint256 amount);\n\tevent Withdraw(address sender, uint256 amount);\n\tevent Rebalance(uint256 shortPrice, uint256 tvlBeforeRebalance, uint256 positionOffset);\n\tevent ManagerUpdate(address indexed account, bool isManager);\n\n\tfunction __BaseStrategy_init(\n\t\taddress vault_,\n\t\tstring memory symbol_,\n\t\tstring memory name_\n\t) internal initializer {\n\t\t__ReentrancyGuard_init();\n\t\t__Ownable_init();\n\t\t_vault = vault_;\n\t\tsymbol = symbol_;\n\t\tname = name_;\n\t}\n\n\t// VIEW\n\tfunction vault() public view returns (address) {\n\t\treturn _vault;\n\t}\n\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _shares;\n\t}\n\n\t/**\n\t * @notice\n\t *  Returns the share price of the strategy in `want` units, multiplied\n\t *  by 1e18\n\t */\n\tfunction getPricePerShare() public view returns (uint256) {\n\t\tuint256 bal = balanceOfUnderlying();\n\t\treturn (bal * SHARE_DECIMALS) / _shares;\n\t}\n\n\tfunction balanceOfUnderlying(address) public view virtual returns (uint256) {\n\t\treturn balanceOfUnderlying();\n\t}\n\n\tfunction balanceOfUnderlying() public view virtual returns (uint256);\n\n\t// PUBLIC METHODS\n\tfunction mint(uint256 amount) public onlyVault returns (uint256 errCode) {\n\t\tuint256 newShares = _deposit(amount);\n\t\t_shares += newShares;\n\t\terrCode = 0;\n\t}\n\n\tfunction redeemUnderlying(uint256 amount) external onlyVault returns (uint256 errCode) {\n\t\tuint256 burnShares = _withdraw(amount);\n\t\t_shares -= burnShares;\n\t\terrCode = 0;\n\t}\n\n\tfunction harvest() external onlyAuth {\n\t\t// harvest\n\t\tuint256 harvested = _harvestInternal();\n\t\temit Harvest(harvested);\n\t}\n\n\t// GOVERNANCE - MANAGER\n\tfunction isManager(address user) public view returns (bool) {\n\t\treturn _managers[user];\n\t}\n\n\tfunction setManager(address user, bool _isManager) external onlyOwner {\n\t\t_managers[user] = _isManager;\n\t\temit ManagerUpdate(user, _isManager);\n\t}\n\n\t/**\n\t * Virtual function for triggering a harvest\n\t *\n\t * Returns\n\t * want harvested in harvest\n\t */\n\tfunction _harvestInternal() internal virtual returns (uint256 harvested);\n\n\tfunction _deposit(uint256 amount) internal virtual returns (uint256 newShares);\n\n\tfunction _withdraw(uint256 amount) internal virtual returns (uint256 burnShares);\n\n\tfunction isCEther() external pure returns (bool) {\n\t\treturn false;\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/interfaces/uniswap/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IWETH {\n\tfunction deposit() external payable;\n\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction withdraw(uint256) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "src/interfaces/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IUniswapV2Pair {\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\tfunction name() external pure returns (string memory);\n\n\tfunction symbol() external pure returns (string memory);\n\n\tfunction decimals() external pure returns (uint8);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\tfunction approve(address spender, uint256 value) external returns (bool);\n\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 value\n\t) external returns (bool);\n\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\n\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\n\n\tfunction nonces(address owner) external view returns (uint256);\n\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external;\n\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n\tevent Swap(\n\t\taddress indexed sender,\n\t\tuint256 amount0In,\n\t\tuint256 amount1In,\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress indexed to\n\t);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n\tfunction factory() external view returns (address);\n\n\tfunction token0() external view returns (address);\n\n\tfunction token1() external view returns (address);\n\n\tfunction getReserves()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint112 reserve0,\n\t\t\tuint112 reserve1,\n\t\t\tuint32 blockTimestampLast\n\t\t);\n\n\tfunction price0CumulativeLast() external view returns (uint256);\n\n\tfunction price1CumulativeLast() external view returns (uint256);\n\n\tfunction kLast() external view returns (uint256);\n\n\tfunction mint(address to) external returns (uint256 liquidity);\n\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n\tfunction swap(\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress to,\n\t\tbytes calldata data\n\t) external;\n\n\tfunction skim(address to) external;\n\n\tfunction sync() external;\n\n\tfunction initialize(address, address) external;\n}\n"
    },
    "src/libraries/UniUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\n\nlibrary UniUtils {\n\tfunction _getPairReserves(\n\t\tIUniswapV2Pair pair,\n\t\taddress tokenA,\n\t\taddress tokenB\n\t) internal view returns (uint256 reserveA, uint256 reserveB) {\n\t\t(address token0, ) = _sortTokens(tokenA, tokenB);\n\t\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n\t\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n\t}\n\n\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\n\tfunction _quote(\n\t\tuint256 amountA,\n\t\tuint256 reserveA,\n\t\tuint256 reserveB\n\t) internal pure returns (uint256 amountB) {\n\t\trequire(amountA > 0, \"UniUtils: INSUFFICIENT_AMOUNT\");\n\t\trequire(reserveA > 0 && reserveB > 0, \"UniUtils: INSUFFICIENT_LIQUIDITY\");\n\t\tamountB = (amountA * reserveB) / reserveA;\n\t}\n\n\tfunction _sortTokens(address tokenA, address tokenB)\n\t\tinternal\n\t\tpure\n\t\treturns (address token0, address token1)\n\t{\n\t\trequire(tokenA != tokenB, \"UniUtils: IDENTICAL_ADDRESSES\");\n\t\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n\t\trequire(token0 != address(0), \"UniUtils: ZERO_ADDRESS\");\n\t}\n\n\tfunction _getAmountOut(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountIn,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal view returns (uint256 amountOut) {\n\t\trequire(amountIn > 0, \"UniUtils: INSUFFICIENT_INPUT_AMOUNT\");\n\t\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\n\t\tuint256 amountInWithFee = amountIn * 997;\n\t\tuint256 numerator = amountInWithFee * reserveOut;\n\t\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\n\t\tamountOut = numerator / denominator;\n\t}\n\n\tfunction _getAmountIn(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountOut,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal view returns (uint256 amountIn) {\n\t\trequire(amountOut > 0, \"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\n\t\tuint256 numerator = reserveIn * amountOut * 1000;\n\t\tuint256 denominator = (reserveOut - amountOut) * 997;\n\t\tamountIn = (numerator / denominator) + 1;\n\t}\n}\n"
    },
    "src/mixins/ILp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nabstract contract ILp {\n\tfunction _quote(\n\t\tuint256 amount,\n\t\taddress token0,\n\t\taddress token1\n\t) internal view virtual returns (uint256 price);\n\n\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\n\t\tinternal\n\t\tvirtual\n\t\treturns (uint256 liquidity);\n\n\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\n\n\tfunction _getLPBalances()\n\t\tinternal\n\t\tview\n\t\tvirtual\n\t\treturns (uint256 wantBalance, uint256 shortBalance);\n}\n"
    },
    "src/interfaces/uniswap/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IStakingRewards is IERC20 {\n\tfunction stakingToken() external view returns (address);\n\n\tfunction lastTimeRewardApplicable() external view returns (uint256);\n\n\tfunction rewardPerToken() external view returns (uint256);\n\n\tfunction earned(address account) external view returns (uint256);\n\n\tfunction getRewardForDuration() external view returns (uint256);\n\n\tfunction stakeWithPermit(\n\t\tuint256 amount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external;\n\n\tfunction stake(uint256 amount) external;\n\n\tfunction withdraw(uint256 amount) external;\n\n\tfunction getReward() external;\n\n\tfunction exit() external;\n}\n\n// some farms use sushi interface\n// interface IFarmMasterChef {\n// \tfunction deposit(uint256 _pid, uint256 _amount) external;\n\n// \tfunction withdraw(uint256 _pid, uint256 _amount) external;\n\n// \tfunction userInfo(uint256 _pid, address user) external view returns (uint256);\n// }\n\ninterface IMiniChefV2 {\n\tstruct UserInfo {\n\t\tuint256 amount;\n\t\tint256 rewardDebt;\n\t}\n\n\tstruct PoolInfo {\n\t\tuint128 accSushiPerShare;\n\t\tuint64 lastRewardTime;\n\t\tuint64 allocPoint;\n\t}\n\n\tfunction poolLength() external view returns (uint256);\n\n\tfunction updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\n\n\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, int256);\n\n\tfunction deposit(\n\t\tuint256 pid,\n\t\tuint256 amount,\n\t\taddress to\n\t) external;\n\n\tfunction withdraw(\n\t\tuint256 pid,\n\t\tuint256 amount,\n\t\taddress to\n\t) external;\n\n\tfunction harvest(uint256 pid, address to) external;\n\n\tfunction withdrawAndHarvest(\n\t\tuint256 pid,\n\t\tuint256 amount,\n\t\taddress to\n\t) external;\n\n\tfunction emergencyWithdraw(uint256 pid, address to) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "src/interfaces/forks/IBenqiComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nabstract contract IBenqiComptroller {\n\tfunction claimReward(uint8 rewardType, address payable holder) external virtual;\n\n\t/// @notice The QI/AVAX accrued but not yet transferred to each user\n\tmapping(uint8 => mapping(address => uint256)) public rewardAccrued;\n}\n"
    },
    "src/vault/modules/VaultRouterModule.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { WETH } from \"solmate/src/tokens/WETH.sol\";\nimport { ERC20 } from \"solmate/src/tokens/ERC20.sol\";\nimport { SafeTransferLib } from \"solmate/src/utils/SafeTransferLib.sol\";\nimport { FixedPointMathLib } from \"solmate/src/utils/FixedPointMathLib.sol\";\n\nimport { AllowedPermit } from \"../interfaces/AllowedPermit.sol\";\n\nimport { Vault } from \"../Vault.sol\";\n\nimport \"hardhat/console.sol\";\n\n/// @title Rari Vault Router Module\n/// @author Transmissions11 and JetJadeja\n/// @notice Module that enables depositing ETH into WETH compatible Vaults\n/// and approval-free deposits into Vaults with permit compatible underlying.\ncontract VaultRouterModule {\n\tusing SafeTransferLib for ERC20;\n\tusing SafeTransferLib for address;\n\tusing FixedPointMathLib for uint256;\n\n\t/*///////////////////////////////////////////////////////////////\n                              DEPOSIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Deposit ETH into a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to deposit into.\n\tfunction depositETHIntoVault(Vault vault) external payable {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Get the Vault's underlying as WETH.\n\t\tWETH weth = WETH(payable(address(vault.UNDERLYING())));\n\n\t\t// Wrap the ETH into WETH.\n\t\tweth.deposit{ value: msg.value }();\n\n\t\t// Deposit and transfer the minted rvTokens back to the caller.\n\t\tdepositIntoVaultForCaller(vault, weth, msg.value);\n\t}\n\n\t/// @notice Deposits into a Vault, transferring in its underlying token from the caller via permit.\n\t/// @param vault The Vault to deposit into.\n\t/// @param underlyingAmount The amount of underlying tokens to deposit into the Vault.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\t/// @dev Use depositIntoVaultWithAllowedPermit for tokens using DAI's non-standard permit interface.\n\tfunction depositIntoVaultWithPermit(\n\t\tVault vault,\n\t\tuint256 underlyingAmount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Get the Vault's underlying token.\n\t\tERC20 underlying = vault.UNDERLYING();\n\t\tconsole.log(\"permit\");\n\t\t// Transfer in the provided amount of underlying tokens from the caller via permit.\n\t\tpermitAndTransferFromCaller(underlying, underlyingAmount, deadline, v, r, s);\n\n\t\t// Deposit and transfer the minted rvTokens back to the caller.\n\t\tdepositIntoVaultForCaller(vault, underlying, underlyingAmount);\n\t}\n\n\t/// @notice Deposits into a Vault, transferring in its underlying token from the caller via allowed permit.\n\t/// @param vault The Vault to deposit into.\n\t/// @param underlyingAmount The amount of underlying tokens to deposit into the Vault.\n\t/// @param nonce The callers's nonce, increases at each call to permit.\n\t/// @param expiry The timestamp at which the permit is no longer valid.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\t/// @dev Alternative to depositIntoVaultWithPermit for tokens using DAI's non-standard permit interface.\n\tfunction depositIntoVaultWithAllowedPermit(\n\t\tVault vault,\n\t\tuint256 underlyingAmount,\n\t\tuint256 nonce,\n\t\tuint256 expiry,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Get the Vault's underlying token.\n\t\tERC20 underlying = vault.UNDERLYING();\n\n\t\t// Transfer in the provided amount of underlying tokens from the caller via allowed permit.\n\t\tallowedPermitAndTransferFromCaller(underlying, underlyingAmount, nonce, expiry, v, r, s);\n\n\t\t// Deposit and transfer the minted rvTokens back to the caller.\n\t\tdepositIntoVaultForCaller(vault, underlying, underlyingAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Withdraw ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to withdraw from.\n\t/// @param underlyingAmount The amount of ETH to withdraw from the Vault.\n\tfunction withdrawETHFromVault(Vault vault, uint256 underlyingAmount) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Compute the amount of rvTokens equivalent to the underlying amount.\n\t\t// We know the Vault's base unit is 1e18 as it's required if underlyingIsWETH returns true.\n\t\tuint256 rvTokenAmount = underlyingAmount.fdiv(vault.exchangeRate(), 1e18);\n\n\t\t// Transfer in the equivalent amount of rvTokens from the caller.\n\t\tERC20(vault).safeTransferFrom(msg.sender, address(this), rvTokenAmount);\n\n\t\t// Withdraw from the Vault.\n\t\tvault.withdraw(underlyingAmount);\n\n\t\t// Unwrap the withdrawn amount of WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(WETH(payable(address(vault.UNDERLYING()))), underlyingAmount);\n\t}\n\n\t/// @notice Withdraw ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to withdraw from.\n\t/// @param underlyingAmount The amount of ETH to withdraw from the Vault.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\tfunction withdrawETHFromVaultWithPermit(\n\t\tVault vault,\n\t\tuint256 underlyingAmount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Compute the amount of rvTokens equivalent to the underlying amount.\n\t\t// We know the Vault's base unit is 1e18 as it's required if underlyingIsWETH returns true.\n\t\tuint256 rvTokenAmount = underlyingAmount.fdiv(vault.exchangeRate(), 1e18);\n\n\t\t// Transfer in the equivalent amount of rvTokens from the caller via permit.\n\t\tpermitAndTransferFromCaller(vault, rvTokenAmount, deadline, v, r, s);\n\n\t\t// Withdraw from the Vault.\n\t\tvault.withdraw(underlyingAmount);\n\n\t\t// Unwrap the withdrawn amount of WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(WETH(payable(address(vault.UNDERLYING()))), underlyingAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                              REDEEM LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Redeem ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to redeem from.\n\t/// @param rvTokenAmount The amount of rvTokens to withdraw from the Vault.\n\tfunction redeemETHFromVault(Vault vault, uint256 rvTokenAmount) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Transfer in the provided amount of rvTokens from the caller.\n\t\tERC20(vault).safeTransferFrom(msg.sender, address(this), rvTokenAmount);\n\n\t\t// Redeem the rvTokens.\n\t\tvault.redeem(rvTokenAmount);\n\n\t\t// Get the Vault's underlying as WETH.\n\t\tWETH weth = WETH(payable(address(vault.UNDERLYING())));\n\n\t\t// Unwrap all our WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(weth, weth.balanceOf(address(this)));\n\t}\n\n\t/// @notice Redeem ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to redeem from.\n\t/// @param rvTokenAmount The amount of rvTokens to withdraw from the Vault.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\tfunction redeemETHFromVaultWithPermit(\n\t\tVault vault,\n\t\tuint256 rvTokenAmount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Transfer in the provided amount of rvTokens from the caller via permit.\n\t\tpermitAndTransferFromCaller(vault, rvTokenAmount, deadline, v, r, s);\n\n\t\t// Redeem the rvTokens.\n\t\tvault.redeem(rvTokenAmount);\n\n\t\t// Get the Vault's underlying as WETH.\n\t\tWETH weth = WETH(payable(address(vault.UNDERLYING())));\n\n\t\t// Unwrap all our WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(weth, weth.balanceOf(address(this)));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          WETH UNWRAPPING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Unwraps the provided amount of WETH and transfers it to the caller.\n\t/// @param weth The WETH contract to withdraw the amount from.\n\t/// @param amount The amount of WETH to unwrap into ETH and transfer.\n\tfunction unwrapAndTransfer(WETH weth, uint256 amount) internal {\n\t\t// Convert the WETH into ETH.\n\t\tweth.withdraw(amount);\n\n\t\t// Transfer the unwrapped ETH to the caller.\n\t\tmsg.sender.safeTransferETH(amount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          VAULT DEPOSIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Approves tokens, deposits them into a Vault\n\t/// and transfers the minted rvTokens back to the caller.\n\t/// @param vault The Vault to deposit into.\n\t/// @param underlying The underlying token the Vault accepts.\n\t/// @param amount The minimum amount that must be approved.\n\tfunction depositIntoVaultForCaller(\n\t\tVault vault,\n\t\tERC20 underlying,\n\t\tuint256 amount\n\t) internal {\n\t\t// If we don't have enough of the underlying token approved already:\n\t\tif (amount > underlying.allowance(address(this), address(vault))) {\n\t\t\t// Approve an unlimited amount of the underlying token to the Vault.\n\t\t\tunderlying.safeApprove(address(vault), type(uint256).max);\n\t\t}\n\n\t\t// Deposit the underlying tokens into the Vault.\n\t\tvault.deposit(amount);\n\n\t\t// Transfer the newly minted rvTokens back to the caller.\n\t\tERC20(vault).safeTransfer(msg.sender, vault.balanceOf(address(this)));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                              PERMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Permits tokens from the caller and transfers them into the module.\n\t/// @param token The token to permit and transfer in.\n\t/// @param amount The amount of tokens to permit and transfer in.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\tfunction permitAndTransferFromCaller(\n\t\tERC20 token,\n\t\tuint256 amount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) internal {\n\t\t// Approve the tokens from the caller to the module via permit.\n\t\ttoken.permit(msg.sender, address(this), amount, deadline, v, r, s);\n\n\t\t// Transfer the tokens from the caller to the module.\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\n\t}\n\n\t/// @dev Max permits tokens from the caller and transfers them into the module.\n\t/// @param token The token to permit and transfer in.\n\t/// @param amount The amount of tokens to permit and transfer in.\n\t/// @param nonce The callers's nonce, increases at each call to permit.\n\t/// @param expiry The timestamp at which the permit is no longer valid.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\t/// @dev Alternative to permitAndTransferFromCaller for tokens using DAI's non-standard permit interface.\n\tfunction allowedPermitAndTransferFromCaller(\n\t\tERC20 token,\n\t\tuint256 amount,\n\t\tuint256 nonce,\n\t\tuint256 expiry,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) internal {\n\t\t// Approve the tokens from the caller to the module via DAI's non-standard permit.\n\t\tAllowedPermit(address(token)).permit(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tnonce,\n\t\t\texpiry,\n\t\t\ttrue,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts\n\t\t);\n\n\t\t// Transfer the tokens from the caller to the module.\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          RECIEVE ETHER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Required for the module to receive unwrapped ETH.\n\treceive() external payable {}\n}\n"
    },
    "solmate/src/tokens/WETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"./ERC20.sol\";\n\nimport {SafeTransferLib} from \"../utils/SafeTransferLib.sol\";\n\n/// @notice Minimalist and modern Wrapped Ether implementation.\n/// @author Inspired by WETH9 (https://github.com/dapphub/ds-weth/blob/master/src/weth9.sol)\ncontract WETH is ERC20(\"Wrapped Ether\", \"WETH\", 18) {\n    using SafeTransferLib for address;\n\n    event Deposit(address indexed from, uint256 amount);\n\n    event Withdrawal(address indexed to, uint256 amount);\n\n    function deposit() public payable {\n        _mint(msg.sender, msg.value);\n\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 amount) external {\n        _burn(msg.sender, amount);\n\n        msg.sender.safeTransferETH(amount);\n\n        emit Withdrawal(msg.sender, amount);\n    }\n\n    receive() external payable {\n        deposit();\n    }\n}\n"
    },
    "solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                           EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        if (allowance[from][msg.sender] != type(uint256).max) {\n            allowance[from][msg.sender] -= amount;\n        }\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v, r, s);\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_PERMIT_SIGNATURE\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(bytes(\"1\")),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\nlibrary SafeTransferLib {\n    /*///////////////////////////////////////////////////////////////\n                            ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool callStatus;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 100 because the calldata length is 4 + 32 * 3.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                         INTERNAL HELPER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\n        assembly {\n            // Get how many bytes the call returned.\n            let returnDataSize := returndatasize()\n\n            // If the call reverted:\n            if iszero(callStatus) {\n                // Copy the revert message into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Revert with the same message.\n                revert(0, returnDataSize)\n            }\n\n            switch returnDataSize\n            case 32 {\n                // Copy the return data into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Set success to whether it returned true.\n                success := iszero(iszero(mload(0)))\n            }\n            case 0 {\n                // There was no return data.\n                success := 1\n            }\n            default {\n                // It returned some malformed input.\n                success := 0\n            }\n        }\n    }\n}\n"
    },
    "solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Modified from Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/math.sol)\n/// and ABDK (https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol)\nlibrary FixedPointMathLib {\n    /*///////////////////////////////////////////////////////////////\n                            COMMON BASE UNITS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant YAD = 1e8;\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant RAD = 1e45;\n\n    /*///////////////////////////////////////////////////////////////\n                         FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function fmul(\n        uint256 x,\n        uint256 y,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(x == 0 || (x * y) / x == y)\n            if iszero(or(iszero(x), eq(div(z, x), y))) {\n                revert(0, 0)\n            }\n\n            // If baseUnit is zero this will return zero instead of reverting.\n            z := div(z, baseUnit)\n        }\n    }\n\n    function fdiv(\n        uint256 x,\n        uint256 y,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * baseUnit in z for now.\n            z := mul(x, baseUnit)\n\n            if or(\n                // Revert if y is zero to ensure we don't divide by zero below.\n                iszero(y),\n                // Equivalent to require(x == 0 || (x * baseUnit) / x == baseUnit)\n                iszero(or(iszero(x), eq(div(z, x), baseUnit)))\n            ) {\n                revert(0, 0)\n            }\n\n            // We ensure y is not zero above, so there is never division by zero here.\n            z := div(z, y)\n        }\n    }\n\n    function fpow(\n        uint256 x,\n        uint256 n,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    z := baseUnit\n                }\n                default {\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    z := baseUnit\n                }\n                default {\n                    z := x\n                }\n                let half := div(baseUnit, 2)\n                for {\n                    n := div(n, 2)\n                } n {\n                    n := div(n, 2)\n                } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) {\n                        revert(0, 0)\n                    }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n                    x := div(xxRound, baseUnit)\n                    if mod(n, 2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\n                            revert(0, 0)\n                        }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n                        z := div(zxRound, baseUnit)\n                    }\n                }\n            }\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) return 0;\n\n        result = 1;\n\n        uint256 xAux = x;\n\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n\n        if (xAux >= 0x8) result <<= 1;\n\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n\n            uint256 roundedDownResult = x / result;\n\n            if (result > roundedDownResult) result = roundedDownResult;\n        }\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x < y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x > y ? x : y;\n    }\n}\n"
    },
    "src/vault/interfaces/AllowedPermit.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { ERC20 } from \"solmate/src/tokens/ERC20.sol\";\n\n/// @notice Minimal interface for tokens using DAI's non-standard permit interface.\n/// @author Modified from Uniswap (https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol)\nabstract contract AllowedPermit is ERC20 {\n\t/// @param holder The address of the token owner.\n\t/// @param spender The address of the token spender.\n\t/// @param nonce The owner's nonce, increases at each call to permit.\n\t/// @param expiry The timestamp at which the permit is no longer valid.\n\t/// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\n\t/// @param v Must produce valid secp256k1 signature from the owner along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the owner along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the owner along with r and v.\n\tfunction permit(\n\t\taddress holder,\n\t\taddress spender,\n\t\tuint256 nonce,\n\t\tuint256 expiry,\n\t\tbool allowed,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external virtual;\n}\n"
    },
    "src/vault/Vault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { Auth } from \"solmate/src/auth/Auth.sol\";\nimport { WETH } from \"solmate/src/tokens/WETH.sol\";\nimport { ERC20 } from \"solmate/src/tokens/ERC20.sol\";\nimport { SafeCastLib } from \"solmate/src/utils/SafeCastLib.sol\";\nimport { SafeTransferLib } from \"solmate/src/utils/SafeTransferLib.sol\";\nimport { FixedPointMathLib } from \"solmate/src/utils/FixedPointMathLib.sol\";\n\nimport { Strategy, ERC20Strategy, ETHStrategy } from \"./interfaces/Strategy.sol\";\n\n/// @title Rari Vault (rvToken)\n/// @author Transmissions11 and JetJadeja\n/// @notice Flexible, minimalist, and gas-optimized yield\n/// aggregator for earning interest on any ERC20 token.\ncontract Vault is ERC20, Auth {\n\tusing SafeCastLib for uint256;\n\tusing SafeTransferLib for ERC20;\n\tusing FixedPointMathLib for uint256;\n\n\t/*///////////////////////////////////////////////////////////////\n                                IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The underlying token the Vault accepts.\n\tERC20 public immutable UNDERLYING;\n\n\t/// @notice The base unit of the underlying token and hence rvToken.\n\t/// @dev Equal to 10 ** decimals. Used for fixed point arithmetic.\n\tuint256 public immutable BASE_UNIT;\n\n\t/// @notice Creates a new Vault that accepts a specific underlying token.\n\t/// @param _UNDERLYING The ERC20 compliant token the Vault should accept.\n\tconstructor(ERC20 _UNDERLYING)\n\t\tERC20(\n\t\t\t// ex: Parasite Dai Stablecoin Vault\n\t\t\tstring(abi.encodePacked(\"Parasite \", _UNDERLYING.name(), \" Vault\")),\n\t\t\t// ex: pDAI\n\t\t\tstring(abi.encodePacked(\"p\", _UNDERLYING.symbol())),\n\t\t\t// ex: 18\n\t\t\t_UNDERLYING.decimals()\n\t\t)\n\t\tAuth(Auth(msg.sender).owner(), Auth(msg.sender).authority())\n\t{\n\t\tUNDERLYING = _UNDERLYING;\n\n\t\tBASE_UNIT = 10**decimals;\n\n\t\t// Prevent minting of rvTokens until\n\t\t// the initialize function is called.\n\t\ttotalSupply = type(uint256).max;\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                           FEE CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The percentage of profit recognized each harvest to reserve as fees.\n\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\n\tuint256 public feePercent;\n\n\t/// @notice Emitted when the fee percentage is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newFeePercent The new fee percentage.\n\tevent FeePercentUpdated(address indexed user, uint256 newFeePercent);\n\n\t/// @notice Sets a new fee percentage.\n\t/// @param newFeePercent The new fee percentage.\n\tfunction setFeePercent(uint256 newFeePercent) external requiresAuth {\n\t\t// A fee percentage over 100% doesn't make sense.\n\t\trequire(newFeePercent <= 1e18, \"FEE_TOO_HIGH\");\n\n\t\t// Update the fee percentage.\n\t\tfeePercent = newFeePercent;\n\n\t\temit FeePercentUpdated(msg.sender, newFeePercent);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        HARVEST CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when the harvest window is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newHarvestWindow The new harvest window.\n\tevent HarvestWindowUpdated(address indexed user, uint128 newHarvestWindow);\n\n\t/// @notice Emitted when the harvest delay is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newHarvestDelay The new harvest delay.\n\tevent HarvestDelayUpdated(address indexed user, uint64 newHarvestDelay);\n\n\t/// @notice Emitted when the harvest delay is scheduled to be updated next harvest.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newHarvestDelay The scheduled updated harvest delay.\n\tevent HarvestDelayUpdateScheduled(address indexed user, uint64 newHarvestDelay);\n\n\t/// @notice The period in seconds during which multiple harvests can occur\n\t/// regardless if they are taking place before the harvest delay has elapsed.\n\t/// @dev Long harvest windows open the Vault up to profit distribution slowdown attacks.\n\tuint128 public harvestWindow;\n\n\t/// @notice The period in seconds over which locked profit is unlocked.\n\t/// @dev Cannot be 0 as it opens harvests up to sandwich attacks.\n\tuint64 public harvestDelay;\n\n\t/// @notice The value that will replace harvestDelay next harvest.\n\t/// @dev In the case that the next delay is 0, no update will be applied.\n\tuint64 public nextHarvestDelay;\n\n\t/// @notice Sets a new harvest window.\n\t/// @param newHarvestWindow The new harvest window.\n\t/// @dev The Vault's harvestDelay must already be set before calling.\n\tfunction setHarvestWindow(uint128 newHarvestWindow) external requiresAuth {\n\t\t// A harvest window longer than the harvest delay doesn't make sense.\n\t\trequire(newHarvestWindow <= harvestDelay, \"WINDOW_TOO_LONG\");\n\n\t\t// Update the harvest window.\n\t\tharvestWindow = newHarvestWindow;\n\n\t\temit HarvestWindowUpdated(msg.sender, newHarvestWindow);\n\t}\n\n\t/// @notice Sets a new harvest delay.\n\t/// @param newHarvestDelay The new harvest delay to set.\n\t/// @dev If the current harvest delay is 0, meaning it has not\n\t/// been set before, it will be updated immediately, otherwise\n\t/// it will be scheduled to take effect after the next harvest.\n\tfunction setHarvestDelay(uint64 newHarvestDelay) external requiresAuth {\n\t\t// A harvest delay of 0 makes harvests vulnerable to sandwich attacks.\n\t\trequire(newHarvestDelay != 0, \"DELAY_CANNOT_BE_ZERO\");\n\n\t\t// A harvest delay longer than 1 year doesn't make sense.\n\t\trequire(newHarvestDelay <= 365 days, \"DELAY_TOO_LONG\");\n\n\t\t// If the harvest delay is 0, meaning it has not been set before:\n\t\tif (harvestDelay == 0) {\n\t\t\t// We'll apply the update immediately.\n\t\t\tharvestDelay = newHarvestDelay;\n\n\t\t\temit HarvestDelayUpdated(msg.sender, newHarvestDelay);\n\t\t} else {\n\t\t\t// We'll apply the update next harvest.\n\t\t\tnextHarvestDelay = newHarvestDelay;\n\n\t\t\temit HarvestDelayUpdateScheduled(msg.sender, newHarvestDelay);\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                       TARGET FLOAT CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The desired percentage of the Vault's holdings to keep as float.\n\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\n\tuint256 public targetFloatPercent;\n\n\t/// @notice Emitted when the target float percentage is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newTargetFloatPercent The new target float percentage.\n\tevent TargetFloatPercentUpdated(address indexed user, uint256 newTargetFloatPercent);\n\n\t/// @notice Set a new target float percentage.\n\t/// @param newTargetFloatPercent The new target float percentage.\n\tfunction setTargetFloatPercent(uint256 newTargetFloatPercent) external requiresAuth {\n\t\t// A target float percentage over 100% doesn't make sense.\n\t\trequire(targetFloatPercent <= 1e18, \"TARGET_TOO_HIGH\");\n\n\t\t// Update the target float percentage.\n\t\ttargetFloatPercent = newTargetFloatPercent;\n\n\t\temit TargetFloatPercentUpdated(msg.sender, newTargetFloatPercent);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                   UNDERLYING IS WETH CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Whether the Vault should treat the underlying token as WETH compatible.\n\t/// @dev If enabled the Vault will allow trusting strategies that accept Ether.\n\tbool public underlyingIsWETH;\n\n\t/// @notice Emitted when whether the Vault should treat the underlying as WETH is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newUnderlyingIsWETH Whether the Vault nows treats the underlying as WETH.\n\tevent UnderlyingIsWETHUpdated(address indexed user, bool newUnderlyingIsWETH);\n\n\t/// @notice Sets whether the Vault treats the underlying as WETH.\n\t/// @param newUnderlyingIsWETH Whether the Vault should treat the underlying as WETH.\n\t/// @dev The underlying token must have 18 decimals, to match Ether's decimal scheme.\n\tfunction setUnderlyingIsWETH(bool newUnderlyingIsWETH) external requiresAuth {\n\t\t// Ensure the underlying token's decimals match ETH.\n\t\trequire(UNDERLYING.decimals() == 18, \"WRONG_DECIMALS\");\n\n\t\t// Update whether the Vault treats the underlying as WETH.\n\t\tunderlyingIsWETH = newUnderlyingIsWETH;\n\n\t\temit UnderlyingIsWETHUpdated(msg.sender, newUnderlyingIsWETH);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          STRATEGY STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The total amount of underlying tokens held in strategies at the time of the last harvest.\n\t/// @dev Includes maxLockedProfit, must be correctly subtracted to compute available/free holdings.\n\tuint256 public totalStrategyHoldings;\n\n\t/// @dev Packed struct of strategy data.\n\t/// @param trusted Whether the strategy is trusted.\n\t/// @param balance The amount of underlying tokens held in the strategy.\n\tstruct StrategyData {\n\t\t// Used to determine if the Vault will operate on a strategy.\n\t\tbool trusted;\n\t\t// Used to determine profit and loss during harvests of the strategy.\n\t\tuint248 balance;\n\t}\n\n\t/// @notice Maps strategies to data the Vault holds on them.\n\tmapping(Strategy => StrategyData) public getStrategyData;\n\n\t/*///////////////////////////////////////////////////////////////\n                             HARVEST STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice A timestamp representing when the first harvest in the most recent harvest window occurred.\n\t/// @dev May be equal to lastHarvest if there was/has only been one harvest in the most last/current window.\n\tuint64 public lastHarvestWindowStart;\n\n\t/// @notice A timestamp representing when the most recent harvest occurred.\n\tuint64 public lastHarvest;\n\n\t/// @notice The amount of locked profit at the end of the last harvest.\n\tuint128 public maxLockedProfit;\n\n\t/*///////////////////////////////////////////////////////////////\n                        WITHDRAWAL QUEUE STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice An ordered array of strategies representing the withdrawal queue.\n\t/// @dev The queue is processed in descending order, meaning the last index will be withdrawn from first.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at\n\t/// withdrawal time, not validated upfront, meaning the queue may not reflect the \"true\" set used for withdrawals.\n\tStrategy[] public withdrawalQueue;\n\n\t/// @notice Gets the full withdrawal queue.\n\t/// @return An ordered array of strategies representing the withdrawal queue.\n\t/// @dev This is provided because Solidity converts public arrays into index getters,\n\t/// but we need a way to allow external contracts and users to access the whole array.\n\tfunction getWithdrawalQueue() external view returns (Strategy[] memory) {\n\t\treturn withdrawalQueue;\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after a successful deposit.\n\t/// @param user The address that deposited into the Vault.\n\t/// @param underlyingAmount The amount of underlying tokens that were deposited.\n\tevent Deposit(address indexed user, uint256 underlyingAmount);\n\n\t/// @notice Emitted after a successful withdrawal.\n\t/// @param user The address that withdrew from the Vault.\n\t/// @param underlyingAmount The amount of underlying tokens that were withdrawn.\n\tevent Withdraw(address indexed user, uint256 underlyingAmount);\n\n\t/// @notice Deposit a specific amount of underlying tokens.\n\t/// @param underlyingAmount The amount of the underlying token to deposit.\n\tfunction deposit(uint256 underlyingAmount) external {\n\t\t// We don't allow depositing 0 to prevent emitting a useless event.\n\t\trequire(underlyingAmount != 0, \"AMOUNT_CANNOT_BE_ZERO\");\n\n\t\t// Determine the equivalent amount of rvTokens and mint them.\n\t\t_mint(msg.sender, underlyingAmount.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\temit Deposit(msg.sender, underlyingAmount);\n\n\t\t// Transfer in underlying tokens from the user.\n\t\t// This will revert if the user does not have the amount specified.\n\t\tUNDERLYING.safeTransferFrom(msg.sender, address(this), underlyingAmount);\n\t}\n\n\t/// @notice Withdraw a specific amount of underlying tokens.\n\t/// @param underlyingAmount The amount of underlying tokens to withdraw.\n\tfunction withdraw(uint256 underlyingAmount) external {\n\t\t// We don't allow withdrawing 0 to prevent emitting a useless event.\n\t\trequire(underlyingAmount != 0, \"AMOUNT_CANNOT_BE_ZERO\");\n\n\t\t// Determine the equivalent amount of rvTokens and burn them.\n\t\t// This will revert if the user does not have enough rvTokens.\n\t\t_burn(msg.sender, underlyingAmount.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\temit Withdraw(msg.sender, underlyingAmount);\n\n\t\t// Withdraw from strategies if needed and transfer.\n\t\ttransferUnderlyingTo(msg.sender, underlyingAmount);\n\t}\n\n\t/// @notice Redeem a specific amount of rvTokens for underlying tokens.\n\t/// @param rvTokenAmount The amount of rvTokens to redeem for underlying tokens.\n\tfunction redeem(uint256 rvTokenAmount) external {\n\t\t// We don't allow redeeming 0 to prevent emitting a useless event.\n\t\trequire(rvTokenAmount != 0, \"AMOUNT_CANNOT_BE_ZERO\");\n\n\t\t// Determine the equivalent amount of underlying tokens.\n\t\tuint256 underlyingAmount = rvTokenAmount.fmul(exchangeRate(), BASE_UNIT);\n\n\t\t// Burn the provided amount of rvTokens.\n\t\t// This will revert if the user does not have enough rvTokens.\n\t\t_burn(msg.sender, rvTokenAmount);\n\n\t\temit Withdraw(msg.sender, underlyingAmount);\n\t\t// Withdraw from strategies if needed and transfer.\n\t\ttransferUnderlyingTo(msg.sender, underlyingAmount);\n\t}\n\n\t/// @dev Transfers a specific amount of underlying tokens held in strategies and/or float to a recipient.\n\t/// @dev Only withdraws from strategies if needed and maintains the target float percentage if possible.\n\t/// @param recipient The user to transfer the underlying tokens to.\n\t/// @param underlyingAmount The amount of underlying tokens to transfer.\n\tfunction transferUnderlyingTo(address recipient, uint256 underlyingAmount) internal {\n\t\t// Get the Vault's floating balance.\n\t\tuint256 float = totalFloat();\n\n\t\t// If the amount is greater than the float, withdraw from strategies.\n\t\tif (underlyingAmount > float) {\n\t\t\t// Compute the amount needed to reach our target float percentage.\n\t\t\tuint256 floatMissingForTarget = (totalHoldings() - underlyingAmount).fmul(\n\t\t\t\ttargetFloatPercent,\n\t\t\t\t1e18\n\t\t\t);\n\n\t\t\t// Compute the bare minimum amount we need for this withdrawal.\n\t\t\tuint256 floatMissingForWithdrawal = underlyingAmount - float;\n\n\t\t\t// Pull enough to cover the withdrawal and reach our target float percentage.\n\t\t\tpullFromWithdrawalQueue(floatMissingForWithdrawal + floatMissingForTarget);\n\t\t}\n\n\t\t// Transfer the provided amount of underlying tokens.\n\t\tUNDERLYING.safeTransfer(recipient, underlyingAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        VAULT ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Returns a user's Vault balance in underlying tokens.\n\t/// @param user The user to get the underlying balance of.\n\t/// @return The user's Vault balance in underlying tokens.\n\tfunction balanceOfUnderlying(address user) external view returns (uint256) {\n\t\treturn balanceOf[user].fmul(exchangeRate(), BASE_UNIT);\n\t}\n\n\t/// @notice Returns the amount of underlying tokens an rvToken can be redeemed for.\n\t/// @return The amount of underlying tokens an rvToken can be redeemed for.\n\tfunction exchangeRate() public view returns (uint256) {\n\t\t// Get the total supply of rvTokens.\n\t\tuint256 rvTokenSupply = totalSupply;\n\n\t\t// If there are no rvTokens in circulation, return an exchange rate of 1:1.\n\t\tif (rvTokenSupply == 0) return BASE_UNIT;\n\n\t\t// Calculate the exchange rate by dividing the total holdings by the rvToken supply.\n\t\treturn totalHoldings().fdiv(rvTokenSupply, BASE_UNIT);\n\t}\n\n\t/// @notice Calculates the total amount of underlying tokens the Vault holds.\n\t/// @return totalUnderlyingHeld The total amount of underlying tokens the Vault holds.\n\tfunction totalHoldings() public view returns (uint256 totalUnderlyingHeld) {\n\t\tunchecked {\n\t\t\t// Cannot underflow as locked profit can't exceed total strategy holdings.\n\t\t\ttotalUnderlyingHeld = totalStrategyHoldings - lockedProfit();\n\t\t}\n\n\t\t// Include our floating balance in the total.\n\t\ttotalUnderlyingHeld += totalFloat();\n\t}\n\n\t/// @notice Calculates the current amount of locked profit.\n\t/// @return The current amount of locked profit.\n\tfunction lockedProfit() public view returns (uint256) {\n\t\t// Get the last harvest and harvest delay.\n\t\tuint256 previousHarvest = lastHarvest;\n\t\tuint256 harvestInterval = harvestDelay;\n\n\t\tunchecked {\n\t\t\t// If the harvest delay has passed, there is no locked profit.\n\t\t\t// Cannot overflow on human timescales since harvestInterval is capped.\n\t\t\tif (block.timestamp >= previousHarvest + harvestInterval) return 0;\n\n\t\t\t// Get the maximum amount we could return.\n\t\t\tuint256 maximumLockedProfit = maxLockedProfit;\n\n\t\t\t// Compute how much profit remains locked based on the last harvest and harvest delay.\n\t\t\t// It's impossible for the previous harvest to be in the future, so this will never underflow.\n\t\t\treturn\n\t\t\t\tmaximumLockedProfit -\n\t\t\t\t(maximumLockedProfit * (block.timestamp - previousHarvest)) /\n\t\t\t\tharvestInterval;\n\t\t}\n\t}\n\n\t/// @notice Returns the amount of underlying tokens that idly sit in the Vault.\n\t/// @return The amount of underlying tokens that sit idly in the Vault.\n\tfunction totalFloat() public view returns (uint256) {\n\t\treturn UNDERLYING.balanceOf(address(this));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                             HARVEST LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after a successful harvest.\n\t/// @param user The authorized user who triggered the harvest.\n\t/// @param strategies The trusted strategies that were harvested.\n\tevent Harvest(address indexed user, Strategy[] strategies);\n\n\t/// @notice Harvest a set of trusted strategies.\n\t/// @param strategies The trusted strategies to harvest.\n\t/// @dev Will always revert if called outside of an active\n\t/// harvest window or before the harvest delay has passed.\n\tfunction harvest(Strategy[] calldata strategies) external requiresAuth {\n\t\t// If this is the first harvest after the last window:\n\t\tif (block.timestamp >= lastHarvest + harvestDelay) {\n\t\t\t// Set the harvest window's start timestamp.\n\t\t\t// Cannot overflow 64 bits on human timescales.\n\t\t\tlastHarvestWindowStart = uint64(block.timestamp);\n\t\t} else {\n\t\t\t// We know this harvest is not the first in the window so we need to ensure it's within it.\n\t\t\trequire(block.timestamp <= lastHarvestWindowStart + harvestWindow, \"BAD_HARVEST_TIME\");\n\t\t}\n\n\t\t// Get the Vault's current total strategy holdings.\n\t\tuint256 oldTotalStrategyHoldings = totalStrategyHoldings;\n\n\t\t// Used to store the total profit accrued by the strategies.\n\t\tuint256 totalProfitAccrued;\n\n\t\t// Used to store the new total strategy holdings after harvesting.\n\t\tuint256 newTotalStrategyHoldings = oldTotalStrategyHoldings;\n\n\t\t// Will revert if any of the specified strategies are untrusted.\n\t\tfor (uint256 i = 0; i < strategies.length; i++) {\n\t\t\t// Get the strategy at the current index.\n\t\t\tStrategy strategy = strategies[i];\n\n\t\t\t// If an untrusted strategy could be harvested a malicious user could use\n\t\t\t// a fake strategy that over-reports holdings to manipulate the exchange rate.\n\t\t\trequire(getStrategyData[strategy].trusted, \"UNTRUSTED_STRATEGY\");\n\n\t\t\t// Get the strategy's previous and current balance.\n\t\t\tuint256 balanceLastHarvest = getStrategyData[strategy].balance;\n\t\t\tuint256 balanceThisHarvest = strategy.balanceOfUnderlying(address(this));\n\n\t\t\t// Update the strategy's stored balance. Cast overflow is unrealistic.\n\t\t\tgetStrategyData[strategy].balance = balanceThisHarvest.safeCastTo248();\n\n\t\t\t// Increase/decrease newTotalStrategyHoldings based on the profit/loss registered.\n\t\t\t// We cannot wrap the subtraction in parenthesis as it would underflow if the strategy had a loss.\n\t\t\tnewTotalStrategyHoldings =\n\t\t\t\tnewTotalStrategyHoldings +\n\t\t\t\tbalanceThisHarvest -\n\t\t\t\tbalanceLastHarvest;\n\n\t\t\tunchecked {\n\t\t\t\t// Update the total profit accrued while counting losses as zero profit.\n\t\t\t\t// Cannot overflow as we already increased total holdings without reverting.\n\t\t\t\ttotalProfitAccrued += balanceThisHarvest > balanceLastHarvest\n\t\t\t\t\t? balanceThisHarvest - balanceLastHarvest // Profits since last harvest.\n\t\t\t\t\t: 0; // If the strategy registered a net loss we don't have any new profit.\n\t\t\t}\n\t\t}\n\n\t\t// Compute fees as the fee percent multiplied by the profit.\n\t\tuint256 feesAccrued = totalProfitAccrued.fmul(feePercent, 1e18);\n\n\t\t// If we accrued any fees, mint an equivalent amount of rvTokens.\n\t\t// Authorized users can claim the newly minted rvTokens via claimFees.\n\t\t_mint(address(this), feesAccrued.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\t// Update max unlocked profit based on any remaining locked profit plus new profit.\n\t\tmaxLockedProfit = (lockedProfit() + totalProfitAccrued - feesAccrued).safeCastTo128();\n\n\t\t// Set strategy holdings to our new total.\n\t\ttotalStrategyHoldings = newTotalStrategyHoldings;\n\n\t\t// Update the last harvest timestamp.\n\t\t// Cannot overflow on human timescales.\n\t\tlastHarvest = uint64(block.timestamp);\n\n\t\temit Harvest(msg.sender, strategies);\n\n\t\t// Get the next harvest delay.\n\t\tuint64 newHarvestDelay = nextHarvestDelay;\n\n\t\t// If the next harvest delay is not 0:\n\t\tif (newHarvestDelay != 0) {\n\t\t\t// Update the harvest delay.\n\t\t\tharvestDelay = newHarvestDelay;\n\n\t\t\t// Reset the next harvest delay.\n\t\t\tnextHarvestDelay = 0;\n\n\t\t\temit HarvestDelayUpdated(msg.sender, newHarvestDelay);\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                    STRATEGY DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after the Vault deposits into a strategy contract.\n\t/// @param user The authorized user who triggered the deposit.\n\t/// @param strategy The strategy that was deposited into.\n\t/// @param underlyingAmount The amount of underlying tokens that were deposited.\n\tevent StrategyDeposit(\n\t\taddress indexed user,\n\t\tStrategy indexed strategy,\n\t\tuint256 underlyingAmount\n\t);\n\n\t/// @notice Emitted after the Vault withdraws funds from a strategy contract.\n\t/// @param user The authorized user who triggered the withdrawal.\n\t/// @param strategy The strategy that was withdrawn from.\n\t/// @param underlyingAmount The amount of underlying tokens that were withdrawn.\n\tevent StrategyWithdrawal(\n\t\taddress indexed user,\n\t\tStrategy indexed strategy,\n\t\tuint256 underlyingAmount\n\t);\n\n\t/// @notice Deposit a specific amount of float into a trusted strategy.\n\t/// @param strategy The trusted strategy to deposit into.\n\t/// @param underlyingAmount The amount of underlying tokens in float to deposit.\n\tfunction depositIntoStrategy(Strategy strategy, uint256 underlyingAmount)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// A strategy must be trusted before it can be deposited into.\n\t\trequire(getStrategyData[strategy].trusted, \"UNTRUSTED_STRATEGY\");\n\n\t\t// We don't allow depositing 0 to prevent emitting a useless event.\n\t\trequire(underlyingAmount != 0, \"AMOUNT_CANNOT_BE_ZERO\");\n\n\t\t// Increase totalStrategyHoldings to account for the deposit.\n\t\ttotalStrategyHoldings += underlyingAmount;\n\n\t\tunchecked {\n\t\t\t// Without this the next harvest would count the deposit as profit.\n\t\t\t// Cannot overflow as the balance of one strategy can't exceed the sum of all.\n\t\t\tgetStrategyData[strategy].balance += underlyingAmount.safeCastTo248();\n\t\t}\n\n\t\temit StrategyDeposit(msg.sender, strategy, underlyingAmount);\n\n\t\t// We need to deposit differently if the strategy takes ETH.\n\t\tif (strategy.isCEther()) {\n\t\t\t// Unwrap the right amount of WETH.\n\t\t\tWETH(payable(address(UNDERLYING))).withdraw(underlyingAmount);\n\n\t\t\t// Deposit into the strategy and assume it will revert on error.\n\t\t\tETHStrategy(address(strategy)).mint{ value: underlyingAmount }();\n\t\t} else {\n\t\t\t// Approve underlyingAmount to the strategy so we can deposit.\n\t\t\tUNDERLYING.safeApprove(address(strategy), underlyingAmount);\n\n\t\t\t// Deposit into the strategy and revert if it returns an error code.\n\t\t\trequire(ERC20Strategy(address(strategy)).mint(underlyingAmount) == 0, \"MINT_FAILED\");\n\t\t}\n\t}\n\n\t/// @notice Withdraw a specific amount of underlying tokens from a strategy.\n\t/// @param strategy The strategy to withdraw from.\n\t/// @param underlyingAmount  The amount of underlying tokens to withdraw.\n\t/// @dev Withdrawing from a strategy will not remove it from the withdrawal queue.\n\tfunction withdrawFromStrategy(Strategy strategy, uint256 underlyingAmount)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// A strategy must be trusted before it can be withdrawn from.\n\t\trequire(getStrategyData[strategy].trusted, \"UNTRUSTED_STRATEGY\");\n\n\t\t// We don't allow withdrawing 0 to prevent emitting a useless event.\n\t\trequire(underlyingAmount != 0, \"AMOUNT_CANNOT_BE_ZERO\");\n\n\t\t// Without this the next harvest would count the withdrawal as a loss.\n\t\tgetStrategyData[strategy].balance -= underlyingAmount.safeCastTo248();\n\n\t\tunchecked {\n\t\t\t// Decrease totalStrategyHoldings to account for the withdrawal.\n\t\t\t// Cannot underflow as the balance of one strategy will never exceed the sum of all.\n\t\t\ttotalStrategyHoldings -= underlyingAmount;\n\t\t}\n\n\t\temit StrategyWithdrawal(msg.sender, strategy, underlyingAmount);\n\n\t\t// Withdraw from the strategy and revert if it returns an error code.\n\t\trequire(strategy.redeemUnderlying(underlyingAmount) == 0, \"REDEEM_FAILED\");\n\n\t\t// Wrap the withdrawn Ether into WETH if necessary.\n\t\tif (strategy.isCEther())\n\t\t\tWETH(payable(address(UNDERLYING))).deposit{ value: underlyingAmount }();\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                      STRATEGY TRUST/DISTRUST LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a strategy is set to trusted.\n\t/// @param user The authorized user who trusted the strategy.\n\t/// @param strategy The strategy that became trusted.\n\tevent StrategyTrusted(address indexed user, Strategy indexed strategy);\n\n\t/// @notice Emitted when a strategy is set to untrusted.\n\t/// @param user The authorized user who untrusted the strategy.\n\t/// @param strategy The strategy that became untrusted.\n\tevent StrategyDistrusted(address indexed user, Strategy indexed strategy);\n\n\t/// @notice Stores a strategy as trusted, enabling it to be harvested.\n\t/// @param strategy The strategy to make trusted.\n\tfunction trustStrategy(Strategy strategy) external requiresAuth {\n\t\t// Ensure the strategy accepts the correct underlying token.\n\t\t// If the strategy accepts ETH the Vault should accept WETH, it'll handle wrapping when necessary.\n\t\trequire(\n\t\t\tstrategy.isCEther()\n\t\t\t\t? underlyingIsWETH\n\t\t\t\t: ERC20Strategy(address(strategy)).underlying() == UNDERLYING,\n\t\t\t\"WRONG_UNDERLYING\"\n\t\t);\n\n\t\t// Store the strategy as trusted.\n\t\tgetStrategyData[strategy].trusted = true;\n\n\t\temit StrategyTrusted(msg.sender, strategy);\n\t}\n\n\t/// @notice Stores a strategy as untrusted, disabling it from being harvested.\n\t/// @param strategy The strategy to make untrusted.\n\tfunction distrustStrategy(Strategy strategy) external requiresAuth {\n\t\t// Store the strategy as untrusted.\n\t\tgetStrategyData[strategy].trusted = false;\n\n\t\temit StrategyDistrusted(msg.sender, strategy);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                         WITHDRAWAL QUEUE LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a strategy is pushed to the withdrawal queue.\n\t/// @param user The authorized user who triggered the push.\n\t/// @param pushedStrategy The strategy pushed to the withdrawal queue.\n\tevent WithdrawalQueuePushed(address indexed user, Strategy indexed pushedStrategy);\n\n\t/// @notice Emitted when a strategy is popped from the withdrawal queue.\n\t/// @param user The authorized user who triggered the pop.\n\t/// @param poppedStrategy The strategy popped from the withdrawal queue.\n\tevent WithdrawalQueuePopped(address indexed user, Strategy indexed poppedStrategy);\n\n\t/// @notice Emitted when the withdrawal queue is updated.\n\t/// @param user The authorized user who triggered the set.\n\t/// @param replacedWithdrawalQueue The new withdrawal queue.\n\tevent WithdrawalQueueSet(address indexed user, Strategy[] replacedWithdrawalQueue);\n\n\t/// @notice Emitted when an index in the withdrawal queue is replaced.\n\t/// @param user The authorized user who triggered the replacement.\n\t/// @param index The index of the replaced strategy in the withdrawal queue.\n\t/// @param replacedStrategy The strategy in the withdrawal queue that was replaced.\n\t/// @param replacementStrategy The strategy that overrode the replaced strategy at the index.\n\tevent WithdrawalQueueIndexReplaced(\n\t\taddress indexed user,\n\t\tuint256 index,\n\t\tStrategy indexed replacedStrategy,\n\t\tStrategy indexed replacementStrategy\n\t);\n\n\t/// @notice Emitted when an index in the withdrawal queue is replaced with the tip.\n\t/// @param user The authorized user who triggered the replacement.\n\t/// @param index The index of the replaced strategy in the withdrawal queue.\n\t/// @param replacedStrategy The strategy in the withdrawal queue replaced by the tip.\n\t/// @param previousTipStrategy The previous tip of the queue that replaced the strategy.\n\tevent WithdrawalQueueIndexReplacedWithTip(\n\t\taddress indexed user,\n\t\tuint256 index,\n\t\tStrategy indexed replacedStrategy,\n\t\tStrategy indexed previousTipStrategy\n\t);\n\n\t/// @notice Emitted when the strategies at two indexes are swapped.\n\t/// @param user The authorized user who triggered the swap.\n\t/// @param index1 One index involved in the swap\n\t/// @param index2 The other index involved in the swap.\n\t/// @param newStrategy1 The strategy (previously at index2) that replaced index1.\n\t/// @param newStrategy2 The strategy (previously at index1) that replaced index2.\n\tevent WithdrawalQueueIndexesSwapped(\n\t\taddress indexed user,\n\t\tuint256 index1,\n\t\tuint256 index2,\n\t\tStrategy indexed newStrategy1,\n\t\tStrategy indexed newStrategy2\n\t);\n\n\t/// @dev Withdraw a specific amount of underlying tokens from strategies in the withdrawal queue.\n\t/// @param underlyingAmount The amount of underlying tokens to pull into float.\n\t/// @dev Automatically removes depleted strategies from the withdrawal queue.\n\tfunction pullFromWithdrawalQueue(uint256 underlyingAmount) internal {\n\t\t// We will update this variable as we pull from strategies.\n\t\tuint256 amountLeftToPull = underlyingAmount;\n\n\t\t// We'll start at the tip of the queue and traverse backwards.\n\t\tuint256 currentIndex = withdrawalQueue.length - 1;\n\n\t\t// Iterate in reverse so we pull from the queue in a \"last in, first out\" manner.\n\t\t// Will revert due to underflow if we empty the queue before pulling the desired amount.\n\t\tfor (; ; currentIndex--) {\n\t\t\t// Get the strategy at the current queue index.\n\t\t\tStrategy strategy = withdrawalQueue[currentIndex];\n\n\t\t\t// Get the balance of the strategy before we withdraw from it.\n\t\t\tuint256 strategyBalance = getStrategyData[strategy].balance;\n\n\t\t\t// If the strategy is currently untrusted or was already depleted:\n\t\t\tif (!getStrategyData[strategy].trusted || strategyBalance == 0) {\n\t\t\t\t// Remove it from the queue.\n\t\t\t\twithdrawalQueue.pop();\n\n\t\t\t\temit WithdrawalQueuePopped(msg.sender, strategy);\n\n\t\t\t\t// Move onto the next strategy.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// We want to pull as much as we can from the strategy, but no more than we need.\n\t\t\tuint256 amountToPull = FixedPointMathLib.min(amountLeftToPull, strategyBalance);\n\n\t\t\tunchecked {\n\t\t\t\t// Compute the balance of the strategy that will remain after we withdraw.\n\t\t\t\t// Cannot underflow as we cap the amount to pull at the strategy's balance.\n\t\t\t\tuint256 strategyBalanceAfterWithdrawal = strategyBalance - amountToPull;\n\n\t\t\t\t// Without this the next harvest would count the withdrawal as a loss.\n\t\t\t\tgetStrategyData[strategy].balance = strategyBalanceAfterWithdrawal.safeCastTo248();\n\n\t\t\t\t// Adjust our goal based on how much we can pull from the strategy.\n\t\t\t\t// Cannot underflow as we cap the amount to pull at the amount left to pull.\n\t\t\t\tamountLeftToPull -= amountToPull;\n\n\t\t\t\temit StrategyWithdrawal(msg.sender, strategy, amountToPull);\n\n\t\t\t\t// Withdraw from the strategy and revert if returns an error code.\n\t\t\t\trequire(strategy.redeemUnderlying(amountToPull) == 0, \"REDEEM_FAILED\");\n\n\t\t\t\t// If we fully depleted the strategy:\n\t\t\t\tif (strategyBalanceAfterWithdrawal == 0) {\n\t\t\t\t\t// Remove it from the queue.\n\t\t\t\t\twithdrawalQueue.pop();\n\n\t\t\t\t\temit WithdrawalQueuePopped(msg.sender, strategy);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we've pulled all we need, exit the loop.\n\t\t\tif (amountLeftToPull == 0) break;\n\t\t}\n\n\t\tunchecked {\n\t\t\t// Account for the withdrawals done in the loop above.\n\t\t\t// Cannot underflow as the balances of some strategies cannot exceed the sum of all.\n\t\t\ttotalStrategyHoldings -= underlyingAmount;\n\t\t}\n\n\t\t// Cache the Vault's balance of ETH.\n\t\tuint256 ethBalance = address(this).balance;\n\n\t\t// If the Vault's underlying token is WETH compatible and we have some ETH, wrap it into WETH.\n\t\tif (ethBalance != 0 && underlyingIsWETH)\n\t\t\tWETH(payable(address(UNDERLYING))).deposit{ value: ethBalance }();\n\t}\n\n\t/// @notice Pushes a single strategy to front of the withdrawal queue.\n\t/// @param strategy The strategy to be inserted at the front of the withdrawal queue.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\n\t/// filtered out when encountered at withdrawal time, not validated upfront.\n\tfunction pushToWithdrawalQueue(Strategy strategy) external requiresAuth {\n\t\t// Push the strategy to the front of the queue.\n\t\twithdrawalQueue.push(strategy);\n\n\t\temit WithdrawalQueuePushed(msg.sender, strategy);\n\t}\n\n\t/// @notice Removes the strategy at the tip of the withdrawal queue.\n\t/// @dev Be careful, another authorized user could push a different strategy\n\t/// than expected to the queue while a popFromWithdrawalQueue transaction is pending.\n\tfunction popFromWithdrawalQueue() external requiresAuth {\n\t\t// Get the (soon to be) popped strategy.\n\t\tStrategy poppedStrategy = withdrawalQueue[withdrawalQueue.length - 1];\n\n\t\t// Pop the first strategy in the queue.\n\t\twithdrawalQueue.pop();\n\n\t\temit WithdrawalQueuePopped(msg.sender, poppedStrategy);\n\t}\n\n\t/// @notice Sets a new withdrawal queue.\n\t/// @param newQueue The new withdrawal queue.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\n\t/// filtered out when encountered at withdrawal time, not validated upfront.\n\tfunction setWithdrawalQueue(Strategy[] calldata newQueue) external requiresAuth {\n\t\t// Replace the withdrawal queue.\n\t\twithdrawalQueue = newQueue;\n\n\t\temit WithdrawalQueueSet(msg.sender, newQueue);\n\t}\n\n\t/// @notice Replaces an index in the withdrawal queue with another strategy.\n\t/// @param index The index in the queue to replace.\n\t/// @param replacementStrategy The strategy to override the index with.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\n\t/// filtered out when encountered at withdrawal time, not validated upfront.\n\tfunction replaceWithdrawalQueueIndex(uint256 index, Strategy replacementStrategy)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// Get the (soon to be) replaced strategy.\n\t\tStrategy replacedStrategy = withdrawalQueue[index];\n\n\t\t// Update the index with the replacement strategy.\n\t\twithdrawalQueue[index] = replacementStrategy;\n\n\t\temit WithdrawalQueueIndexReplaced(msg.sender, index, replacedStrategy, replacementStrategy);\n\t}\n\n\t/// @notice Moves the strategy at the tip of the queue to the specified index and pop the tip off the queue.\n\t/// @param index The index of the strategy in the withdrawal queue to replace with the tip.\n\tfunction replaceWithdrawalQueueIndexWithTip(uint256 index) external requiresAuth {\n\t\t// Get the (soon to be) previous tip and strategy we will replace at the index.\n\t\tStrategy previousTipStrategy = withdrawalQueue[withdrawalQueue.length - 1];\n\t\tStrategy replacedStrategy = withdrawalQueue[index];\n\n\t\t// Replace the index specified with the tip of the queue.\n\t\twithdrawalQueue[index] = previousTipStrategy;\n\n\t\t// Remove the now duplicated tip from the array.\n\t\twithdrawalQueue.pop();\n\n\t\temit WithdrawalQueueIndexReplacedWithTip(\n\t\t\tmsg.sender,\n\t\t\tindex,\n\t\t\treplacedStrategy,\n\t\t\tpreviousTipStrategy\n\t\t);\n\t}\n\n\t/// @notice Swaps two indexes in the withdrawal queue.\n\t/// @param index1 One index involved in the swap\n\t/// @param index2 The other index involved in the swap.\n\tfunction swapWithdrawalQueueIndexes(uint256 index1, uint256 index2) external requiresAuth {\n\t\t// Get the (soon to be) new strategies at each index.\n\t\tStrategy newStrategy2 = withdrawalQueue[index1];\n\t\tStrategy newStrategy1 = withdrawalQueue[index2];\n\n\t\t// Swap the strategies at both indexes.\n\t\twithdrawalQueue[index1] = newStrategy1;\n\t\twithdrawalQueue[index2] = newStrategy2;\n\n\t\temit WithdrawalQueueIndexesSwapped(msg.sender, index1, index2, newStrategy1, newStrategy2);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                         SEIZE STRATEGY LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after a strategy is seized.\n\t/// @param user The authorized user who triggered the seize.\n\t/// @param strategy The strategy that was seized.\n\tevent StrategySeized(address indexed user, Strategy indexed strategy);\n\n\t/// @notice Seizes a strategy.\n\t/// @param strategy The strategy to seize.\n\t/// @dev Intended for use in emergencies or other extraneous situations where the\n\t/// strategy requires interaction outside of the Vault's standard operating procedures.\n\tfunction seizeStrategy(Strategy strategy) external requiresAuth {\n\t\t// A strategy must be trusted before it can be seized.\n\t\trequire(getStrategyData[strategy].trusted, \"UNTRUSTED_STRATEGY\");\n\n\t\t// Get the strategy's last reported balance of underlying tokens.\n\t\tuint256 strategyBalance = getStrategyData[strategy].balance;\n\n\t\t// If the strategy's balance exceeds the Vault's current\n\t\t// holdings, instantly unlock any remaining locked profit.\n\t\tif (strategyBalance > totalHoldings()) maxLockedProfit = 0;\n\n\t\t// Set the strategy's balance to 0.\n\t\tgetStrategyData[strategy].balance = 0;\n\n\t\tunchecked {\n\t\t\t// Decrease totalStrategyHoldings to account for the seize.\n\t\t\t// Cannot underflow as the balance of one strategy will never exceed the sum of all.\n\t\t\ttotalStrategyHoldings -= strategyBalance;\n\t\t}\n\n\t\temit StrategySeized(msg.sender, strategy);\n\n\t\t// Transfer all of the strategy's tokens to the caller.\n\t\tERC20(strategy).safeTransfer(msg.sender, strategy.balanceOf(address(this)));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                             FEE CLAIM LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after fees are claimed.\n\t/// @param user The authorized user who claimed the fees.\n\t/// @param rvTokenAmount The amount of rvTokens that were claimed.\n\tevent FeesClaimed(address indexed user, uint256 rvTokenAmount);\n\n\t/// @notice Claims fees accrued from harvests.\n\t/// @param rvTokenAmount The amount of rvTokens to claim.\n\t/// @dev Accrued fees are measured as rvTokens held by the Vault.\n\tfunction claimFees(uint256 rvTokenAmount) external requiresAuth {\n\t\temit FeesClaimed(msg.sender, rvTokenAmount);\n\n\t\t// Transfer the provided amount of rvTokens to the caller.\n\t\tERC20(this).safeTransfer(msg.sender, rvTokenAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                    INITIALIZATION AND DESTRUCTION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when the Vault is initialized.\n\t/// @param user The authorized user who triggered the initialization.\n\tevent Initialized(address indexed user);\n\n\t/// @notice Whether the Vault has been initialized yet.\n\t/// @dev Can go from false to true, never from true to false.\n\tbool public isInitialized;\n\n\t/// @notice Initializes the Vault, enabling it to receive deposits.\n\t/// @dev All critical parameters must already be set before calling.\n\tfunction initialize() external requiresAuth {\n\t\t// Ensure the Vault has not already been initialized.\n\t\trequire(!isInitialized, \"ALREADY_INITIALIZED\");\n\n\t\t// Mark the Vault as initialized.\n\t\tisInitialized = true;\n\n\t\t// Open for deposits.\n\t\ttotalSupply = 0;\n\n\t\temit Initialized(msg.sender);\n\t}\n\n\t/// @notice Self destructs a Vault, enabling it to be redeployed.\n\t/// @dev Caller will receive any ETH held as float in the Vault.\n\tfunction destroy() external requiresAuth {\n\t\tselfdestruct(payable(msg.sender));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          RECIEVE ETHER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Required for the Vault to receive unwrapped ETH.\n\treceive() external payable {}\n}\n"
    },
    "solmate/src/auth/Auth.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.0;\n\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\ninterface Authority {\n    function canCall(\n        address user,\n        address target,\n        bytes4 functionSig\n    ) external view returns (bool);\n}\n\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\nabstract contract Auth {\n    event OwnerUpdated(address indexed owner);\n\n    event AuthorityUpdated(Authority indexed authority);\n\n    address public owner;\n\n    Authority public authority;\n\n    constructor(address _owner, Authority _authority) {\n        owner = _owner;\n        authority = _authority;\n\n        emit OwnerUpdated(_owner);\n        emit AuthorityUpdated(_authority);\n    }\n\n    function setOwner(address newOwner) public virtual requiresAuth {\n        owner = newOwner;\n\n        emit OwnerUpdated(owner);\n    }\n\n    function setAuthority(Authority newAuthority) public virtual requiresAuth {\n        authority = newAuthority;\n\n        emit AuthorityUpdated(authority);\n    }\n\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\n        Authority cachedAuthority = authority;\n\n        if (address(cachedAuthority) != address(0)) {\n            try cachedAuthority.canCall(user, address(this), functionSig) returns (bool canCall) {\n                if (canCall) return true;\n            } catch {}\n        }\n\n        return user == owner;\n    }\n\n    modifier requiresAuth() {\n        require(isAuthorized(msg.sender, msg.sig), \"UNAUTHORIZED\");\n\n        _;\n    }\n}\n"
    },
    "solmate/src/utils/SafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.0;\n\n/// @notice Safe unsigned integer casting library that reverts on overflow.\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\nlibrary SafeCastLib {\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\n        require(x <= type(uint248).max);\n\n        y = uint248(x);\n    }\n\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\n        require(x <= type(uint128).max);\n\n        y = uint128(x);\n    }\n\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\n        require(x <= type(uint96).max);\n\n        y = uint96(x);\n    }\n\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\n        require(x <= type(uint64).max);\n\n        y = uint64(x);\n    }\n\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\n        require(x <= type(uint32).max);\n\n        y = uint32(x);\n    }\n}\n"
    },
    "src/vault/interfaces/Strategy.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { ERC20 } from \"solmate/src/tokens/ERC20.sol\";\n\n/// @notice Minimal interface for Vault compatible strategies.\n/// @dev Designed for out of the box compatibility with Fuse cTokens.\n/// @dev Like cTokens, strategies must be transferrable ERC20s.\nabstract contract Strategy is ERC20 {\n\t/// @notice Returns whether the strategy accepts ETH or an ERC20.\n\t/// @return True if the strategy accepts ETH, false otherwise.\n\t/// @dev Only present in Fuse cTokens, not Compound cTokens.\n\tfunction isCEther() external view virtual returns (bool);\n\n\t/// @notice Withdraws a specific amount of underlying tokens from the strategy.\n\t/// @param amount The amount of underlying tokens to withdraw.\n\t/// @return An error code, or 0 if the withdrawal was successful.\n\tfunction redeemUnderlying(uint256 amount) external virtual returns (uint256);\n\n\t/// @notice Returns a user's strategy balance in underlying tokens.\n\t/// @param user The user to get the underlying balance of.\n\t/// @return The user's strategy balance in underlying tokens.\n\t/// @dev May mutate the state of the strategy by accruing interest.\n\tfunction balanceOfUnderlying(address user) external virtual returns (uint256);\n}\n\n/// @notice Minimal interface for Vault strategies that accept ERC20s.\n/// @dev Designed for out of the box compatibility with Fuse cERC20s.\nabstract contract ERC20Strategy is Strategy {\n\t/// @notice Returns the underlying ERC20 token the strategy accepts.\n\t/// @return The underlying ERC20 token the strategy accepts.\n\tfunction underlying() external view virtual returns (ERC20);\n\n\t/// @notice Deposit a specific amount of underlying tokens into the strategy.\n\t/// @param amount The amount of underlying tokens to deposit.\n\t/// @return An error code, or 0 if the deposit was successful.\n\tfunction mint(uint256 amount) external virtual returns (uint256);\n}\n\n/// @notice Minimal interface for Vault strategies that accept ETH.\n/// @dev Designed for out of the box compatibility with Fuse cEther.\nabstract contract ETHStrategy is Strategy {\n\t/// @notice Deposit a specific amount of ETH into the strategy.\n\t/// @dev The amount of ETH is specified via msg.value. Reverts on error.\n\tfunction mint() external payable virtual;\n}\n"
    },
    "src/vault/VaultFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { ERC20 } from \"solmate/src/tokens/ERC20.sol\";\nimport { Auth, Authority } from \"solmate/src/auth/Auth.sol\";\nimport { Bytes32AddressLib } from \"solmate/src/utils/Bytes32AddressLib.sol\";\n\nimport { Vault } from \"./Vault.sol\";\n\nimport \"hardhat/console.sol\";\n\n/// @title Rari Vault Factory\n/// @author Transmissions11 and JetJadeja\n/// @notice Factory which enables deploying a Vault for any ERC20 token.\ncontract VaultFactory is Auth {\n\tusing Bytes32AddressLib for address;\n\tusing Bytes32AddressLib for bytes32;\n\n\t/*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Creates a Vault factory.\n\t/// @param _owner The owner of the factory.\n\t/// @param _authority The Authority of the factory.\n\tconstructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\n\n\t/*///////////////////////////////////////////////////////////////\n                          VAULT DEPLOYMENT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a new Vault is deployed.\n\t/// @param vault The newly deployed Vault contract.\n\t/// @param underlying The underlying token the new Vault accepts.\n\tevent VaultDeployed(Vault vault, ERC20 underlying);\n\n\t/// @notice Deploys a new Vault which supports a specific underlying token.\n\t/// @dev This will revert if a Vault that accepts the same underlying token has already been deployed.\n\t/// @param underlying The ERC20 token that the Vault should accept.\n\t/// @param id We may have different vaults w different credit ratings for the same asset\n\t/// @return vault The newly deployed Vault contract which accepts the provided underlying token.\n\tfunction deployVault(ERC20 underlying, uint256 id) external returns (Vault vault) {\n\t\t// Use the CREATE2 opcode to deploy a new Vault contract.\n\t\t// This will revert if a Vault which accepts this underlying token has already\n\t\t// been deployed, as the salt would be the same and we can't deploy with it twice.\n\t\tvault = new Vault{ salt: address(underlying).fillLast12Bytes() | bytes32(id) }(underlying);\n\n\t\temit VaultDeployed(vault, underlying);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            VAULT LOOKUP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Computes a Vault's address from its accepted underlying token.\n\t/// @param underlying The ERC20 token that the Vault should accept.\n\t/// @param id We may have different vaults w different credit ratings for the same asset\n\t/// @return The address of a Vault which accepts the provided underlying token.\n\t/// @dev The Vault returned may not be deployed yet. Use isVaultDeployed to check.\n\tfunction getVaultFromUnderlying(ERC20 underlying, uint256 id) external view returns (Vault) {\n\t\treturn\n\t\t\tVault(\n\t\t\t\tpayable(\n\t\t\t\t\tkeccak256(\n\t\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\t\t// Prefix:\n\t\t\t\t\t\t\tbytes1(0xFF),\n\t\t\t\t\t\t\t// Creator:\n\t\t\t\t\t\t\taddress(this),\n\t\t\t\t\t\t\t// Salt:\n\t\t\t\t\t\t\taddress(underlying).fillLast12Bytes() | bytes32(id),\n\t\t\t\t\t\t\t// Bytecode hash:\n\t\t\t\t\t\t\tkeccak256(\n\t\t\t\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\t\t\t\t// Deployment bytecode:\n\t\t\t\t\t\t\t\t\ttype(Vault).creationCode,\n\t\t\t\t\t\t\t\t\t// Constructor arguments:\n\t\t\t\t\t\t\t\t\tabi.encode(underlying)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t).fromLast20Bytes() // Convert the CREATE2 hash into an address.\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\t/// @notice Returns if a Vault at an address has already been deployed.\n\t/// @param vault The address of a Vault which may not have been deployed yet.\n\t/// @return A boolean indicating whether the Vault has been deployed already.\n\t/// @dev This function is useful to check the return values of getVaultFromUnderlying,\n\t/// as it does not check that the Vault addresses it computes have been deployed yet.\n\tfunction isVaultDeployed(Vault vault) external view returns (bool) {\n\t\treturn address(vault).code.length > 0;\n\t}\n}\n"
    },
    "solmate/src/utils/Bytes32AddressLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.0;\n\n/// @notice Library for converting between addresses and bytes32 values.\n/// @author Original work by Transmissions11 (https://github.com/transmissions11)\nlibrary Bytes32AddressLib {\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\n        return bytes32(bytes20(addressValue));\n    }\n}\n"
    },
    "src/vault/modules/VaultInitializationModule.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { ERC20 } from \"solmate/src/tokens/ERC20.sol\";\nimport { Auth, Authority } from \"solmate/src/auth/Auth.sol\";\n\nimport { Vault } from \"../Vault.sol\";\nimport { VaultFactory } from \"../VaultFactory.sol\";\n\nimport { VaultConfigurationModule } from \"./VaultConfigurationModule.sol\";\n\n/// @title Rari Vault Initialization Module\n/// @author Transmissions11 and JetJadeja\n/// @notice Module for initializing newly created Vaults.\ncontract VaultInitializationModule is Auth {\n\t/// @notice Vault configuration module used to configure Vaults before initialization.\n\tVaultConfigurationModule public configModule;\n\n\t/// @notice Creates a Vault initialization module.\n\t/// @param _configModule The Vault configuration module the\n\t/// module will use to configure Vaults before initialization.\n\t/// @param _owner The owner of the module.\n\t/// @param _authority The Authority of the module.\n\tconstructor(\n\t\tVaultConfigurationModule _configModule,\n\t\taddress _owner,\n\t\tAuthority _authority\n\t) Auth(_owner, _authority) {\n\t\tconfigModule = _configModule;\n\t}\n\n\t/// @notice Emitted when the config module is updated.\n\t/// @param newConfigModule The new configuration module.\n\tevent ConfigModuleUpdated(VaultConfigurationModule newConfigModule);\n\n\t/// @notice Sets a new Vault configuration module.\n\t/// @param newConfigModule The Vault configuration module to set.\n\tfunction setConfigModule(VaultConfigurationModule newConfigModule) external requiresAuth {\n\t\t// Update the config module.\n\t\tconfigModule = newConfigModule;\n\n\t\temit ConfigModuleUpdated(newConfigModule);\n\t}\n\n\t/// @notice Properly configures and initializes a newly deployed Vault.\n\t/// @dev This will revert if the Vault has already been initialized.\n\t/// @param vault The Vault to configure and initialize.\n\tfunction initializeVault(Vault vault) external {\n\t\t// Configure all key parameters.\n\t\tconfigModule.syncFeePercent(vault);\n\t\tconfigModule.syncHarvestDelay(vault);\n\t\tconfigModule.syncHarvestWindow(vault);\n\t\tconfigModule.syncTargetFloatPercent(vault);\n\n\t\t// Open the Vault up for deposits.\n\t\tvault.initialize();\n\t}\n}\n"
    },
    "src/vault/modules/VaultConfigurationModule.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { Auth, Authority } from \"solmate/src/auth/Auth.sol\";\n\nimport { Vault } from \"../Vault.sol\";\n\n/// @title Rari Vault Configuration Module\n/// @author Transmissions11 and JetJadeja\n/// @notice Module for configuring Vault parameters.\ncontract VaultConfigurationModule is Auth {\n\t/*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Creates a Vault configuration module.\n\t/// @param _owner The owner of the module.\n\t/// @param _authority The Authority of the module.\n\tconstructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\n\n\t/*///////////////////////////////////////////////////////////////\n                  DEFAULT VAULT PARAMETER CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when the default fee percentage is updated.\n\t/// @param newDefaultFeePercent The new default fee percentage.\n\tevent DefaultFeePercentUpdated(uint256 newDefaultFeePercent);\n\n\t/// @notice Emitted when the default harvest delay is updated.\n\t/// @param newDefaultHarvestDelay The new default harvest delay.\n\tevent DefaultHarvestDelayUpdated(uint64 newDefaultHarvestDelay);\n\n\t/// @notice Emitted when the default harvest window is updated.\n\t/// @param newDefaultHarvestWindow The new default harvest window.\n\tevent DefaultHarvestWindowUpdated(uint128 newDefaultHarvestWindow);\n\n\t/// @notice Emitted when the default target float percentage is updated.\n\t/// @param newDefaultTargetFloatPercent The new default target float percentage.\n\tevent DefaultTargetFloatPercentUpdated(uint256 newDefaultTargetFloatPercent);\n\n\t/// @notice The default fee percentage for Vaults.\n\tuint256 public defaultFeePercent;\n\n\t/// @notice The default harvest delay for Vaults.\n\tuint64 public defaultHarvestDelay;\n\n\t/// @notice The default harvest window for Vaults.\n\tuint128 public defaultHarvestWindow;\n\n\t/// @notice The default target float percentage for Vaults.\n\tuint256 public defaultTargetFloatPercent;\n\n\t/// @notice Sets the default fee percentage for Vaults.\n\t/// @param newDefaultFeePercent The new default fee percentage to set.\n\tfunction setDefaultFeePercent(uint256 newDefaultFeePercent) external requiresAuth {\n\t\t// Update the default fee percentage.\n\t\tdefaultFeePercent = newDefaultFeePercent;\n\n\t\temit DefaultFeePercentUpdated(newDefaultFeePercent);\n\t}\n\n\t/// @notice Sets the default harvest delay for Vaults.\n\t/// @param newDefaultHarvestDelay The new default harvest delay to set.\n\tfunction setDefaultHarvestDelay(uint64 newDefaultHarvestDelay) external requiresAuth {\n\t\t// Update the default harvest delay.\n\t\tdefaultHarvestDelay = newDefaultHarvestDelay;\n\n\t\temit DefaultHarvestDelayUpdated(newDefaultHarvestDelay);\n\t}\n\n\t/// @notice Sets the default harvest window for Vaults.\n\t/// @param newDefaultHarvestWindow The new default harvest window to set.\n\tfunction setDefaultHarvestWindow(uint128 newDefaultHarvestWindow) external requiresAuth {\n\t\t// Update the default harvest window.\n\t\tdefaultHarvestWindow = newDefaultHarvestWindow;\n\n\t\temit DefaultHarvestWindowUpdated(newDefaultHarvestWindow);\n\t}\n\n\t/// @notice Sets the default target float percentage for Vaults.\n\t/// @param newDefaultTargetFloatPercent The new default target float percentage to set.\n\tfunction setDefaultTargetFloatPercent(uint256 newDefaultTargetFloatPercent)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// Update the default target float percentage.\n\t\tdefaultTargetFloatPercent = newDefaultTargetFloatPercent;\n\n\t\temit DefaultTargetFloatPercentUpdated(newDefaultTargetFloatPercent);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                  CUSTOM VAULT PARAMETER CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a Vault has its custom fee percentage set/updated.\n\t/// @param vault The Vault that had its custom fee percentage set/updated.\n\t/// @param newCustomFeePercent The new custom fee percentage for the Vault.\n\tevent CustomFeePercentUpdated(Vault indexed vault, uint256 newCustomFeePercent);\n\n\t/// @notice Emitted when a Vault has its custom harvest delay set/updated.\n\t/// @param vault The Vault that had its custom harvest delay set/updated.\n\t/// @param newCustomHarvestDelay The new custom harvest delay for the Vault.\n\tevent CustomHarvestDelayUpdated(Vault indexed vault, uint256 newCustomHarvestDelay);\n\n\t/// @notice Emitted when a Vault has its custom harvest window set/updated.\n\t/// @param vault The Vault that had its custom harvest window set/updated.\n\t/// @param newCustomHarvestWindow The new custom harvest window for the Vault.\n\tevent CustomHarvestWindowUpdated(Vault indexed vault, uint256 newCustomHarvestWindow);\n\n\t/// @notice Emitted when a Vault has its custom target float percentage set/updated.\n\t/// @param vault The Vault that had its custom target float percentage set/updated.\n\t/// @param newCustomTargetFloatPercent The new custom target float percentage for the Vault.\n\tevent CustomTargetFloatPercentUpdated(Vault indexed vault, uint256 newCustomTargetFloatPercent);\n\n\t/// @notice Maps Vaults to their custom fee percentage.\n\t/// @dev Will be 0 if there is no custom fee percentage for the Vault.\n\tmapping(Vault => uint256) public getVaultCustomFeePercent;\n\n\t/// @notice Maps Vaults to their custom harvest delay.\n\t/// @dev Will be 0 if there is no custom harvest delay for the Vault.\n\tmapping(Vault => uint64) public getVaultCustomHarvestDelay;\n\n\t/// @notice Maps Vaults to their custom harvest window.\n\t/// @dev Will be 0 if there is no custom harvest window for the Vault.\n\tmapping(Vault => uint128) public getVaultCustomHarvestWindow;\n\n\t/// @notice Maps Vaults to their custom target float percentage.\n\t/// @dev Will be 0 if there is no custom target float percentage for the Vault.\n\tmapping(Vault => uint256) public getVaultCustomTargetFloatPercent;\n\n\t/// @notice Sets the custom fee percentage for the Vault.\n\t/// @param vault The Vault to set the custom fee percentage for.\n\t/// @param customFeePercent The new custom fee percentage to set.\n\tfunction setVaultCustomFeePercent(Vault vault, uint256 customFeePercent) external requiresAuth {\n\t\t// Update the Vault's custom fee percentage.\n\t\tgetVaultCustomFeePercent[vault] = customFeePercent;\n\n\t\temit CustomFeePercentUpdated(vault, customFeePercent);\n\t}\n\n\t/// @notice Sets the custom harvest delay for the Vault.\n\t/// @param vault The Vault to set the custom harvest delay for.\n\t/// @param customHarvestDelay The new custom harvest delay to set.\n\tfunction setVaultCustomHarvestDelay(Vault vault, uint64 customHarvestDelay)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// Update the Vault's custom harvest delay.\n\t\tgetVaultCustomHarvestDelay[vault] = customHarvestDelay;\n\n\t\temit CustomHarvestDelayUpdated(vault, customHarvestDelay);\n\t}\n\n\t/// @notice Sets the custom harvest window for the Vault.\n\t/// @param vault The Vault to set the custom harvest window for.\n\t/// @param customHarvestWindow The new custom harvest window to set.\n\tfunction setVaultCustomHarvestWindow(Vault vault, uint128 customHarvestWindow)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// Update the Vault's custom harvest window.\n\t\tgetVaultCustomHarvestWindow[vault] = customHarvestWindow;\n\n\t\temit CustomHarvestWindowUpdated(vault, customHarvestWindow);\n\t}\n\n\t/// @notice Sets the custom target float percentage for the Vault.\n\t/// @param vault The Vault to set the custom target float percentage for.\n\t/// @param customTargetFloatPercent The new custom target float percentage to set.\n\tfunction setVaultCustomTargetFloatPercent(Vault vault, uint256 customTargetFloatPercent)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// Update the Vault's custom target float percentage.\n\t\tgetVaultCustomTargetFloatPercent[vault] = customTargetFloatPercent;\n\n\t\temit CustomTargetFloatPercentUpdated(vault, customTargetFloatPercent);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                       VAULT PARAMETER SYNC LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Syncs a Vault's fee percentage with either the Vault's custom fee\n\t/// percentage or the default fee percentage if a custom percentage is not set.\n\t/// @param vault The Vault to sync the fee percentage for.\n\tfunction syncFeePercent(Vault vault) external {\n\t\t// Get the Vault's custom fee percentage.\n\t\tuint256 customFeePercent = getVaultCustomFeePercent[vault];\n\n\t\t// Set the Vault's fee percentage to the custom fee percentage\n\t\t// or the default fee percentage if a custom percentage isn't set.\n\t\tvault.setFeePercent(customFeePercent == 0 ? defaultFeePercent : customFeePercent);\n\t}\n\n\t/// @notice Syncs a Vault's harvest delay with either the Vault's custom\n\t/// harvest delay or the default harvest delay if a custom delay is not set.\n\t/// @param vault The Vault to sync the harvest delay for.\n\tfunction syncHarvestDelay(Vault vault) external {\n\t\t// Get the Vault's custom harvest delay.\n\t\tuint64 customHarvestDelay = getVaultCustomHarvestDelay[vault];\n\n\t\t// Set the Vault's harvest delay to the custom harvest delay\n\t\t// or the default harvest delay if a custom delay isn't set.\n\t\tvault.setHarvestDelay(customHarvestDelay == 0 ? defaultHarvestDelay : customHarvestDelay);\n\t}\n\n\t/// @notice Syncs a Vault's harvest window with either the Vault's custom\n\t/// harvest window or the default harvest window if a custom window is not set.\n\t/// @param vault The Vault to sync the harvest window for.\n\tfunction syncHarvestWindow(Vault vault) external {\n\t\t// Get the Vault's custom harvest window.\n\t\tuint128 customHarvestWindow = getVaultCustomHarvestWindow[vault];\n\n\t\t// Set the Vault's harvest window to the custom harvest window\n\t\t// or the default harvest window if a custom window isn't set.\n\t\tvault.setHarvestWindow(\n\t\t\tcustomHarvestWindow == 0 ? defaultHarvestWindow : customHarvestWindow\n\t\t);\n\t}\n\n\t/// @notice Syncs a Vault's target float percentage with either the Vault's custom target\n\t/// float percentage or the default target float percentage if a custom percentage is not set.\n\t/// @param vault The Vault to sync the target float percentage for.\n\tfunction syncTargetFloatPercent(Vault vault) external {\n\t\t// Get the Vault's custom target float percentage.\n\t\tuint256 customTargetFloatPercent = getVaultCustomTargetFloatPercent[vault];\n\n\t\t// Set the Vault's target float percentage to the custom target float percentage\n\t\t// or the default target float percentage if a custom percentage isn't set.\n\t\tvault.setTargetFloatPercent(\n\t\t\tcustomTargetFloatPercent == 0 ? defaultTargetFloatPercent : customTargetFloatPercent\n\t\t);\n\t}\n}\n"
    },
    "src/vault/modules/VaultAuthorityModule.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.10;\n\nimport { Auth, Authority } from \"solmate/src/auth/Auth.sol\";\nimport { Trust } from \"solmate/src/auth/Trust.sol\";\n\n/// @title Rari Vault Authority Module\n/// @notice Module for managing access to secured Vault operations.\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/src/blob/main/src/auth/authorities/RolesAuthority.sol)\ncontract VaultAuthorityModule is Auth, Authority, Trust {\n\t/*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Creates a Vault configuration module.\n\t/// @param _owner The owner of the module.\n\t/// @param _authority The Authority of the module.\n\tconstructor(address _owner, Authority _authority) Auth(_owner, _authority) Trust(_owner) {}\n\n\t/*///////////////////////////////////////////////////////////////\n                       CUSTOM TARGET AUTHORITY STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Maps targets to a custom Authority to use for authorization.\n\tmapping(address => Authority) public getTargetCustomAuthority;\n\n\t/*///////////////////////////////////////////////////////////////\n                             USER ROLE STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Maps users to a bytes32 set of all the roles assigned to them.\n\tmapping(address => bytes32) public getUserRoles;\n\n\t/// @notice Gets whether a user has a specific role.\n\t/// @param user The user to check for.\n\t/// @param role The role to check if the user has.\n\t/// @return A boolean indicating whether the user has the role.\n\tfunction doesUserHaveRole(address user, uint8 role) external view returns (bool) {\n\t\tunchecked {\n\t\t\t// Generate a mask for the role.\n\t\t\tbytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n\n\t\t\t// Check if the user has the role using the generated mask.\n\t\t\treturn bytes32(0) != getUserRoles[user] & shifted;\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        ROLE CAPABILITY STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Maps function signatures to a set of all roles that can call the given function.\n\tmapping(bytes4 => bytes32) public getRoleCapabilities;\n\n\t/// @notice Maps function signatures to a boolean indicating whether anyone can call the given function.\n\tmapping(bytes4 => bool) public isCapabilityPublic;\n\n\t/// @notice Gets whether a role has a specific capability.\n\t/// @param role The role to check for.\n\t/// @param functionSig function to check the role is capable of calling.\n\t/// @return A boolean indicating whether the role has the capability.\n\tfunction doesRoleHaveCapability(uint8 role, bytes4 functionSig)\n\t\texternal\n\t\tview\n\t\tvirtual\n\t\treturns (bool)\n\t{\n\t\tunchecked {\n\t\t\t// Generate a mask for the role.\n\t\t\tbytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n\n\t\t\t// Check if the role has the capability using the generated mask.\n\t\t\treturn bytes32(0) != getRoleCapabilities[functionSig] & shifted;\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          AUTHORIZATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Returns if a user can call a given target's function.\n\t/// @param user The user to check for.\n\t/// @param target The target the user is trying to call.\n\t/// @param functionSig The function signature the user is trying to call.\n\t/// @return A boolean indicating if the user can call the function on the target.\n\t/// @dev First checks whether the target has a custom Authority assigned to it, if so returns\n\t/// whether the custom Authority would allow the user to call the desired function on the target,\n\t/// otherwise returns whether the user is able to call the desired function on any target contract.\n\tfunction canCall(\n\t\taddress user,\n\t\taddress target,\n\t\tbytes4 functionSig\n\t) external view override returns (bool) {\n\t\t// Get the target's custom Authority. Will be address(0) if none.\n\t\tAuthority customAuthority = getTargetCustomAuthority[target];\n\n\t\t// If a custom Authority is set, return whether the Authority allows the user to call the function.\n\t\tif (address(customAuthority) != address(0))\n\t\t\treturn customAuthority.canCall(user, target, functionSig);\n\n\t\t// Return whether the user has an authorized role or the capability is publicly accessible.\n\t\treturn\n\t\t\tbytes32(0) != getUserRoles[user] & getRoleCapabilities[functionSig] ||\n\t\t\tisCapabilityPublic[functionSig] ||\n\t\t\tisTrusted[user];\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n               CUSTOM TARGET AUTHORITY CONFIGURATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a custom Authority is set for a target.\n\t/// @param target The target who had a custom Authority set.\n\t/// @param authority The custom Authority set for the target.\n\tevent TargetCustomAuthorityUpdated(address indexed target, Authority indexed authority);\n\n\t/// @notice Sets a custom Authority for a target.\n\t/// @param target The target to set a custom Authority for.\n\t/// @param customAuthority The custom Authority to set.\n\tfunction setTargetCustomAuthority(address target, Authority customAuthority)\n\t\texternal\n\t\trequiresAuth\n\t{\n\t\t// Update the target's custom Authority.\n\t\tgetTargetCustomAuthority[target] = customAuthority;\n\n\t\temit TargetCustomAuthorityUpdated(target, customAuthority);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                  ROLE CAPABILITY CONFIGURATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a role's capabilities are updated.\n\t/// @param role The role whose capabilities were updated.\n\t/// @param functionSig The function the role was enabled to call or not.\n\t/// @param enabled Whether the role is now able to call the function or not.\n\tevent RoleCapabilityUpdated(uint8 indexed role, bytes4 indexed functionSig, bool enabled);\n\n\t/// @notice Sets a capability for a role.\n\t/// @param role The role to set a capability for.\n\t/// @param functionSig The function to enable the role to call or not.\n\t/// @param enabled Whether the role should be able to call the function or not.\n\tfunction setRoleCapability(\n\t\tuint8 role,\n\t\tbytes4 functionSig,\n\t\tbool enabled\n\t) external requiresAuth {\n\t\t// Get the previous set of role capabilities.\n\t\tbytes32 lastCapabilities = getRoleCapabilities[functionSig];\n\n\t\tunchecked {\n\t\t\t// Generate a mask for the role.\n\t\t\tbytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n\n\t\t\t// Update the role's capability set with the role mask.\n\t\t\tgetRoleCapabilities[functionSig] = enabled\n\t\t\t\t? lastCapabilities | shifted\n\t\t\t\t: lastCapabilities & ~shifted;\n\t\t}\n\n\t\temit RoleCapabilityUpdated(role, functionSig, enabled);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                  PUBLIC CAPABILITY CONFIGURATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when whether a capability is public is updated.\n\t/// @param functionSig The function that was made public or not.\n\t/// @param enabled Whether the function is not publicly callable or not.\n\tevent PublicCapabilityUpdated(bytes4 indexed functionSig, bool enabled);\n\n\t/// @notice Sets whether a capability is public or not.\n\t/// @param functionSig The function make public or not.\n\t/// @param enabled Whether the function should be public or not.\n\tfunction setPublicCapability(bytes4 functionSig, bool enabled) external requiresAuth {\n\t\t// Update whether the capability is public.\n\t\tisCapabilityPublic[functionSig] = enabled;\n\n\t\temit PublicCapabilityUpdated(functionSig, enabled);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                      USER ROLE ASSIGNMENT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a user's role is updated.\n\t/// @param user The user who had their role updated.\n\t/// @param role The role the user had assigned/removed.\n\t/// @param enabled Whether the user had the role assigned/removed.\n\tevent UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\n\n\t/// @notice Assigns a role to a user.\n\t/// @param user The user to assign a role to.\n\t/// @param role The role to assign to the user.\n\t/// @param enabled Whether the user should have the role or not.\n\tfunction setUserRole(\n\t\taddress user,\n\t\tuint8 role,\n\t\tbool enabled\n\t) external requiresAuth {\n\t\t// Get the previous set of roles.\n\t\tbytes32 lastRoles = getUserRoles[user];\n\n\t\tunchecked {\n\t\t\t// Generate a mask for the role.\n\t\t\tbytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n\n\t\t\t// Update the user's role set with the role mask.\n\t\t\tgetUserRoles[user] = enabled ? lastRoles | shifted : lastRoles & ~shifted;\n\t\t}\n\n\t\temit UserRoleUpdated(user, role, enabled);\n\t}\n}\n"
    },
    "solmate/src/auth/Trust.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.0;\n\n/// @notice Ultra minimal authorization logic for smart contracts.\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\nabstract contract Trust {\n    event UserTrustUpdated(address indexed user, bool trusted);\n\n    mapping(address => bool) public isTrusted;\n\n    constructor(address initialUser) {\n        isTrusted[initialUser] = true;\n\n        emit UserTrustUpdated(initialUser, true);\n    }\n\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\n        isTrusted[user] = trusted;\n\n        emit UserTrustUpdated(user, trusted);\n    }\n\n    modifier requiresTrust() {\n        require(isTrusted[msg.sender], \"UNTRUSTED\");\n\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "src/UUPSProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract UUPSProxy is ERC1967Proxy {\n\tconstructor(\n\t\taddress _logic,\n\t\taddress, // This is completely unused by the uups proxy, required to remain compatible with hardhat deploy: https://github.com/wighawag/hardhat-deploy/issues/146\n\t\tbytes memory _data\n\t) payable ERC1967Proxy(_logic, _data) {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
