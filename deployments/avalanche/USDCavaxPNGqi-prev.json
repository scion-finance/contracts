{
  "address": "0xEA06bd4032D3D520A4Ac36992939640F74c52CE6",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "short",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenLend",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenBorrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniPair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniFarm",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "farmId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "farmRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "safeCollateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxTvl",
              "type": "uint256"
            }
          ],
          "internalType": "struct Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvested",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "HarvestedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "ManagerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvlBeforeRebalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startLoanHealth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedLoanHealth",
          "type": "uint256"
        }
      ],
      "name": "RebalanceLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetMaxPriceMismatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetMaxTvl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetRebalanceThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "setMinLoanHealth",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenBorrow",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenLend",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underlyingBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingShortReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct HarvestSwapParms[]",
          "name": "uniParams",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct HarvestSwapParms[]",
          "name": "lendingParams",
          "type": "tuple[]"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "farmHarvest",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "lendHarvest",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCEther",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isIntialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendFarmRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLoanHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ICompPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceThreshold",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPriceMismatch_",
          "type": "uint256"
        }
      ],
      "name": "setMaxPriceMismatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTvl_",
          "type": "uint256"
        }
      ],
      "name": "setMaxTvl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLoanHealth_",
          "type": "uint256"
        }
      ],
      "name": "setMinLoanHeath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rebalanceThreshold_",
          "type": "uint16"
        }
      ],
      "name": "setRebalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "short",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
  "receipt": {
    "to": null,
    "from": "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "contractAddress": "0xEA06bd4032D3D520A4Ac36992939640F74c52CE6",
    "transactionIndex": 8,
    "gasUsed": "5292858",
    "logsBloom": "0x
    "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5",
    "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xEA06bd4032D3D520A4Ac36992939640F74c52CE6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0x486Af39519B4Dc9a7fCcd318217352830E8AD9b4",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x000000000000000000000000beb5d47a3f720ec0a390d04b4d41ed7d9688bc7f000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
        "logIndex": 25,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0x486Af39519B4Dc9a7fCcd318217352830E8AD9b4",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x0000000000000000000000005c0401e81bc07ca70fad469b451682c0d747ef1c000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
        "logIndex": 26,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
          "0x000000000000000000000000e54ca86531e17ef3616d22ca28b0d458b6c89106"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 27,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
          "0x000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 28,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xEA06bd4032D3D520A4Ac36992939640F74c52CE6",
        "topics": [
          "0x13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a12"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 29,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xEA06bd4032D3D520A4Ac36992939640F74c52CE6",
        "topics": [
          "0x5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000e92596fd6290000",
        "logIndex": 30,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xEA06bd4032D3D520A4Ac36992939640F74c52CE6",
        "topics": [
          "0x3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000046",
        "logIndex": 31,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xEA06bd4032D3D520A4Ac36992939640F74c52CE6",
        "topics": [
          "0x36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000190",
        "logIndex": 32,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
          "0x000000000000000000000000beb5d47a3f720ec0a390d04b4d41ed7d9688bc7f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 33,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
          "0x0000000000000000000000005c0401e81bc07ca70fad469b451682c0d747ef1c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 34,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0xbd918Ed441767fe7924e99F6a0E0B568ac1970D9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
          "0x0000000000000000000000001f806f7c8ded893fd3cae279191ad7aa3798e928"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 35,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11109189,
        "transactionHash": "0x829e259fcef384092ef0c2c24a7d10424d093af075c2a7bf53600f3f286429b1",
        "address": "0x60781C2586D68229fde47564546784ab3fACA982",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ea06bd4032d3d520a4ac36992939640f74c52ce6",
          "0x000000000000000000000000e54ca86531e17ef3616d22ca28b0d458b6c89106"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 36,
        "blockHash": "0xcb11550f87f7f2a0ddab4f970cda14a33fbda9b0f54b289e273360f21de8f1b5"
      }
    ],
    "blockNumber": 11109189,
    "cumulativeGasUsed": "7392213",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
      "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "0xBEb5d47A3f720Ec0a390d04b4d41ED7d9688bC7F",
      "0x5C0401e81Bc07Ca70fAD469b451682c0d747Ef1c",
      "0xbd918Ed441767fe7924e99F6a0E0B568ac1970D9",
      "0x1f806f7C8dED893fd3caE279191ad7Aa3798E928",
      "0x60781C2586D68229fde47564546784ab3fACA982",
      9,
      "0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106",
      "0x486Af39519B4Dc9a7fCcd318217352830E8AD9b4",
      "0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106",
      "0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5",
      "9000",
      "0x9A17EB664a80175c389Cb11F93ce4D7A007f884b",
      "USDCavaxPNGqi",
      "USDC AVAX Pangolin BenQi",
      "115792089237316195423570985008687907853269984665640564039457584007913129639935"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "dd1a76d8e988f1ae93f69636de95d55f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"short\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"farmRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safeCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTvl\",\"type\":\"uint256\"}],\"internalType\":\"struct Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"ManagerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvlBeforeRebalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startLoanHealth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedLoanHealth\",\"type\":\"uint256\"}],\"name\":\"RebalanceLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetMaxPriceMismatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetMaxTvl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetRebalanceThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"setMinLoanHealth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenBorrow\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenLend\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingShortReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct HarvestSwapParms[]\",\"name\":\"uniParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct HarvestSwapParms[]\",\"name\":\"lendingParams\",\"type\":\"tuple[]\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"farmHarvest\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lendHarvest\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIntialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendFarmRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLoanHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ICompPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceMismatch_\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceMismatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTvl_\",\"type\":\"uint256\"}],\"name\":\"setMaxTvl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLoanHealth_\",\"type\":\"uint256\"}],\"name\":\"setMinLoanHeath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rebalanceThreshold_\",\"type\":\"uint16\"}],\"name\":\"setRebalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"short\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMaxTvl()\":{\"returns\":{\"_0\":\"MaxTvl\"}},\"isCEther()\":{\"details\":\"Only present in Fuse cTokens, not Compound cTokens.\",\"returns\":{\"_0\":\"True if the strategy accepts ETH, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeemUnderlying(uint256)\":{\"params\":{\"amount\":\"The amount of underlying tokens to withdraw.\"},\"returns\":{\"errCode\":\"An error code, or 0 if the withdrawal was successful.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address,address[])\":{\"notice\":\"Withdraws any ERC20 tokens back to recipient.\"},\"getMaxTvl()\":{\"notice\":\"Returns max deposits a strategy can take.\"},\"getPricePerShare()\":{\"notice\":\"Returns the share price of the strategy in `underlying` units, multiplied  by 1e18\"},\"isCEther()\":{\"notice\":\"Returns whether the strategy accepts ETH or an ERC20.\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Withdraws a specific amount of underlying tokens from the strategy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategies/implementations/USDCavaxPNGqi.sol\":\"USDCavaxPNGqi\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/interfaces/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\n/// @dev Designed for out of the box compatibility with Fuse cTokens.\\n/// @dev Like cTokens, strategies must be transferrable ERC20s.\\nabstract contract Strategy {\\n\\t/// @notice Returns whether the strategy accepts ETH or an ERC20.\\n\\t/// @return True if the strategy accepts ETH, false otherwise.\\n\\t/// @dev Only present in Fuse cTokens, not Compound cTokens.\\n\\tfunction isCEther() external view virtual returns (bool);\\n\\n\\t/// @notice Withdraws a specific amount of underlying tokens from the strategy.\\n\\t/// @param amount The amount of underlying tokens to withdraw.\\n\\t/// @return An error code, or 0 if the withdrawal was successful.\\n\\tfunction redeemUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n\\t/// @notice Returns a user's strategy balance in underlying tokens.\\n\\t/// @param user The user to get the underlying balance of.\\n\\t/// @return The user's strategy balance in underlying tokens.\\n\\t/// @dev May mutate the state of the strategy by accruing interest.\\n\\tfunction balanceOfUnderlying(address user) external virtual returns (uint256);\\n\\n\\t/// @notice Returns max deposits a strategy can take.\\n\\t/// @return MaxTvl\\n\\tfunction getMaxTvl() external virtual returns (uint256);\\n\\n\\t/// @notice Withdraws any ERC20 tokens back to recipient.\\n\\tfunction emergencyWithdraw(address recipient, IERC20[] memory tokens) external virtual;\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ERC20s.\\n/// @dev Designed for out of the box compatibility with Fuse cERC20s.\\nabstract contract ERC20Strategy is Strategy {\\n\\t/// @notice Returns the underlying ERC20 token the strategy accepts.\\n\\t/// @return The underlying ERC20 token the strategy accepts.\\n\\tfunction underlying() external view virtual returns (IERC20);\\n\\n\\t/// @notice Deposit a specific amount of underlying tokens into the strategy.\\n\\t/// @param amount The amount of underlying tokens to deposit.\\n\\t/// @return An error code, or 0 if the deposit was successful.\\n\\tfunction mint(uint256 amount) external virtual returns (uint256);\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ETH.\\n/// @dev Designed for out of the box compatibility with Fuse cEther.\\nabstract contract ETHStrategy is Strategy {\\n\\t/// @notice Deposit a specific amount of ETH into the strategy.\\n\\t/// @dev The amount of ETH is specified via msg.value. Reverts on error.\\n\\tfunction mint() external payable virtual;\\n}\\n\",\"keccak256\":\"0xb6a2f93a4a9e4c09f541809746cad109934b4c671489617d349dc9ea1c44eb83\",\"license\":\"AGPL-3.0\"},\"src/interfaces/compound/ICTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ninterface ICTokenStorage {\\n\\t/**\\n\\t * @dev Container for borrow balance information\\n\\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n\\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n\\t */\\n\\tstruct BorrowSnapshot {\\n\\t\\tuint256 principal;\\n\\t\\tuint256 interestIndex;\\n\\t}\\n}\\n\\ninterface ICToken is ICTokenStorage {\\n\\t/*** Market Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when interest is accrued\\n\\t */\\n\\tevent AccrueInterest(\\n\\t\\tuint256 cashPrior,\\n\\t\\tuint256 interestAccumulated,\\n\\t\\tuint256 borrowIndex,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are minted\\n\\t */\\n\\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are redeemed\\n\\t */\\n\\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when underlying is borrowed\\n\\t */\\n\\tevent Borrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is repaid\\n\\t */\\n\\tevent RepayBorrow(\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is liquidated\\n\\t */\\n\\tevent LiquidateBorrow(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 seizeTokens\\n\\t);\\n\\n\\t/*** Admin Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is changed\\n\\t */\\n\\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\\n\\t */\\n\\tevent NewAdmin(address oldAdmin, address newAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when comptroller is changed\\n\\t */\\n\\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\\n\\n\\t/**\\n\\t * @dev Event emitted when interestRateModel is changed\\n\\t */\\n\\tevent NewMarketInterestRateModel(\\n\\t\\tInterestRateModel oldInterestRateModel,\\n\\t\\tInterestRateModel newInterestRateModel\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserve factor is changed\\n\\t */\\n\\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are added\\n\\t */\\n\\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are reduced\\n\\t */\\n\\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev EIP20 Transfer event\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev EIP20 Approval event\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Failure event\\n\\t */\\n\\tevent Failure(uint256 error, uint256 info, uint256 detail);\\n\\n\\t/*** User Interface ***/\\n\\tfunction totalBorrows() external view returns (uint256);\\n\\n\\tfunction totalReserves() external view returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction transfer(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction balanceOfUnderlying(address owner) external returns (uint256);\\n\\n\\tfunction getAccountSnapshot(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction borrowRatePerBlock() external view returns (uint256);\\n\\n\\tfunction supplyRatePerBlock() external view returns (uint256);\\n\\n\\tfunction totalBorrowsCurrent() external returns (uint256);\\n\\n\\tfunction borrowBalanceCurrent(address account) external returns (uint256);\\n\\n\\tfunction borrowBalanceStored(address account) external view returns (uint256);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction exchangeRateStored() external view returns (uint256);\\n\\n\\tfunction getCash() external view returns (uint256);\\n\\n\\tfunction accrueInterest() external returns (uint256);\\n\\n\\tfunction seize(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n\\tfunction _acceptAdmin() external returns (uint256);\\n\\n\\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n\\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n\\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n\\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n}\\n\\ninterface ICTokenErc20 is ICToken {\\n\\t/*** User Interface ***/\\n\\n\\tfunction mint(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeem(uint256 redeemTokens) external returns (uint256);\\n\\n\\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n\\tfunction borrow(uint256 borrowAmount) external returns (uint256);\\n\\n\\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n\\tfunction liquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tICToken cTokenCollateral\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ninterface ICTokenBase is ICToken {\\n\\tfunction repayBorrow() external payable;\\n}\\n\",\"keccak256\":\"0x5d52d672a981f9079cbf11da004d6a2acfd02e0ddaebed7bdb0229b0751a0f2c\",\"license\":\"MIT\"},\"src/interfaces/compound/ICompPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface ICompPriceOracle {\\n\\tfunction isPriceOracle() external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Get the underlying price of a cToken asset\\n\\t * @param cToken The cToken to get the underlying price of\\n\\t * @return The underlying asset price mantissa (scaled by 1e18).\\n\\t *  Zero means the price is unavailable.\\n\\t */\\n\\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8a2ba59e821b1e38feb0752c3948a9fb224975135e2751a829e43af0a34ceb2\",\"license\":\"MIT\"},\"src/interfaces/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface IComptroller {\\n\\t/*** Assets You Are In ***/\\n\\n\\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n\\tfunction exitMarket(address cToken) external returns (uint256);\\n\\n\\t/*** Policy Hooks ***/\\n\\n\\tfunction mintAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction mintVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount,\\n\\t\\tuint256 mintTokens\\n\\t) external;\\n\\n\\tfunction redeemAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction redeemVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemAmount,\\n\\t\\tuint256 redeemTokens\\n\\t) external;\\n\\n\\tfunction borrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction borrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external;\\n\\n\\tfunction repayBorrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction repayBorrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 borrowerIndex\\n\\t) external;\\n\\n\\tfunction liquidateBorrowAllowed(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction liquidateBorrowVerify(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction seizeAllowed(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction seizeVerify(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction transferAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction transferVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external;\\n\\n\\tfunction claimComp(address holder) external;\\n\\n\\tfunction claimComp(address holder, ICTokenErc20[] memory cTokens) external;\\n\\n\\t/*** Liquidity/Liquidation Calculations ***/\\n\\n\\tfunction liquidateCalculateSeizeTokens(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 repayAmount\\n\\t) external view returns (uint256, uint256);\\n}\\n\\ninterface UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Administrator for this contract\\n\\t */\\n\\t// address external admin;\\n\\tfunction admin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending administrator for this contract\\n\\t */\\n\\t// address external pendingAdmin;\\n\\tfunction pendingAdmin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Active brains of Unitroller\\n\\t */\\n\\t// address external comptrollerImplementation;\\n\\tfunction comptrollerImplementation() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending brains of Unitroller\\n\\t */\\n\\t// address external pendingComptrollerImplementation;\\n\\tfunction pendingComptrollerImplementation() external view returns (address);\\n}\\n\\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Oracle which gives the price of any given asset\\n\\t */\\n\\t// PriceOracle external oracle;\\n\\tfunction oracle() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n\\t */\\n\\t// uint external closeFactorMantissa;\\n\\tfunction closeFactorMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Multiplier representing the discount on collateral that a liquidator receives\\n\\t */\\n\\t// uint external liquidationIncentiveMantissa;\\n\\tfunction liquidationIncentiveMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n\\t */\\n\\t// uint external maxAssets;\\n\\tfunction maxAssets() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n\\t */\\n\\t// mapping(address => CToken[]) external accountAssets;\\n\\t// function accountAssets(address) external view returns (CToken[]);\\n}\\n\\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\\n\\tenum Version {\\n\\t\\tVANILLA,\\n\\t\\tCOLLATERALCAP,\\n\\t\\tWRAPPEDNATIVE\\n\\t}\\n\\n\\tstruct Market {\\n\\t\\tbool isListed;\\n\\t\\tuint256 collateralFactorMantissa;\\n\\t\\tmapping(address => bool) accountMembership;\\n\\t\\tbool isComped;\\n\\t\\t// Version version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Official mapping of cTokens -> Market metadata\\n\\t * @dev Used e.g. to determine if a market is supported\\n\\t */\\n\\tmapping(address => Market) public markets;\\n\\n\\t/**\\n\\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n\\t *  Actions which allow users to remove their own assets cannot be paused.\\n\\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n\\t */\\n\\t// address external pauseGuardian;\\n\\t// bool external _mintGuardianPaused;\\n\\t// bool external _borrowGuardianPaused;\\n\\t// bool external transferGuardianPaused;\\n\\t// bool external seizeGuardianPaused;\\n\\t// mapping(address => bool) external mintGuardianPaused;\\n\\t// mapping(address => bool) external borrowGuardianPaused;\\n}\\n\\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\\n\\t// struct CompMarketState {\\n\\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n\\t//     uint224 index;\\n\\t//     /// @notice The block number the index was last updated at\\n\\t//     uint32 block;\\n\\t// }\\n\\t// /// @notice A list of all markets\\n\\t// CToken[] external allMarkets;\\n\\t// /// @notice The rate at which the flywheel distributes COMP, per block\\n\\t// uint external compRate;\\n\\t// /// @notice The portion of compRate that each market currently receives\\n\\t// mapping(address => uint) external compSpeeds;\\n\\t// /// @notice The COMP market supply state for each market\\n\\t// mapping(address => CompMarketState) external compSupplyState;\\n\\t// /// @notice The COMP market borrow state for each market\\n\\t// mapping(address => CompMarketState) external compBorrowState;\\n\\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\\n\\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\\n\\t// /// @notice The COMP accrued but not yet transferred to each user\\n\\t// mapping(address => uint) external compAccrued;\\n}\\n\\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\\n\\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n\\t// address external borrowCapGuardian;\\n\\tfunction borrowCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n\\t// mapping(address => uint) external borrowCaps;\\n\\tfunction borrowCaps(address) external view virtual returns (uint256);\\n}\\n\\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\\n\\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n\\t// address external supplyCapGuardian;\\n\\tfunction supplyCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n\\t// mapping(address => uint) external supplyCaps;\\n\\tfunction supplyCaps(address) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb75b9cbb3528305eb369b2f899445e408caf8ff39740a597e1855b45307bca9b\",\"license\":\"MIT\"},\"src/interfaces/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ninterface InterestRateModel {\\n\\t/**\\n\\t * @dev Calculates the current borrow interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getBorrowRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Calculates the current supply interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @param reserveFactorMantissa The current reserve factor the market has\\n\\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getSupplyRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves,\\n\\t\\tuint256 reserveFactorMantissa\\n\\t) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3f76c6b4f915caae38ac10503a24a0d1340e5c11c231f2ec3ddee1467abf2b7\",\"license\":\"MIT\"},\"src/interfaces/forks/IClaimReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract IClaimReward {\\n\\tfunction claimReward(uint8 rewardType, address payable holder) external virtual;\\n}\\n\",\"keccak256\":\"0x472a25a459f59f908263c67723a215d9e9a87daead77fb2197499e05951b31a7\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingRewards is IERC20 {\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction lastTimeRewardApplicable() external view returns (uint256);\\n\\n\\tfunction rewardPerToken() external view returns (uint256);\\n\\n\\tfunction earned(address account) external view returns (uint256);\\n\\n\\tfunction getRewardForDuration() external view returns (uint256);\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction getReward() external;\\n\\n\\tfunction exit() external;\\n}\\n\\n// some farms use sushi interface\\ninterface IMasterChef {\\n\\t// depositing 0 amount will withdraw the rewards (harvest)\\n\\tfunction deposit(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n\\tfunction emergencyWithdraw(uint256 _pid) external;\\n\\n\\tfunction pendingTokens(uint256 _pid, address _user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\\ninterface IMiniChefV2 {\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount;\\n\\t\\tint256 rewardDebt;\\n\\t}\\n\\n\\tstruct PoolInfo {\\n\\t\\tuint128 accSushiPerShare;\\n\\t\\tuint64 lastRewardTime;\\n\\t\\tuint64 allocPoint;\\n\\t}\\n\\n\\tfunction poolLength() external view returns (uint256);\\n\\n\\tfunction updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, int256);\\n\\n\\tfunction deposit(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction harvest(uint256 pid, address to) external;\\n\\n\\tfunction withdrawAndHarvest(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\",\"keccak256\":\"0xb3af591d4edcb774b34747a5e934c9c601ec902cf51511a64a0a3689dcb1d5c3\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n\\tfunction allPairs(uint256) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint256);\\n\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x48a3839730f960481776a854d55dc88fa552449d9315666a7cfde761bc82b690\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint256 amount0In,\\n\\t\\tuint256 amount1In,\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x470c1baab8c55bd27a70973466fab6749f87142276c9918e92c78b52a7d6489f\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountA,\\n\\t\\t\\tuint256 amountB,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountToken,\\n\\t\\t\\tuint256 amountETH,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xd24bbe40b021ae665a6e40cca7d268485ee30619caaf5752626ebf6cd445f838\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction balanceOf(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617dcb6501c8c2ad665f925a2a469ffb6c82b78a73083503b009d5a4f95f0cb\",\"license\":\"MIT\"},\"src/libraries/SafeETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0;\\n\\nlibrary SafeETH {\\n\\tfunction safeTransferETH(address to, uint256 amount) internal {\\n\\t\\tbool callStatus;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// Transfer the ETH and store if it succeeded or not.\\n\\t\\t\\tcallStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n\\t\\t}\\n\\n\\t\\trequire(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9ea4cc64007cea62165410b6e0fa91f59b375c7e04e934a40dca7e6553acd02\",\"license\":\"AGPL-3.0\"},\"src/libraries/UniUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router01.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary UniUtils {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction _getPairTokens(IUniswapV2Pair pair) internal view returns (address, address) {\\n\\t\\treturn (pair.token0(), pair.token1());\\n\\t}\\n\\n\\tfunction _getPairReserves(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(address token0, ) = _sortTokens(tokenA, tokenB);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\t\\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\\n\\tfunction _quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) internal pure returns (uint256 amountB) {\\n\\t\\trequire(amountA > 0, \\\"UniUtils: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(reserveA > 0 && reserveB > 0, \\\"UniUtils: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tamountB = (amountA * reserveB) / reserveA;\\n\\t}\\n\\n\\tfunction _sortTokens(address tokenA, address tokenB)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (address token0, address token1)\\n\\t{\\n\\t\\trequire(tokenA != tokenB, \\\"UniUtils: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"UniUtils: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\tfunction _getAmountOut(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"UniUtils: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 amountInWithFee = amountIn * 997;\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\tfunction _getAmountIn(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 numerator = reserveIn * amountOut * 1000;\\n\\t\\tuint256 denominator = (reserveOut - amountOut) * 997;\\n\\t\\tamountIn = (numerator / denominator) + 1;\\n\\t}\\n\\n\\tfunction _swapExactTokensForTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 amountOut = _getAmountOut(pair, amountIn, inToken, outToken);\\n\\t\\t(address token0, ) = _sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\tfunction _swapTokensForExactTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 amountIn = _getAmountIn(pair, amountOut, inToken, outToken);\\n\\t\\t(address token0, ) = _sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountIn;\\n\\t}\\n}\\n\",\"keccak256\":\"0xa485d0f78aef4961ec8664d2a1e36b8bfc8d7caee5e17bd73a1426c6c7177fe8\",\"license\":\"MIT\"},\"src/mixins/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct Config {\\n\\taddress underlying;\\n\\taddress short;\\n\\taddress cTokenLend;\\n\\taddress cTokenBorrow;\\n\\taddress uniPair;\\n\\taddress uniFarm;\\n\\taddress farmToken;\\n\\tuint256 farmId;\\n\\taddress farmRouter;\\n\\taddress comptroller;\\n\\taddress lendRewardRouter;\\n\\taddress lendRewardToken;\\n\\tuint256 safeCollateralRatio;\\n\\taddress vault;\\n\\tstring symbol;\\n\\tstring name;\\n\\tuint256 maxTvl;\\n}\\n\\n// all interfaces need to inherit from base\\nabstract contract IBase {\\n\\tbool public isIntialized;\\n\\n\\tmodifier initializer() {\\n\\t\\trequire(isIntialized == false, \\\"INITIALIZED\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction short() public view virtual returns (IERC20);\\n\\n\\tfunction underlying() public view virtual returns (IERC20);\\n}\\n\",\"keccak256\":\"0x46df3380576ada4602e47434177acac37f1b3a8431d9dc1f5905367d1b7be49c\",\"license\":\"MIT\"},\"src/mixins/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\nimport \\\"./ILending.sol\\\";\\nimport \\\"./IBase.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ICompound is ILending {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction cTokenLend() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction cTokenBorrow() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction oracle() public view virtual returns (ICompPriceOracle);\\n\\n\\tfunction comptroller() public view virtual returns (IComptroller);\\n\\n\\tfunction _enterMarket() internal {\\n\\t\\taddress[] memory cTokens = new address[](2);\\n\\t\\tcTokens[0] = address(cTokenLend());\\n\\t\\tcTokens[1] = address(cTokenBorrow());\\n\\t\\tcomptroller().enterMarkets(cTokens);\\n\\t}\\n\\n\\tfunction _getCollateralFactor() internal view override returns (uint256) {\\n\\t\\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(comptroller()))\\n\\t\\t\\t.markets(address(cTokenLend()));\\n\\t\\treturn collateralFactorMantissa;\\n\\t}\\n\\n\\t// TODO handle error\\n\\tfunction _redeem(uint256 amount) internal override {\\n\\t\\tuint256 err = cTokenLend().redeemUnderlying(amount);\\n\\t\\t// require(err == 0, \\\"Compund: error redeeming underlying\\\");\\n\\t}\\n\\n\\tfunction _borrow(uint256 amount) internal override {\\n\\t\\tcTokenBorrow().borrow(amount);\\n\\n\\t\\t// in case we need to wrap the tokens\\n\\t\\tif (_isBase(1)) IWETH(address(short())).deposit{ value: amount }();\\n\\t}\\n\\n\\tfunction _lend(uint256 amount) internal override {\\n\\t\\tcTokenLend().mint(amount);\\n\\t}\\n\\n\\tfunction _repay(uint256 amount) internal override {\\n\\t\\tif (_isBase(1)) {\\n\\t\\t\\t// need to convert to base first\\n\\t\\t\\tIWETH(address(short())).withdraw(amount);\\n\\n\\t\\t\\t// then repay in the base\\n\\t\\t\\t_repayBase(amount);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tcTokenBorrow().repayBorrow(amount);\\n\\t}\\n\\n\\tfunction _repayBase(uint256 amount) internal {\\n\\t\\tICTokenBase(address(cTokenBorrow())).repayBorrow{ value: amount }();\\n\\t}\\n\\n\\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenLend().balanceOfUnderlying(address(this));\\n\\t}\\n\\n\\tfunction _getCollateralBalance() internal view override returns (uint256) {\\n\\t\\tuint256 b = cTokenLend().balanceOf(address(this));\\n\\t\\treturn (b * cTokenLend().exchangeRateStored()) / 1e18;\\n\\t}\\n\\n\\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenBorrow().borrowBalanceCurrent(address(this));\\n\\t}\\n\\n\\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\\n\\t\\tshortBorrow = cTokenBorrow().borrowBalanceStored(address(this));\\n\\t}\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenBorrow()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenLend()));\\n\\t}\\n\\n\\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenLend()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenBorrow()));\\n\\t}\\n\\n\\tfunction _maxBorrow() internal view virtual override returns (uint256) {\\n\\t\\treturn cTokenBorrow().getCash();\\n\\t}\\n\\n\\t// returns true if either of the CTokens is cEth\\n\\t// index 0 = cTokenLend index 1 = cTokenBorrow\\n\\tfunction _isBase(uint8 index) internal virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0xcf53361d5b7f32d5a6cb0dc9a184c96d835448c7f322874c7473d9850ed19b6d\",\"license\":\"MIT\"},\"src/mixins/IFarmable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/uniswap/IUniswapV2Router01.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IBase.sol\\\";\\n\\nstruct HarvestSwapParms {\\n\\taddress[] path; //path that the token takes\\n\\tuint256 min; // min price of in token * 1e18 (computed externally based on spot * slippage + fees)\\n\\tuint256 deadline;\\n}\\n\\nabstract contract IFarmable is IBase {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tevent HarvestedToken(address indexed token, uint256 amount);\\n\\n\\tfunction _swap(\\n\\t\\tIUniswapV2Router01 router,\\n\\t\\tHarvestSwapParms calldata swapParams,\\n\\t\\taddress from,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\taddress out = swapParams.path[swapParams.path.length - 1];\\n\\t\\t// ensure malicious harvester is not trading with wrong tokens\\n\\t\\t// TODO should we limit path length to 2 to prevent malicious path?\\n\\t\\trequire(\\n\\t\\t\\t((swapParams.path[0] == address(from) && (out == address(short()))) ||\\n\\t\\t\\t\\tout == address(underlying())),\\n\\t\\t\\t\\\"IFarmable: WRONG_PATH\\\"\\n\\t\\t);\\n\\t\\trouter.swapExactTokensForTokens(\\n\\t\\t\\tamount,\\n\\t\\t\\tswapParams.min,\\n\\t\\t\\tswapParams.path, // optimal route determined externally\\n\\t\\t\\taddress(this),\\n\\t\\t\\tswapParams.deadline\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0a886b452d6d702c6cbbd2015b216fc6929009ffeb6b99b00348b29a1e8fe3b4\",\"license\":\"MIT\"},\"src/mixins/IFarmableLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IFarmable.sol\\\";\\n\\nabstract contract IFarmableLp is IFarmable {\\n\\tfunction _depositIntoFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory);\\n\\n\\tfunction _getFarmLp() internal view virtual returns (uint256);\\n\\n\\tfunction _addFarmApprovals() internal virtual;\\n\\n\\tfunction farmRouter() public view virtual returns (IUniswapV2Router01);\\n}\\n\",\"keccak256\":\"0xfcc5d307b381543cf70c4a03807e67ab2a8d89f8b16276dbe9fd4e0135e1abff\",\"license\":\"MIT\"},\"src/mixins/ILending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./IFarmable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ILending is IBase {\\n\\tfunction _addLendingApprovals() internal virtual;\\n\\n\\tfunction _getCollateralBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _getBorrowBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\\n\\n\\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\\n\\n\\tfunction _getCollateralFactor() internal view virtual returns (uint256);\\n\\n\\tfunction safeCollateralRatio() public view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _lend(uint256 amount) internal virtual;\\n\\n\\tfunction _redeem(uint256 amount) internal virtual;\\n\\n\\tfunction _borrow(uint256 amount) internal virtual;\\n\\n\\tfunction _repay(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory);\\n\\n\\tfunction lendFarmRouter() public view virtual returns (IUniswapV2Router01);\\n\\n\\tfunction getCollateralRatio() public view virtual returns (uint256) {\\n\\t\\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\\n\\t}\\n\\n\\t// returns loan health value which is minCollateral / collateralBalance\\n\\tfunction loanHealth() public view returns (uint256) {\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tuint256 minCollateral = (borrowValue * 1e18) / _getCollateralFactor();\\n\\t\\treturn (1e18 * collateralBalance) / minCollateral;\\n\\t}\\n\\n\\tfunction _adjustCollateral(uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\treturns (uint256 added, uint256 removed)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (collateralBalance == targetCollateral) return (0, 0);\\n\\t\\t(added, removed) = collateralBalance > targetCollateral\\n\\t\\t\\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\\n\\t\\t\\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\\n\\t}\\n\\n\\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\\n\\t\\tuint256 maxRemove = _freeCollateral();\\n\\t\\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\\n\\t\\tif (removed > 0) _redeem(removed);\\n\\t}\\n\\n\\tfunction _freeCollateral() internal view returns (uint256) {\\n\\t\\tuint256 collateral = _getCollateralBalance();\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\t// stay within 5% of the liquidation threshold (this is allways temporary)\\n\\t\\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 95;\\n\\t\\tif (minCollateral > collateral) return 0;\\n\\t\\treturn collateral - minCollateral;\\n\\t}\\n\\n\\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\\n\\t\\tuint256 underlyingBalance = underlying().balanceOf(address(this));\\n\\t\\tadded = underlyingBalance > amountToAdd ? amountToAdd : underlyingBalance;\\n\\t\\tif (added != 0) _lend(added);\\n\\t}\\n\\n\\tfunction _maxBorrow() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x89e2d5354b4a94c93c70da96a996030e8834c94a46934ed542faabdf04f239d0\",\"license\":\"MIT\"},\"src/mixins/ILp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ILp {\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual returns (uint256 price);\\n\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 liquidity);\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256 underlyingBalance, uint256 shortBalance);\\n}\\n\",\"keccak256\":\"0x7417631b3f68397ad3f5cf464048adb071c35c0771c29d7c2637fe3ff192f180\",\"license\":\"MIT\"},\"src/mixins/IUniLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/UniUtils.sol\\\";\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./ILp.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract IUniLp is IBase, ILp {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing UniUtils for IUniswapV2Pair;\\n\\n\\tfunction pair() public view virtual returns (IUniswapV2Pair);\\n\\n\\tfunction _getLiquidity() internal view virtual returns (uint256);\\n\\n\\t// should only be called after oracle or user-input swap price check\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256 liquidity)\\n\\t{\\n\\t\\tunderlying().safeTransfer(address(pair()), amountToken0);\\n\\t\\tshort().safeTransfer(address(pair()), amountToken1);\\n\\t\\tliquidity = pair().mint(address(this));\\n\\t}\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal override returns (uint256, uint256) {\\n\\t\\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\\n\\t\\t(address tokenA, ) = UniUtils._sortTokens(address(underlying()), address(short()));\\n\\t\\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\\n\\t\\treturn\\n\\t\\t\\ttokenA == address(underlying())\\n\\t\\t\\t\\t? (amountToken0, amountToken1)\\n\\t\\t\\t\\t: (amountToken1, amountToken0);\\n\\t}\\n\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual override returns (uint256 price) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t(uint256 reserve0, uint256 reserve1) = pair()._getPairReserves(token0, token1);\\n\\t\\tprice = UniUtils._quote(amount, reserve0, reserve1);\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a uniswap pair\\n\\tfunction getUnderlyingShortReserves() public view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(reserveA, reserveB) = pair()._getPairReserves(address(underlying()), address(short()));\\n\\t}\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256 underlyingBalance, uint256 shortBalance)\\n\\t{\\n\\t\\tuint256 totalLp = _getLiquidity();\\n\\t\\t(uint256 totalUnderlyingBalance, uint256 totalShortBalance) = getUnderlyingShortReserves();\\n\\t\\tuint256 total = pair().totalSupply();\\n\\t\\tunderlyingBalance = (totalUnderlyingBalance * totalLp) / total;\\n\\t\\tshortBalance = (totalShortBalance * totalLp) / total;\\n\\t}\\n}\\n\",\"keccak256\":\"0x8f29fa0e5ead65b49084780ce6a282e1dabd75f60c2306086c9198adf7d6f34c\",\"license\":\"MIT\"},\"src/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/Strategy.sol\\\";\\nimport \\\"../libraries/SafeETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseStrategy is Strategy, Ownable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tmodifier onlyVault() {\\n\\t\\trequire(msg.sender == vault(), \\\"Strat: ONLY_VAULT\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAuth() {\\n\\t\\trequire(msg.sender == owner() || _managers[msg.sender] == true, \\\"Strat: NO_AUTH\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tbool isInitialized;\\n\\n\\tuint256 constant BPS_ADJUST = 10000;\\n\\tuint256 public lastHarvest; // block.timestamp;\\n\\taddress private _vault;\\n\\tuint256 private _shares;\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\n\\tmapping(address => bool) private _managers;\\n\\n\\tuint256 public BASE_UNIT; // 10 ** decimals\\n\\n\\tevent Harvest(uint256 harvested); // this is actual the tvl before harvest\\n\\tevent Deposit(address sender, uint256 amount);\\n\\tevent Withdraw(address sender, uint256 amount);\\n\\tevent Rebalance(uint256 shortPrice, uint256 tvlBeforeRebalance, uint256 positionOffset);\\n\\tevent EmergencyWithdraw(address indexed recipient, IERC20[] tokens);\\n\\tevent ManagerUpdate(address indexed account, bool isManager);\\n\\tevent VaultUpdate(address indexed vault);\\n\\n\\tconstructor(\\n\\t\\taddress vault_,\\n\\t\\tstring memory symbol_,\\n\\t\\tstring memory name_\\n\\t) Ownable() ReentrancyGuard() {\\n\\t\\t_vault = vault_;\\n\\t\\tsymbol = symbol_;\\n\\t\\tname = name_;\\n\\t}\\n\\n\\t// VIEW\\n\\tfunction vault() public view returns (address) {\\n\\t\\treturn _vault;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _shares;\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Returns the share price of the strategy in `underlying` units, multiplied\\n\\t *  by 1e18\\n\\t */\\n\\tfunction getPricePerShare() public view returns (uint256) {\\n\\t\\tuint256 bal = balanceOfUnderlying();\\n\\t\\tif (_shares == 0) return BASE_UNIT;\\n\\t\\treturn (bal * BASE_UNIT) / _shares;\\n\\t}\\n\\n\\tfunction balanceOfUnderlying(address) public view virtual override returns (uint256) {\\n\\t\\treturn balanceOfUnderlying();\\n\\t}\\n\\n\\tfunction balanceOfUnderlying() public view virtual returns (uint256);\\n\\n\\t// PUBLIC METHODS\\n\\tfunction mint(uint256 amount) external onlyVault returns (uint256 errCode) {\\n\\t\\tuint256 newShares = _deposit(amount);\\n\\t\\t_shares += newShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\tfunction redeemUnderlying(uint256 amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyVault\\n\\t\\treturns (uint256 errCode)\\n\\t{\\n\\t\\tuint256 burnShares = _withdraw(amount);\\n\\t\\t_shares -= burnShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\t// GOVERNANCE - MANAGER\\n\\tfunction isManager(address user) public view returns (bool) {\\n\\t\\treturn _managers[user];\\n\\t}\\n\\n\\tfunction setManager(address user, bool _isManager) external onlyOwner {\\n\\t\\t_managers[user] = _isManager;\\n\\t\\temit ManagerUpdate(user, _isManager);\\n\\t}\\n\\n\\tfunction setVault(address vault_) external onlyOwner {\\n\\t\\t_vault = vault_;\\n\\t\\temit VaultUpdate(vault_);\\n\\t}\\n\\n\\t// emergency only\\n\\t// closePosition should be attempted first, if after some tokens are stuck,\\n\\t// send them to a designated address\\n\\tfunction emergencyWithdraw(address recipient, IERC20[] calldata tokens)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyVault\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < tokens.length; i++) {\\n\\t\\t\\tIERC20 token = tokens[i];\\n\\t\\t\\tuint256 balance = token.balanceOf(address(this));\\n\\t\\t\\tif (balance != 0) token.safeTransfer(recipient, balance);\\n\\t\\t}\\n\\t\\tif (address(this).balance > 0) SafeETH.safeTransferETH(msg.sender, address(this).balance);\\n\\t\\temit EmergencyWithdraw(recipient, tokens);\\n\\t}\\n\\n\\tfunction _deposit(uint256 amount) internal virtual returns (uint256 newShares);\\n\\n\\tfunction _withdraw(uint256 amount) internal virtual returns (uint256 burnShares);\\n\\n\\tfunction isCEther() public pure override returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0xe3718a1df986485d2c451e59a016418c96473af751f22a6d181a414f0e6da9bb\",\"license\":\"MIT\"},\"src/strategies/HedgedLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../mixins/IBase.sol\\\";\\nimport \\\"../mixins/ILending.sol\\\";\\nimport \\\"../mixins/IFarmableLp.sol\\\";\\nimport \\\"../mixins/IUniLp.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n// @custom: alphabetize dependencies to avoid linearization conflicts\\nabstract contract HedgedLP is IBase, BaseStrategy, ILending, IFarmableLp, IUniLp {\\n\\tusing UniUtils for IUniswapV2Pair;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tevent RebalanceLoan(address indexed sender, uint256 startLoanHealth, uint256 updatedLoanHealth);\\n\\tevent setMinLoanHealth(uint256 loanHealth);\\n\\tevent SetMaxPriceMismatch(uint256 loanHealth);\\n\\tevent SetRebalanceThreshold(uint256 loanHealth);\\n\\tevent SetMaxTvl(uint256 loanHealth);\\n\\n\\tuint256 constant MINIMUM_LIQUIDITY = 1000;\\n\\tuint256 private _maxPriceMismatch = 70; // .7% based around uniswap .6% bid-ask spread\\n\\tuint256 public minLoanHealth = 1.05e18;\\n\\n\\tIERC20 private _underlying;\\n\\tIERC20 private _short;\\n\\n\\tuint16 public rebalanceThreshold = 400; // 4% of lp\\n\\tuint16 public version = 2;\\n\\n\\tuint256 private _maxTvl;\\n\\t// for security we update this value only after oracle price checks in 'getAndUpdateTvl'\\n\\tuint256 private _cachedBalanceOfUnderlying;\\n\\n\\tmodifier checkPrice() {\\n\\t\\tuint256 minPrice = _shortToUnderlying(1e18);\\n\\t\\t// oraclePrice\\n\\t\\tuint256 maxPrice = _oraclePriceOfShort(1e18);\\n\\t\\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\\n\\t\\trequire(\\n\\t\\t\\t((maxPrice - minPrice) * BPS_ADJUST) / maxPrice < _maxPriceMismatch,\\n\\t\\t\\t\\\"HLP: PRICE_MISMATCH\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t\\t// any method that uses checkPrice should updated the _cachedBalanceOfUnderlying\\n\\t\\t(_cachedBalanceOfUnderlying, , , , , ) = getTVL();\\n\\t}\\n\\n\\tfunction __HedgedLP_init_(\\n\\t\\taddress underlying_,\\n\\t\\taddress short_,\\n\\t\\tuint256 maxTvl_\\n\\t) internal initializer {\\n\\t\\t_underlying = IERC20(underlying_);\\n\\t\\t_short = IERC20(short_);\\n\\n\\t\\t_underlying.safeApprove(address(this), type(uint256).max);\\n\\n\\t\\tBASE_UNIT = 10**decimals();\\n\\n\\t\\t// init params\\n\\t\\tsetMaxTvl(maxTvl_);\\n\\n\\t\\t// emit default settings events\\n\\t\\temit setMinLoanHealth(minLoanHealth);\\n\\t\\temit SetMaxPriceMismatch(_maxPriceMismatch);\\n\\t\\temit SetRebalanceThreshold(rebalanceThreshold);\\n\\n\\t\\t// TODO should we add a revoke aprovals methods?\\n\\t\\t_addLendingApprovals();\\n\\t\\t_addFarmApprovals();\\n\\n\\t\\tisInitialized = true;\\n\\t}\\n\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn IERC20Metadata(address(_underlying)).decimals();\\n\\t}\\n\\n\\t// OWNER CONFIG\\n\\tfunction setMinLoanHeath(uint256 minLoanHealth_) public onlyOwner {\\n\\t\\tminLoanHealth = minLoanHealth_;\\n\\t\\temit setMinLoanHealth(minLoanHealth_);\\n\\t}\\n\\n\\tfunction setMaxPriceMismatch(uint256 maxPriceMismatch_) public onlyOwner {\\n\\t\\t_maxPriceMismatch = maxPriceMismatch_;\\n\\t\\temit SetMaxPriceMismatch(maxPriceMismatch_);\\n\\t}\\n\\n\\tfunction setRebalanceThreshold(uint16 rebalanceThreshold_) public onlyOwner {\\n\\t\\trebalanceThreshold = rebalanceThreshold_;\\n\\t\\temit SetRebalanceThreshold(rebalanceThreshold_);\\n\\t}\\n\\n\\tfunction setMaxTvl(uint256 maxTvl_) public onlyAuth {\\n\\t\\t_maxTvl = maxTvl_;\\n\\t\\temit SetMaxTvl(maxTvl_);\\n\\t}\\n\\n\\t// PUBLIC METHODS\\n\\n\\tfunction short() public view override returns (IERC20) {\\n\\t\\treturn _short;\\n\\t}\\n\\n\\tfunction underlying() public view override returns (IERC20) {\\n\\t\\treturn _underlying;\\n\\t}\\n\\n\\t// public method that anyone can call to prevent an immenent loan liquidation\\n\\t// this is an emergency measure in case rebalance() is not called in time\\n\\t// price check is not necessary here because we are only removing LP and\\n\\t// if swap price differs it is to our benefit\\n\\tfunction rebalanceLoan() public nonReentrant {\\n\\t\\tuint256 _loanHealth = loanHealth();\\n\\t\\trequire(_loanHealth <= minLoanHealth, \\\"HLP: SAFE\\\");\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\n\\t\\t// remove 5% of LP to repay loan & add collateral\\n\\t\\tuint256 newLP = (9500 * _loanHealth * underlyingLp) / 10000 / minLoanHealth;\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 underlyingBalance, uint256 shortBalance) = _decreaseLpTo(newLP);\\n\\n\\t\\t_repay(shortBalance);\\n\\t\\t_lend(underlyingBalance);\\n\\t\\temit RebalanceLoan(msg.sender, _loanHealth, loanHealth());\\n\\t}\\n\\n\\tfunction _deposit(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 newShares)\\n\\t{\\n\\t\\tif (amount <= 0) return 0; // cannot deposit 0\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\trequire(amount + tvl <= getMaxTvl(), \\\"HLP: OVER_MAX_TVL\\\");\\n\\t\\tnewShares = totalSupply() == 0 ? amount : (totalSupply() * amount) / tvl;\\n\\t\\t_underlying.transferFrom(vault(), address(this), amount);\\n\\t\\t_increasePosition(amount);\\n\\t\\temit Deposit(msg.sender, amount);\\n\\t}\\n\\n\\t// can pass type(uint256).max to withdraw full amount\\n\\tfunction _withdraw(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 burnShares)\\n\\t{\\n\\t\\tif (amount == 0) return 0;\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tif (tvl == 0) return 0;\\n\\n\\t\\tuint256 reserves = _underlying.balanceOf(address(this));\\n\\n\\t\\t// if we can not withdraw straight out of reserves\\n\\t\\tif (reserves < amount) {\\n\\t\\t\\t// add .5% to withdraw amount for tx fees & slippage etc\\n\\t\\t\\tuint256 withdrawAmnt = amount == type(uint256).max\\n\\t\\t\\t\\t? tvl\\n\\t\\t\\t\\t: min(tvl, (amount * 1005) / 1000);\\n\\n\\t\\t\\t// decrease current position\\n\\t\\t\\twithdrawAmnt = withdrawAmnt >= tvl\\n\\t\\t\\t\\t? _closePosition()\\n\\t\\t\\t\\t: _decreasePosition(withdrawAmnt - reserves) + reserves;\\n\\n\\t\\t\\t// use the minimum of the two\\n\\t\\t\\tamount = min(withdrawAmnt, amount);\\n\\t\\t}\\n\\t\\t// grab current tvl to account for fees and slippage\\n\\t\\t(tvl, , , , , ) = getTVL();\\n\\n\\t\\t// round up to keep price precision and leave less dust\\n\\t\\tburnShares = min(((amount + 1) * totalSupply()) / tvl, totalSupply());\\n\\n\\t\\t_underlying.safeTransferFrom(address(this), vault(), amount);\\n\\t\\t// require(tvl > 0, \\\"no funds in vault\\\");\\n\\t\\temit Withdraw(msg.sender, amount);\\n\\t}\\n\\n\\t// decreases position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\t// ** may return slighly less then desired amount\\n\\t// ** make sure to update lending positions before calling this\\n\\tfunction _decreasePosition(uint256 amount) internal returns (uint256) {\\n\\t\\tuint256 removeLpAmnt = _totalToLp(amount);\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\t\\tuint256 removeShortLp = _underlyingToShort(removeLpAmnt);\\n\\n\\t\\tif (removeLpAmnt >= underlyingLp || removeShortLp >= shortPosition) return _closePosition();\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 availableUnderlying, uint256 shortBalance) = _decreaseLpTo(\\n\\t\\t\\tunderlyingLp - removeLpAmnt\\n\\t\\t);\\n\\n\\t\\t_repay(shortBalance);\\n\\n\\t\\t// this might remove less collateral than desired if we hit the limit\\n\\t\\t// this happens when position is close to empty\\n\\t\\tavailableUnderlying += _removeCollateral(amount - availableUnderlying);\\n\\t\\treturn availableUnderlying;\\n\\t}\\n\\n\\t// increases the position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\tfunction _increasePosition(uint256 amount) internal {\\n\\t\\tif (amount < MINIMUM_LIQUIDITY) return; // avoid imprecision\\n\\t\\tuint256 amntUnderlying = _totalToLp(amount);\\n\\t\\tuint256 amntShort = _underlyingToShort(amntUnderlying);\\n\\t\\t_lend(amount - amntUnderlying);\\n\\t\\t_borrow(amntShort);\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\t// use the return of the function to estimate pending harvest via staticCall\\n\\tfunction harvest(\\n\\t\\tHarvestSwapParms[] calldata uniParams,\\n\\t\\tHarvestSwapParms[] calldata lendingParams\\n\\t)\\n\\t\\texternal\\n\\t\\tonlyAuth\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256[] memory farmHarvest, uint256[] memory lendHarvest)\\n\\t{\\n\\t\\t(uint256 startTvl, , , , , ) = getTVL();\\n\\t\\tif (uniParams.length != 0) farmHarvest = _harvestFarm(uniParams);\\n\\t\\tif (lendingParams.length != 0) lendHarvest = _harvestLending(lendingParams);\\n\\n\\t\\t// compound our lp position disreguarding the borrowTarget param\\n\\t\\t_increaseLpPosition(type(uint256).max);\\n\\t\\temit Harvest(startTvl);\\n\\t}\\n\\n\\t// MANAGER + OWNER METHODS\\n\\n\\tfunction rebalance() external onlyAuth checkPrice nonReentrant {\\n\\t\\t// call this first to ensure we use an updated borrowBalance when computing offset\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 positionOffset = getPositionOffset();\\n\\n\\t\\t// don't rebalance unless we exceeded the threshold\\n\\t\\trequire(positionOffset > rebalanceThreshold, \\\"HLP: REB-THRESH\\\"); // maybe next time...\\n\\n\\t\\tif (tvl == 0) return;\\n\\t\\tuint256 targetUnderlyingLP = _totalToLp(tvl);\\n\\n\\t\\t_rebalancePosition(targetUnderlyingLP, tvl - targetUnderlyingLP);\\n\\t\\temit Rebalance(_shortToUnderlying(1e18), positionOffset, tvl);\\n\\t}\\n\\n\\tfunction closePosition() external onlyAuth checkPrice {\\n\\t\\t_closePosition();\\n\\t}\\n\\n\\tfunction _closePosition() internal returns (uint256) {\\n\\t\\t_decreaseLpTo(0);\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\t\\tif (shortPosition > shortBalance) {\\n\\t\\t\\tpair()._swapTokensForExactTokens(\\n\\t\\t\\t\\tshortPosition - shortBalance,\\n\\t\\t\\t\\taddress(_underlying),\\n\\t\\t\\t\\taddress(_short)\\n\\t\\t\\t);\\n\\t\\t} else if (shortBalance > shortPosition) {\\n\\t\\t\\tpair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tshortBalance - shortPosition,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_underlying)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_repay(_short.balanceOf(address(this)));\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\t_redeem(collateralBalance);\\n\\t\\treturn _underlying.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction _decreaseLpTo(uint256 targetUnderlyingLP)\\n\\t\\tinternal\\n\\t\\treturns (uint256 underlyingRemove, uint256 shortRemove)\\n\\t{\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tif (targetUnderlyingLP >= underlyingLp) return (0, 0); // nothing to withdraw\\n\\t\\tuint256 liquidity = _getLiquidity();\\n\\t\\tuint256 targetLiquidity = (liquidity * targetUnderlyingLP) / underlyingLp;\\n\\t\\tuint256 removeLp = liquidity - targetLiquidity;\\n\\t\\tuint256 liquidityBalance = pair().balanceOf(address(this));\\n\\t\\tif (removeLp > liquidityBalance) _withdrawFromFarm(removeLp - liquidityBalance);\\n\\t\\treturn removeLp == 0 ? (0, 0) : _removeLiquidity(removeLp);\\n\\t}\\n\\n\\tfunction _rebalancePosition(uint256 targetUnderlyingLP, uint256 targetCollateral) internal {\\n\\t\\tuint256 targetBorrow = _oraclePriceOfUnderlying(targetUnderlyingLP);\\n\\t\\t// we already updated tvl\\n\\t\\tuint256 currentBorrow = _getBorrowBalance();\\n\\n\\t\\t// borrow funds or repay loan\\n\\t\\tif (targetBorrow > currentBorrow) {\\n\\t\\t\\t// remove extra lp (we may need to remove more in order to add more collateral)\\n\\t\\t\\t_decreaseLpTo(\\n\\t\\t\\t\\t_needUnderlying(targetUnderlyingLP, targetCollateral) > 0 ? 0 : targetUnderlyingLP\\n\\t\\t\\t);\\n\\t\\t\\t// add collateral\\n\\t\\t\\t_adjustCollateral(targetCollateral);\\n\\t\\t\\t_borrow(targetBorrow - currentBorrow);\\n\\t\\t} else if (targetBorrow < currentBorrow) {\\n\\t\\t\\t// remove all of lp so we can repay loan\\n\\t\\t\\t_decreaseLpTo(0);\\n\\t\\t\\tuint256 repayAmnt = min(_short.balanceOf(address(this)), currentBorrow - targetBorrow);\\n\\t\\t\\tif (repayAmnt > 0) _repay(repayAmnt);\\n\\t\\t\\t// remove extra collateral\\n\\t\\t\\t_adjustCollateral(targetCollateral);\\n\\t\\t}\\n\\t\\t_increaseLpPosition(targetBorrow);\\n\\t}\\n\\n\\t///////////////////////////\\n\\t//// INCREASE LP POSITION\\n\\t///////////////////////\\n\\tfunction _increaseLpPosition(uint256 targetBorrow) internal {\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\n\\t\\t// here we make sure we don't add extra lp\\n\\t\\t(, uint256 shortLP) = _getLPBalances();\\n\\t\\tif (targetBorrow < shortLP) return;\\n\\n\\t\\tuint256 addShort = min(\\n\\t\\t\\t(shortBalance + _underlyingToShort(underlyingBalance)) / 2,\\n\\t\\t\\ttargetBorrow - shortLP\\n\\t\\t);\\n\\n\\t\\tuint256 addUnderlying = _shortToUnderlying(addShort);\\n\\n\\t\\t// buy or sell underlying\\n\\t\\tif (addUnderlying < underlyingBalance) {\\n\\t\\t\\tshortBalance += pair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tunderlyingBalance - addUnderlying,\\n\\t\\t\\t\\taddress(_underlying),\\n\\t\\t\\t\\taddress(_short)\\n\\t\\t\\t);\\n\\t\\t\\tunderlyingBalance = addUnderlying;\\n\\t\\t} else if (shortBalance > addShort) {\\n\\t\\t\\tunderlyingBalance += pair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tshortBalance - addShort,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_underlying)\\n\\t\\t\\t);\\n\\t\\t\\tshortBalance = addShort;\\n\\t\\t}\\n\\n\\t\\t// compute final lp amounts\\n\\t\\tuint256 amntShort = shortBalance;\\n\\t\\tuint256 amntUnderlying = _shortToUnderlying(amntShort);\\n\\t\\tif (underlyingBalance < amntUnderlying) {\\n\\t\\t\\tamntUnderlying = underlyingBalance;\\n\\t\\t\\tamntShort = _underlyingToShort(amntUnderlying);\\n\\t\\t}\\n\\n\\t\\tif (amntUnderlying == 0) return;\\n\\n\\t\\t// add liquidity\\n\\t\\t// don't need to use min with underlying and short because we did oracle check\\n\\t\\t// amounts are exact because we used swap price above\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\tfunction _needUnderlying(uint256 tragetUnderlying, uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (targetCollateral < collateralBalance) return 0;\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 uBalance = tragetUnderlying > underlyingLp ? tragetUnderlying - underlyingLp : 0;\\n\\t\\tuint256 addCollateral = targetCollateral - collateralBalance;\\n\\t\\tif (uBalance >= addCollateral) return 0;\\n\\t\\treturn addCollateral - uBalance;\\n\\t}\\n\\n\\t// TVL\\n\\n\\tfunction getMaxTvl() public view override returns (uint256) {\\n\\t\\treturn min(_maxTvl, _borrowToTotal(_oraclePriceOfShort(_maxBorrow())));\\n\\t}\\n\\n\\t// TODO should we compute pending farm & lending rewards here?\\n\\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 borrowBalance = _oraclePriceOfShort(shortPosition);\\n\\t\\tuint256 shortP = _short.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = shortP == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: _shortToUnderlying(_short.balanceOf(address(this)));\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\ttvl =\\n\\t\\t\\tcollateralBalance +\\n\\t\\t\\tunderlyingLp *\\n\\t\\t\\t2 -\\n\\t\\t\\tborrowBalance +\\n\\t\\t\\tunderlyingBalance +\\n\\t\\t\\tshortBalance;\\n\\t}\\n\\n\\t// for security this method should return cached value only\\n\\t// this is used by vault to track balance,\\n\\t// so this value should only be updated after oracle price check\\n\\tfunction balanceOfUnderlying() public view override returns (uint256) {\\n\\t\\treturn _cachedBalanceOfUnderlying;\\n\\t}\\n\\n\\tfunction getTotalTVL() public view returns (uint256 tvl) {\\n\\t\\t(tvl, , , , , ) = getTVL();\\n\\t}\\n\\n\\tfunction getTVL()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 tvl,\\n\\t\\t\\tuint256 collateralBalance,\\n\\t\\t\\tuint256 borrowPosition,\\n\\t\\t\\tuint256 borrowBalance,\\n\\t\\t\\tuint256 lpBalance,\\n\\t\\t\\tuint256 underlyingBalance\\n\\t\\t)\\n\\t{\\n\\t\\tcollateralBalance = _getCollateralBalance();\\n\\t\\tborrowPosition = _getBorrowBalance();\\n\\t\\tborrowBalance = _shortToUnderlying(borrowPosition);\\n\\n\\t\\tuint256 shortPosition = _short.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = shortPosition == 0 ? 0 : _oraclePriceOfShort(shortPosition);\\n\\n\\t\\t(uint256 underlyingLp, uint256 shortLp) = _getLPBalances();\\n\\t\\tlpBalance = underlyingLp + _shortToUnderlying(shortLp);\\n\\t\\tunderlyingBalance = _underlying.balanceOf(address(this));\\n\\n\\t\\ttvl = collateralBalance + lpBalance - borrowBalance + underlyingBalance + shortBalance;\\n\\t}\\n\\n\\tfunction getPositionOffset() public view returns (uint256 positionOffset) {\\n\\t\\t(, uint256 shortLp) = _getLPBalances();\\n\\t\\tuint256 borrowBalance = _getBorrowBalance();\\n\\t\\tuint256 shortBalance = shortLp + _short.balanceOf(address(this));\\n\\n\\t\\tif (shortBalance == borrowBalance) return 0;\\n\\t\\t// if short lp > 0 and borrowBalance is 0 we are off by inf, returning 100% should be enough\\n\\t\\tif (borrowBalance == 0) return 10000;\\n\\n\\t\\t// this is the % by which our position has moved from beeing balanced\\n\\t\\tpositionOffset = shortBalance > borrowBalance\\n\\t\\t\\t? ((shortBalance - borrowBalance) * BPS_ADJUST) / borrowBalance\\n\\t\\t\\t: ((borrowBalance - shortBalance) * BPS_ADJUST) / borrowBalance;\\n\\t}\\n\\n\\t// UTILS\\n\\n\\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\\n\\t}\\n\\n\\tfunction _borrowToTotal(uint256 amount) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (amount * (BPS_ADJUST + cRatio)) / cRatio;\\n\\t}\\n\\n\\t// this is the current uniswap price\\n\\tfunction _shortToUnderlying(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount == 0 ? 0 : _quote(amount, address(_short), address(_underlying));\\n\\t}\\n\\n\\t// this is the current uniswap price\\n\\tfunction _underlyingToShort(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount == 0 ? 0 : _quote(amount, address(_underlying), address(_short));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the smallest of two numbers.\\n\\t */\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n}\\n\",\"keccak256\":\"0x76b15957e8f7274bb25004b724f54f4af1a2593e62fe193cfa64c215e74b5057\",\"license\":\"MIT\"},\"src/strategies/adapters/BenqiFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/forks/IClaimReward.sol\\\";\\nimport \\\"./CompoundFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract BenqiFarm is CompoundFarm {\\n\\t// BenQi has two two token rewards\\n\\t// pid 0 is Qi token and pid 1 is AVAX (not wrapped)\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t// qi rewards\\n\\t\\tIClaimReward(address(comptroller())).claimReward(0, payable(address(this)));\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\n\\t\\tif (harvested[0] > 0) {\\n\\t\\t\\t_swap(lendFarmRouter(), swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\t\\t}\\n\\n\\t\\t// specific to benqi\\n\\t\\t// avax rewards - we handle re-deposit here because strategy is not aware of these rewards\\n\\t\\tIClaimReward(address(comptroller())).claimReward(1, payable(address(this)));\\n\\t\\tuint256 avaxBalance = address(this).balance;\\n\\n\\t\\t// use avaxBalance to repay a portion of the loan\\n\\t\\tif (avaxBalance > 0) _repayBase(avaxBalance);\\n\\n\\t\\temit HarvestedToken(address(short()), avaxBalance);\\n\\t}\\n}\\n\",\"keccak256\":\"0x42606fee28a4d8bc4ec60ab5843a16721b783d09c066a5492c5bde16f87fe9ed\",\"license\":\"MIT\"},\"src/strategies/adapters/Compound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../../mixins/ICompound.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract Compound is ICompound {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tICTokenErc20 private _cTokenLend;\\n\\tICTokenErc20 private _cTokenBorrow;\\n\\n\\tIComptroller private _comptroller;\\n\\tICompPriceOracle private _oracle;\\n\\n\\tuint256 private _safeCollateralRatio; // percentage of max ratio\\n\\n\\tfunction __Compound_init_(\\n\\t\\taddress comptroller_,\\n\\t\\taddress cTokenLend_,\\n\\t\\taddress cTokenBorrow_,\\n\\t\\tuint256 safeCollateralRatio_\\n\\t) internal {\\n\\t\\t_cTokenLend = ICTokenErc20(cTokenLend_);\\n\\t\\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\\n\\t\\t_comptroller = IComptroller(comptroller_);\\n\\t\\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\\n\\t\\t_safeCollateralRatio = safeCollateralRatio_;\\n\\t\\t_enterMarket();\\n\\t}\\n\\n\\tfunction _addLendingApprovals() internal override {\\n\\t\\t// ensure USDC approval - assume we trust USDC\\n\\t\\tunderlying().safeApprove(address(_cTokenLend), type(uint256).max);\\n\\t\\tshort().safeApprove(address(_cTokenBorrow), type(uint256).max);\\n\\t}\\n\\n\\tfunction safeCollateralRatio() public view override(ILending) returns (uint256) {\\n\\t\\treturn _safeCollateralRatio;\\n\\t}\\n\\n\\tfunction cTokenLend() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenLend;\\n\\t}\\n\\n\\tfunction cTokenBorrow() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenBorrow;\\n\\t}\\n\\n\\tfunction oracle() public view override returns (ICompPriceOracle) {\\n\\t\\treturn _oracle;\\n\\t}\\n\\n\\tfunction comptroller() public view override returns (IComptroller) {\\n\\t\\treturn _comptroller;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf57e20b118b0f84772c1b4680fbc5dcf292bc87e6374eb29de03e898ab68dd67\",\"license\":\"MIT\"},\"src/strategies/adapters/CompoundFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../mixins/ICompound.sol\\\";\\nimport \\\"../../mixins/IFarmable.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract CompoundFarm is ICompound, IFarmable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIUniswapV2Router01 private _router; // use router here\\n\\tIERC20 _farmToken;\\n\\n\\tfunction __CompoundFarm_init_(address router_, address token_) internal initializer {\\n\\t\\t_farmToken = IERC20(token_);\\n\\t\\t_router = IUniswapV2Router01(router_);\\n\\t\\t_farmToken.safeApprove(address(_router), type(uint256).max);\\n\\t}\\n\\n\\tfunction lendFarmRouter() public view override returns (IUniswapV2Router01) {\\n\\t\\treturn _router;\\n\\t}\\n\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t// comp token rewards\\n\\t\\tICTokenErc20[] memory cTokens = new ICTokenErc20[](2);\\n\\t\\tcTokens[0] = cTokenLend();\\n\\t\\tcTokens[1] = cTokenBorrow();\\n\\t\\tcomptroller().claimComp(address(this), cTokens);\\n\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\t\\tif (harvested[0] == 0) return harvested;\\n\\n\\t\\tif (address(_router) != address(0))\\n\\t\\t\\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\t}\\n}\\n\",\"keccak256\":\"0x8f3e7c6895995ad29e3cb14a2def4553aec20b3f09f0d5d6a46d22b3108619ee\",\"license\":\"MIT\"},\"src/strategies/adapters/MiniChefFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IMiniChefV2 } from \\\"../../interfaces/uniswap/IStakingRewards.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"../../mixins/IFarmableLp.sol\\\";\\nimport \\\"../../mixins/IUniLp.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract MiniChefFarm is IFarmableLp, IUniLp {\\n\\tusing UniUtils for IUniswapV2Pair;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIMiniChefV2 private _farm;\\n\\tIUniswapV2Router01 private _router;\\n\\tIERC20 private _farmToken;\\n\\tIUniswapV2Pair private _pair;\\n\\tuint256 private _farmId;\\n\\n\\tfunction __MiniChefFarm_init_(\\n\\t\\taddress pair_,\\n\\t\\taddress farm_,\\n\\t\\taddress router_,\\n\\t\\taddress farmToken_,\\n\\t\\tuint256 farmPid_\\n\\t) internal initializer {\\n\\t\\t_farm = IMiniChefV2(farm_);\\n\\t\\t_router = IUniswapV2Router01(router_);\\n\\t\\t_farmToken = IERC20(farmToken_);\\n\\t\\t_pair = IUniswapV2Pair(pair_);\\n\\t\\t_farmId = farmPid_;\\n\\t}\\n\\n\\tfunction _addFarmApprovals() internal override {\\n\\t\\t// farm approvals\\n\\t\\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\\n\\t\\t_farmToken.safeApprove(address(_router), type(uint256).max);\\n\\t}\\n\\n\\tfunction farmRouter() public view override returns (IUniswapV2Router01) {\\n\\t\\treturn _router;\\n\\t}\\n\\n\\tfunction pair() public view override returns (IUniswapV2Pair) {\\n\\t\\treturn _pair;\\n\\t}\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal override {\\n\\t\\t_farm.withdraw(_farmId, amount, address(this));\\n\\t}\\n\\n\\tfunction _depositIntoFarm(uint256 amount) internal override {\\n\\t\\t_farm.deposit(_farmId, amount, address(this));\\n\\t}\\n\\n\\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t_farm.harvest(_farmId, address(this));\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\t\\tif (harvested[0] == 0) return harvested;\\n\\n\\t\\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\t}\\n\\n\\tfunction _getFarmLp() internal view override returns (uint256) {\\n\\t\\t(uint256 lp, ) = _farm.userInfo(_farmId, address(this));\\n\\t\\treturn lp;\\n\\t}\\n\\n\\tfunction _getLiquidity() internal view override returns (uint256) {\\n\\t\\tuint256 farmLp = _getFarmLp();\\n\\t\\tuint256 poolLp = _pair.balanceOf(address(this));\\n\\t\\treturn farmLp + poolLp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x17b28ff8c50510ac2bdd6b0967be4420e1360676ca7ed3a802fe0f3559a4753a\",\"license\":\"MIT\"},\"src/strategies/implementations/USDCavaxPNGqi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../HedgedLP.sol\\\";\\nimport \\\"../adapters/Compound.sol\\\";\\nimport \\\"../adapters/MiniChefFarm.sol\\\";\\nimport \\\"../adapters/BenqiFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract USDCavaxPNGqi is HedgedLP, Compound, BenqiFarm, MiniChefFarm {\\n\\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\\n\\t\\t__MiniChefFarm_init_(\\n\\t\\t\\tconfig.uniPair,\\n\\t\\t\\tconfig.uniFarm,\\n\\t\\t\\tconfig.farmRouter,\\n\\t\\t\\tconfig.farmToken,\\n\\t\\t\\tconfig.farmId\\n\\t\\t);\\n\\n\\t\\t__Compound_init_(\\n\\t\\t\\tconfig.comptroller,\\n\\t\\t\\tconfig.cTokenLend,\\n\\t\\t\\tconfig.cTokenBorrow,\\n\\t\\t\\tconfig.safeCollateralRatio\\n\\t\\t);\\n\\n\\t\\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\\n\\n\\t\\t// HedgedLP should allways be intialized last\\n\\t\\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\\n\\t}\\n\\n\\t// if borrow token is treated as ETH\\n\\tfunction _isBase(uint8 id) internal pure override(ICompound) returns (bool) {\\n\\t\\treturn id == 1 ? true : false;\\n\\t}\\n}\\n\",\"keccak256\":\"0xbdbb51461bc6d532398bda4f489363361bd69db5aeebc54865e9b15ab3dee8a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526046600a55670e92596fd6290000600b55600d805463ffffffff60a01b191661201960a41b1790553480156200003957600080fd5b5060405162006061380380620060618339810160408190526200005c9162000d59565b6101a08101516101c08201516101e083015162000079336200014f565b60018055600480546001600160a01b0319166001600160a01b0385161790558151620000ad90600790602085019062000b7e565b508051620000c390600690602084019062000b7e565b505050608082015160a083015161010084015160c085015160e0860151620000ec95506200019f565b62000112816101200151826040015183606001518461018001516200022460201b60201c565b6200012e816101400151826101600151620002f660201b60201c565b80516020820151610200830151620001489291906200036b565b5062001277565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff1615620001ce5760405162461bcd60e51b8152600401620001c59062000f06565b60405180910390fd5b601780546001600160a01b03199081166001600160a01b03968716179091556018805482169486169490941790935560198054841692851692909217909155601a80549092169390921692909217909155601b55565b601080546001600160a01b038086166001600160a01b03199283161790925560118054858416908316179055601280549287169290911682179055604080516307dc0d1d60e41b81529051637dc0d1d0916004808201926020929091908290030181865afa1580156200029b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c1919062000f2b565b601380546001600160a01b0319166001600160a01b03929092169190911790556014819055620002f0620004e3565b50505050565b60025460ff16156200031c5760405162461bcd60e51b8152600401620001c59062000f06565b601680546001600160a01b03199081166001600160a01b03848116918217909355601580549092169285169283179091556200036791600019620005df602090811b620018fc17901c565b5050565b60025460ff1615620003915760405162461bcd60e51b8152600401620001c59062000f06565b600c80546001600160a01b038086166001600160a01b03199283168117909355600d805491861691909216179055620003dd9030600019620018fc620005df602090811b91909117901c565b620003e76200072e565b620003f490600a6200105e565b6009556200040281620007a4565b7f5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f9600b546040516200043691815260200190565b60405180910390a17f3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb600a546040516200047291815260200190565b60405180910390a1600d54604051600160a01b90910461ffff1681527f36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b9060200160405180910390a1620004c56200084c565b620004cf620008ba565b50506002805461ff00191661010017905550565b6040805160028082526060820183526000926020830190803683375050601054919250506001600160a01b0316816000815181106200052657620005266200106f565b6001600160a01b03928316602091820292909201015260115416816001815181106200055657620005566200106f565b6001600160a01b039283166020918202929092010152601254604051631853304760e31b815291169063c2998238906200059590849060040162001085565b6000604051808303816000875af1158015620005b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003679190810190620010d4565b8015806200065d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801562000635573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200065b919062001184565b155b620006d15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401620001c5565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620007299185916200091416565b505050565b600c546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000779573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200079f91906200119e565b905090565b6000546001600160a01b0316331480620007d257503360009081526008602052604090205460ff1615156001145b620008115760405162461bcd60e51b815260206004820152600e60248201526d0a6e8e4c2e874409c9ebe82aaa8960931b6044820152606401620001c5565b600e8190556040518181527f13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a129060200160405180910390a150565b60105462000891906001600160a01b031660001962000873600c546001600160a01b031690565b6001600160a01b0316620005df60201b620018fc179092919060201c565b601154620008b8906001600160a01b031660001962000873600d546001600160a01b031690565b565b601754601a54620008e7916001600160a01b039182169116600019620005df602090811b620018fc17901c565b601854601954620008b8916001600160a01b039182169116600019620005df602090811b620018fc17901c565b600062000970826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620009f260201b62001a3c179092919060201c565b805190915015620007295780806020019051810190620009919190620011c3565b620007295760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620001c5565b606062000a03848460008562000a0d565b90505b9392505050565b60608247101562000a705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620001c5565b843b62000ac05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620001c5565b600080866001600160a01b0316858760405162000ade9190620011e7565b60006040518083038185875af1925050503d806000811462000b1d576040519150601f19603f3d011682016040523d82523d6000602084013e62000b22565b606091505b50909250905062000b3582828662000b40565b979650505050505050565b6060831562000b5157508162000a06565b82511562000b625782518084602001fd5b8160405162461bcd60e51b8152600401620001c5919062001205565b82805462000b8c906200123a565b90600052602060002090601f01602090048101928262000bb0576000855562000bfb565b82601f1062000bcb57805160ff191683800117855562000bfb565b8280016001018555821562000bfb579182015b8281111562000bfb57825182559160200191906001019062000bde565b5062000c0992915062000c0d565b5090565b5b8082111562000c09576000815560010162000c0e565b634e487b7160e01b600052604160045260246000fd5b60405161022081016001600160401b038111828210171562000c605762000c6062000c24565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000c915762000c9162000c24565b604052919050565b80516001600160a01b038116811462000cb157600080fd5b919050565b60005b8381101562000cd357818101518382015260200162000cb9565b83811115620002f05750506000910152565b600082601f83011262000cf757600080fd5b81516001600160401b0381111562000d135762000d1362000c24565b62000d28601f8201601f191660200162000c66565b81815284602083860101111562000d3e57600080fd5b62000d5182602083016020870162000cb6565b949350505050565b60006020828403121562000d6c57600080fd5b81516001600160401b038082111562000d8457600080fd5b90830190610220828603121562000d9a57600080fd5b62000da462000c3a565b62000daf8362000c99565b815262000dbf6020840162000c99565b602082015262000dd26040840162000c99565b604082015262000de56060840162000c99565b606082015262000df86080840162000c99565b608082015262000e0b60a0840162000c99565b60a082015262000e1e60c0840162000c99565b60c082015260e083015160e082015261010062000e3d81850162000c99565b9082015261012062000e5184820162000c99565b9082015261014062000e6584820162000c99565b9082015261016062000e7984820162000c99565b9082015261018083810151908201526101a062000e9881850162000c99565b908201526101c0838101518381111562000eb157600080fd5b62000ebf8882870162000ce5565b8284015250506101e0808401518381111562000eda57600080fd5b62000ee88882870162000ce5565b91830191909152506102009283015192810192909252509392505050565b6020808252600b908201526a125392551250531256915160aa1b604082015260600190565b60006020828403121562000f3e57600080fd5b62000a068262000c99565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000fa057816000190482111562000f845762000f8462000f49565b8085161562000f9257918102915b93841c939080029062000f64565b509250929050565b60008262000fb95750600162001058565b8162000fc85750600062001058565b816001811462000fe1576002811462000fec576200100c565b600191505062001058565b60ff84111562001000576200100062000f49565b50506001821b62001058565b5060208310610133831016604e8410600b841016171562001031575081810a62001058565b6200103d838362000f5f565b806000190482111562001054576200105462000f49565b0290505b92915050565b600062000a0660ff84168362000fa8565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015620010c85783516001600160a01b031683529284019291840191600101620010a1565b50909695505050505050565b60006020808385031215620010e857600080fd5b82516001600160401b03808211156200110057600080fd5b818501915085601f8301126200111557600080fd5b8151818111156200112a576200112a62000c24565b8060051b91506200113d84830162000c66565b81815291830184019184810190888411156200115857600080fd5b938501935b8385101562001178578451825293850193908501906200115d565b98975050505050505050565b6000602082840312156200119757600080fd5b5051919050565b600060208284031215620011b157600080fd5b815160ff8116811462000a0657600080fd5b600060208284031215620011d657600080fd5b8151801515811462000a0657600080fd5b60008251620011fb81846020870162000cb6565b9190910192915050565b60208152600082518060208401526200122681604085016020870162000cb6565b601f01601f19169190910160400192915050565b600181811c908216806200124f57607f821691505b602082108114156200127157634e487b7160e01b600052602260045260246000fd5b50919050565b614dda80620012876000396000f3fe6080604052600436106102325760003560e01c806306fdde031461023e5780630c021ae5146102695780630d55046c1461028c5780630e962f00146102b35780631585e0b6146102c957806318160ddd146102eb578063313ce56714610300578063358d6a041461032757806338bea4cb1461033c5780633af9e669146103515780633bf295cc146103715780633d68175c146103865780633dcf13421461039b5780633dfe9f6a146103bb5780634880f951146103f057806354fd4d50146104055780635fe3b567146104275780636817031b1461043c5780636f307dc31461045c578063711326ce14610471578063715018a6146104915780637d7c2a1c146104a65780637da64483146104bb5780637dc0d1d0146104e55780637ffe28e3146104fa578063852a12e31461050f57806386aceac71461052f5780638da5cb5b1461054557806395d89b411461055a57806397b3fcaa1461056f578063a0712d68146105b1578063a52602b9146105d1578063a5e90eee146105e6578063a8aa1b3114610606578063ac784ddc1461061b578063b580a1281461062f578063c393d0e314610644578063cb50087f14610659578063cd377c5314610679578063d539fe4b1461068e578063de747e5a146106a3578063f1a392da146106c3578063f20aea0f146106d9578063f2fde38b14610707578063f3ae241514610727578063f9e40ac414610760578063fbfa77cf1461078a578063fd6bac701461079f578063fec18b3a146107b457600080fd5b3661023957005b600080fd5b34801561024a57600080fd5b506102536107c9565b6040516102609190614583565b60405180910390f35b34801561027557600080fd5b5061027e610857565b604051908152602001610260565b34801561029857600080fd5b506018546001600160a01b03165b6040516102609190614596565b3480156102bf57600080fd5b5061027e60095481565b3480156102d557600080fd5b506102e96102e43660046145aa565b61086c565b005b3480156102f757600080fd5b5060055461027e565b34801561030c57600080fd5b506103156108e6565b60405160ff9091168152602001610260565b34801561033357600080fd5b5061027e610959565b34801561034857600080fd5b506102a661097e565b34801561035d57600080fd5b5061027e61036c3660046145d8565b61098d565b34801561037d57600080fd5b5061027e61099e565b34801561039257600080fd5b5061027e610a07565b3480156103a757600080fd5b506102e96103b6366004614639565b610a48565b3480156103c757600080fd5b50600d546103dd90600160a01b900461ffff1681565b60405161ffff9091168152602001610260565b3480156103fc57600080fd5b50600f5461027e565b34801561041157600080fd5b50600d546103dd90600160b01b900461ffff1681565b34801561043357600080fd5b506102a6610baf565b34801561044857600080fd5b506102e96104573660046145d8565b610bbe565b34801561046857600080fd5b506102a6610c37565b34801561047d57600080fd5b506102e961048c3660046145aa565b610c46565b34801561049d57600080fd5b506102e9610caa565b3480156104b257600080fd5b506102e9610ce5565b3480156104c757600080fd5b506002546104d59060ff1681565b6040519015158152602001610260565b3480156104f157600080fd5b506102a6610ee8565b34801561050657600080fd5b506102e9610ef7565b34801561051b57600080fd5b5061027e61052a3660046145aa565b61101d565b34801561053b57600080fd5b5061027e600b5481565b34801561055157600080fd5b506102a6611084565b34801561056657600080fd5b50610253611093565b34801561057b57600080fd5b506105846110a0565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610260565b3480156105bd57600080fd5b5061027e6105cc3660046145aa565b611229565b3480156105dd57600080fd5b506102a6611282565b3480156105f257600080fd5b506102e961060136600461469b565b611291565b34801561061257600080fd5b506102a661131f565b34801561062757600080fd5b5060006104d5565b34801561063b57600080fd5b5061027e61132e565b34801561065057600080fd5b506102e9611431565b34801561066557600080fd5b506102e96106743660046145aa565b61151b565b34801561068557600080fd5b5061027e6115a7565b34801561069a57600080fd5b5060145461027e565b3480156106af57600080fd5b506102e96106be3660046146d4565b6115d7565b3480156106cf57600080fd5b5061027e60035481565b3480156106e557600080fd5b506106f96106f43660046146f8565b611656565b60405161026092919061479e565b34801561071357600080fd5b506102e96107223660046145d8565b6117f8565b34801561073357600080fd5b506104d56107423660046145d8565b6001600160a01b031660009081526008602052604090205460ff1690565b34801561076c57600080fd5b50610775611898565b60408051928352602083019190915201610260565b34801561079657600080fd5b506102a66118cf565b3480156107ab57600080fd5b506102a66118de565b3480156107c057600080fd5b506102a66118ed565b600680546107d6906147cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610802906147cc565b801561084f5780601f106108245761010080835404028352916020019161084f565b820191906000526020600020905b81548152906001019060200180831161083257829003601f168201915b505050505081565b60006108616110a0565b509395945050505050565b33610875611084565b6001600160a01b0316146108a45760405162461bcd60e51b815260040161089b90614801565b60405180910390fd5b600b8190556040518181527f5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f9906020015b60405180910390a150565b60055490565b600c546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190614836565b905090565b6000610954600e5461097961097461096f611a55565b611ac0565b611bcc565b611bfa565b600d546001600160a01b031690565b6000610998600f5490565b92915050565b6000806109ac61096f611c10565b905060006109b8611c62565b905060006109c4611d57565b6109d684670de0b6b3a764000061486f565b6109e0919061488e565b9050806109f583670de0b6b3a764000061486f565b6109ff919061488e565b935050505090565b600080610a13600f5490565b905060055460001415610a2857505060095490565b600554600954610a38908361486f565b610a42919061488e565b91505090565b610a506118cf565b6001600160a01b0316336001600160a01b031614610a805760405162461bcd60e51b815260040161089b906148b0565b60005b81811015610b56576000838383818110610a9f57610a9f6148db565b9050602002016020810190610ab491906145d8565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610ae49190614596565b602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2591906148f1565b90508015610b4157610b416001600160a01b0383168783611ddd565b50508080610b4e9061490a565b915050610a83565b504715610b6757610b673347611dfc565b826001600160a01b03167f2b06144d62a3a5785ec284ed392b3d106610ae2ce7af270417c4ca38277571048383604051610ba2929190614925565b60405180910390a2505050565b6012546001600160a01b031690565b33610bc7611084565b6001600160a01b031614610bed5760405162461bcd60e51b815260040161089b90614801565b600480546001600160a01b0319166001600160a01b0383169081179091556040517fdabed91cf547ed2ee836d5787bae42fc3bca488166c65791051105490fbcf7ca90600090a250565b600c546001600160a01b031690565b33610c4f611084565b6001600160a01b031614610c755760405162461bcd60e51b815260040161089b90614801565b600a8190556040518181527f3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb906020016108d5565b33610cb3611084565b6001600160a01b031614610cd95760405162461bcd60e51b815260040161089b90614801565b610ce36000611e4d565b565b610ced611084565b6001600160a01b0316336001600160a01b03161480610d2057503360009081526008602052604090205460ff1615156001145b610d3c5760405162461bcd60e51b815260040161089b90614973565b6000610d4f670de0b6b3a7640000611e9d565b90506000610d64670de0b6b3a7640000611ac0565b9050818111610d74578082610d77565b81815b600a54919350915081612710610d8d858361499b565b610d97919061486f565b610da1919061488e565b10610dbe5760405162461bcd60e51b815260040161089b906149b2565b60026001541415610de15760405162461bcd60e51b815260040161089b906149df565b60026001556000610df0611ed0565b90506000610dfc61132e565b600d54909150600160a01b900461ffff168111610e4d5760405162461bcd60e51b815260206004820152600f60248201526e09098a07440a48a845aa890a48aa69608b1b604482015260640161089b565b81610e59575050610ecd565b6000610e64836120bd565b9050610e7981610e74818661499b565b6120e0565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b610eab670de0b6b3a7640000611e9d565b6040805191825260208201859052810185905260600160405180910390a15050505b60018055610ed96110a0565b505050600f9290925550505050565b6013546001600160a01b031690565b60026001541415610f1a5760405162461bcd60e51b815260040161089b906149df565b60026001556000610f2961099e565b9050600b54811115610f695760405162461bcd60e51b8152602060048201526009602482015268484c503a205341464560b81b604482015260640161089b565b6000610f7361220b565b5090506000600b54612710838561251c610f8d919061486f565b610f97919061486f565b610fa1919061488e565b610fab919061488e565b9050600080610fb9836122cc565b91509150610fc6816123da565b610fcf826124d5565b337fdacd0a02d11128b25d6c3de23e91f71aa9dd5620c6f5c69f35a18d15e116846886610ffa61099e565b6040805192835260208301919091520160405180910390a2505060018055505050565b60006110276118cf565b6001600160a01b0316336001600160a01b0316146110575760405162461bcd60e51b815260040161089b906148b0565b60006110628361250a565b90508060056000828254611076919061499b565b909155506000949350505050565b6000546001600160a01b031690565b600780546107d6906147cc565b6000806000806000806110b1611c62565b94506110bb611c10565b93506110c684611e9d565b600d546040516370a0823160e01b81529194506000916001600160a01b03909116906370a08231906110fc903090600401614596565b602060405180830381865afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d91906148f1565b9050600081156111555761115082611ac0565b611158565b60005b905060008061116561220b565b9150915061117281611e9d565b61117c9083614a16565b600c546040516370a0823160e01b81529197506001600160a01b0316906370a08231906111ad903090600401614596565b602060405180830381865afa1580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee91906148f1565b94508285886111fd898d614a16565b611207919061499b565b6112119190614a16565b61121b9190614a16565b995050505050909192939495565b60006112336118cf565b6001600160a01b0316336001600160a01b0316146112635760405162461bcd60e51b815260040161089b906148b0565b600061126e83612791565b905080600560008282546110769190614a16565b6010546001600160a01b031690565b3361129a611084565b6001600160a01b0316146112c05760405162461bcd60e51b815260040161089b90614801565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f2458f684567d238b66deaa0126265bf3becabda0caaab7ebdda6b1794614a2d3910160405180910390a25050565b601a546001600160a01b031690565b60008061133961220b565b9150506000611346611c10565b600d546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061137c903090600401614596565b602060405180830381865afa158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd91906148f1565b6113c79084614a16565b9050818114156113db576000935050505090565b816113eb57612710935050505090565b8181116114195781612710611400838361499b565b61140a919061486f565b611414919061488e565b6109ff565b81612710611427828461499b565b6109f5919061486f565b611439611084565b6001600160a01b0316336001600160a01b0316148061146c57503360009081526008602052604090205460ff1615156001145b6114885760405162461bcd60e51b815260040161089b90614973565b600061149b670de0b6b3a7640000611e9d565b905060006114b0670de0b6b3a7640000611ac0565b90508181116114c05780826114c3565b81815b600a549193509150816127106114d9858361499b565b6114e3919061486f565b6114ed919061488e565b1061150a5760405162461bcd60e51b815260040161089b906149b2565b6115126129a7565b50610ed96110a0565b611523611084565b6001600160a01b0316336001600160a01b0316148061155657503360009081526008602052604090205460ff1615156001145b6115725760405162461bcd60e51b815260040161089b90614973565b600e8190556040518181527f13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a12906020016108d5565b6000670de0b6b3a76400006115bb60145490565b6115c3611d57565b6115cd919061486f565b610954919061488e565b336115e0611084565b6001600160a01b0316146116065760405162461bcd60e51b815260040161089b90614801565b600d805461ffff60a01b1916600160a01b61ffff8416908102919091179091556040519081527f36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b906020016108d5565b606080611661611084565b6001600160a01b0316336001600160a01b0316148061169457503360009081526008602052604090205460ff1615156001145b6116b05760405162461bcd60e51b815260040161089b90614973565b60006116c3670de0b6b3a7640000611e9d565b905060006116d8670de0b6b3a7640000611ac0565b90508181116116e85780826116eb565b81815b600a54919350915081612710611701858361499b565b61170b919061486f565b611715919061488e565b106117325760405162461bcd60e51b815260040161089b906149b2565b600260015414156117555760405162461bcd60e51b815260040161089b906149df565b600260015560006117646110a0565b50939450508a1592506117819150505761177e8989612bc0565b94505b8515611794576117918787612dcc565b93505b61179f60001961307a565b6040518181527f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d589060200160405180910390a150600180556117df6110a0565b505050600f929092555093989297509195505050505050565b33611801611084565b6001600160a01b0316146118275760405162461bcd60e51b815260040161089b90614801565b6001600160a01b03811661188c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161089b565b61189581611e4d565b50565b6000806118c66118a6610c37565b6118ae61097e565b6118b661131f565b6001600160a01b0316919061327b565b90939092509050565b6004546001600160a01b031690565b6011546001600160a01b031690565b6015546001600160a01b031690565b8015806119765750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197491906148f1565b155b6119e15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161089b565b611a378363095ea7b360e01b8484604051602401611a00929190614a2e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261333b565b505050565b6060611a4b848460008561340d565b90505b9392505050565b6000611a5f6118de565b6001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095491906148f1565b6000611aca610ee8565b6001600160a01b031663fc57d4df611ae0611282565b6040518263ffffffff1660e01b8152600401611afc9190614596565b602060405180830381865afa158015611b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3d91906148f1565b611b45610ee8565b6001600160a01b031663fc57d4df611b5b6118de565b6040518263ffffffff1660e01b8152600401611b779190614596565b602060405180830381865afa158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb891906148f1565b611bc2908461486f565b610998919061488e565b600080611bd76115a7565b905080611be681612710614a16565b611bf0908561486f565b611a4e919061488e565b6000818310611c095781611a4e565b5090919050565b6000611c1a6118de565b6001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401611c459190614596565b602060405180830381865afa158015611a9c573d6000803e3d6000fd5b600080611c6d611282565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611c989190614596565b602060405180830381865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd991906148f1565b9050670de0b6b3a7640000611cec611282565b6001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4d91906148f1565b610a38908361486f565b600080611d62610baf565b6001600160a01b0316638e8f294b611d78611282565b6040518263ffffffff1660e01b8152600401611d949190614596565b606060405180830381865afa158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd59190614a47565b509392505050565b611a378363a9059cbb60e01b8484604051602401611a00929190614a2e565b600080600080600085875af1905080611a375760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b604482015260640161089b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008115611ec857600d54600c54611ec39184916001600160a01b039182169116613535565b610998565b600092915050565b600080611edb61356d565b90506000611ee76135c1565b90506000611ef482611ac0565b600d546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611f2a903090600401614596565b602060405180830381865afa158015611f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6b91906148f1565b905060008115611ff257600d546040516370a0823160e01b8152611fed916001600160a01b0316906370a0823190611fa7903090600401614596565b602060405180830381865afa158015611fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe891906148f1565b611e9d565b611ff5565b60005b9050600061200161220b565b50600c546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612038903090600401614596565b602060405180830381865afa158015612055573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207991906148f1565b905082818661208985600261486f565b612093908b614a16565b61209d919061499b565b6120a79190614a16565b6120b19190614a16565b97505050505050505090565b6000806120c86115a7565b90506120d681612710614a16565b611bf0828561486f565b60006120eb836135f6565b905060006120f7611c10565b9050808211156121485761212360006121108686613691565b1161211b57846122cc565b60005b6122cc565b505061212e83613705565b50612143905061213e828461499b565b613767565b6121fc565b808210156121fc5761215a60006122cc565b5050600d546040516370a0823160e01b81526000916121de916001600160a01b03909116906370a0823190612193903090600401614596565b602060405180830381865afa1580156121b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d491906148f1565b610979858561499b565b905080156121ef576121ef816123da565b6121f884613705565b5050505b6122058261307a565b50505050565b600080600061221861384d565b9050600080612225611898565b91509150600061223361131f565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612270573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229491906148f1565b9050806122a1858561486f565b6122ab919061488e565b9550806122b8858461486f565b6122c2919061488e565b9450505050509091565b60008060006122d961220b565b5090508084106122ef5750600093849350915050565b60006122f961384d565b9050600082612308878461486f565b612312919061488e565b90506000612320828461499b565b9050600061232c61131f565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016123579190614596565b602060405180830381865afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239891906148f1565b9050808211156123b4576123b46123af828461499b565b6138e2565b81156123c8576123c38261394c565b6123cc565b6000805b965096505050505050915091565b6123e46001613a42565b15612459576123f161097e565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040161241e91815260200190565b600060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b5050505061189581613a5e565b6124616118de565b6001600160a01b0316630e752702826040518263ffffffff1660e01b815260040161248e91815260200190565b6020604051808303816000875af11580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d191906148f1565b5050565b6124dd611282565b6001600160a01b031663a0712d68826040518263ffffffff1660e01b815260040161248e91815260200190565b60008061251e670de0b6b3a7640000611e9d565b90506000612533670de0b6b3a7640000611ac0565b9050818111612543578082612546565b81815b600a5491935091508161271061255c858361499b565b612566919061486f565b612570919061488e565b1061258d5760405162461bcd60e51b815260040161089b906149b2565b600260015414156125b05760405162461bcd60e51b815260040161089b906149df565b6002600155836125c35760009250612772565b60006125cd611ed0565b9050806125de576000935050612772565b600c546040516370a0823160e01b81526000916001600160a01b0316906370a082319061260f903090600401614596565b602060405180830381865afa15801561262c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265091906148f1565b9050858110156126cd576000600019871461268757612682836103e86126788a6103ed61486f565b610979919061488e565b612689565b825b9050828110156126b557816126a66126a1828461499b565b613aa0565b6126b09190614a16565b6126bd565b6126bd6129a7565b90506126c98188611bfa565b9650505b6126d56110a0565b5093955061271493508592506126ed91506108e09050565b6126f8896001614a16565b612702919061486f565b61270c919061488e565b600554611bfa565b9450612736306127226118cf565b600c546001600160a01b0316919089613b30565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643387604051612767929190614a2e565b60405180910390a150505b6001805561277e6110a0565b505050600f929092555092949350505050565b6000806127a5670de0b6b3a7640000611e9d565b905060006127ba670de0b6b3a7640000611ac0565b90508181116127ca5780826127cd565b81815b600a549193509150816127106127e3858361499b565b6127ed919061486f565b6127f7919061488e565b106128145760405162461bcd60e51b815260040161089b906149b2565b600260015414156128375760405162461bcd60e51b815260040161089b906149df565b60026001558361284a5760009250612772565b6000612854611ed0565b905061285e610959565b6128688287614a16565b11156128aa5760405162461bcd60e51b81526020600482015260116024820152701213140e8813d5915497d3505617d51593607a1b604482015260640161089b565b600554156128d65780856128bd60055490565b6128c7919061486f565b6128d1919061488e565b6128d8565b845b600c549094506001600160a01b03166323b872dd6128f46118cf565b30886040518463ffffffff1660e01b815260040161291493929190614a8a565b6020604051808303816000875af1158015612933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129579190614aae565b5061296185613b51565b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3386604051612992929190614a2e565b60405180910390a1506001805561277e6110a0565b60006129b360006122cc565b505060006129bf6135c1565b600d546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906129f5903090600401614596565b602060405180830381865afa158015612a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3691906148f1565b905080821115612a7f57612a79612a4d828461499b565b600c54600d546001600160a01b039182169116612a6861131f565b6001600160a01b0316929190613baa565b50612ac2565b81811115612ac257612ac0612a94838361499b565b600d54600c546001600160a01b039182169116612aaf61131f565b6001600160a01b0316929190613c89565b505b600d546040516370a0823160e01b8152612b3a916001600160a01b0316906370a0823190612af4903090600401614596565b602060405180830381865afa158015612b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3591906148f1565b6123da565b6000612b4461356d565b9050612b4f81613cea565b600c546040516370a0823160e01b81526001600160a01b03909116906370a0823190612b7f903090600401614596565b602060405180830381865afa158015612b9c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff91906148f1565b601754601b54604051630c7e663b60e11b81526060926001600160a01b0316916318fccc7691612bf591903090600401614acb565b600060405180830381600087803b158015612c0f57600080fd5b505af1158015612c23573d6000803e3d6000fd5b5060019250612c30915050565b604051908082528060200260200182016040528015612c59578160200160208202803683370190505b506019546040516370a0823160e01b81529192506001600160a01b0316906370a0823190612c8b903090600401614596565b602060405180830381865afa158015612ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccc91906148f1565b81600081518110612cdf57612cdf6148db565b60200260200101818152505080600081518110612cfe57612cfe6148db565b602002602001015160001415612d1357610998565b601854612d75906001600160a01b03168484600081612d3457612d346148db565b9050602002810190612d469190614af8565b60195484516001600160a01b03909116908590600090612d6857612d686148db565b6020026020010151613d64565b60195481516001600160a01b0390911690600080516020614d85833981519152908390600090612da757612da76148db565b6020026020010151604051612dbe91815260200190565b60405180910390a292915050565b6060612dd6610baf565b6001600160a01b0316630952c5636000306040518363ffffffff1660e01b8152600401612e04929190614b18565b600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b5060019250612e3f915050565b604051908082528060200260200182016040528015612e68578160200160208202803683370190505b506016546040516370a0823160e01b81529192506001600160a01b0316906370a0823190612e9a903090600401614596565b602060405180830381865afa158015612eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edb91906148f1565b81600081518110612eee57612eee6148db565b602002602001018181525050600081600081518110612f0f57612f0f6148db565b60200260200101511115612fc157612f6f612f286118ed565b84846000818110612f3b57612f3b6148db565b9050602002810190612f4d9190614af8565b60165484516001600160a01b03909116908590600090612d6857612d686148db565b60165481516001600160a01b0390911690600080516020614d85833981519152908390600090612fa157612fa16148db565b6020026020010151604051612fb891815260200190565b60405180910390a25b612fc9610baf565b6001600160a01b0316630952c5636001306040518363ffffffff1660e01b8152600401612ff7929190614b18565b600060405180830381600087803b15801561301157600080fd5b505af1158015613025573d6000803e3d6000fd5b50479250508115905061303b5761303b81613a5e565b61304361097e565b6001600160a01b0316600080516020614d858339815191528260405161306b91815260200190565b60405180910390a25092915050565b600c546040516370a0823160e01b81526000916001600160a01b0316906370a08231906130ab903090600401614596565b602060405180830381865afa1580156130c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ec91906148f1565b600d546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190613122903090600401614596565b602060405180830381865afa15801561313f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316391906148f1565b9050600061316f61220b565b915050808410156131805750505050565b60006131ae600261319086613f09565b61319a9086614a16565b6131a4919061488e565b610979848861499b565b905060006131bb82611e9d565b905084811015613201576131ed6131d2828761499b565b600c54600d546001600160a01b039182169116612aaf61131f565b6131f79085614a16565b9350809450613226565b8184111561322657613216612a94838661499b565b6132209086614a16565b94508193505b83600061323282611e9d565b90508087101561324a57508561324781613f09565b91505b80613259575050505050505050565b60006132658284613f2f565b905061327081613fcf565b505050505050505050565b600080600061328a8585614004565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156132ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f29190614b50565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461332957808261332c565b81815b90999098509650505050505050565b6000613390826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a3c9092919063ffffffff16565b805190915015611a3757808060200190518101906133ae9190614aae565b611a375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161089b565b60608247101561346e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089b565b843b6134bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089b565b600080866001600160a01b031685876040516134d89190614b95565b60006040518083038185875af1925050503d8060008114613515576040519150601f19603f3d011682016040523d82523d6000602084013e61351a565b606091505b509150915061352a8282866140e7565b979650505050505050565b60008361354457506000611a4e565b60008061355485856118b661131f565b91509150613563868383614120565b9695505050505050565b6000613577611282565b6001600160a01b0316633af9e669306040518263ffffffff1660e01b81526004016135a29190614596565b6020604051808303816000875af1158015611a9c573d6000803e3d6000fd5b60006135cb6118de565b6001600160a01b03166317bfdfbc306040518263ffffffff1660e01b81526004016135a29190614596565b6000613600610ee8565b6001600160a01b031663fc57d4df6136166118de565b6040518263ffffffff1660e01b81526004016136329190614596565b602060405180830381865afa15801561364f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367391906148f1565b61367b610ee8565b6001600160a01b031663fc57d4df611b5b611282565b60008061369c611c62565b9050808310156136b0576000915050610998565b60006136ba61220b565b50905060008186116136cd5760006136d7565b6136d7828761499b565b905060006136e5848761499b565b90508082106136fb576000945050505050610998565b61352a828261499b565b6000806000613712611c62565b9050838114156137285750600093849350915050565b8381116137485761374161373c828661499b565b6141e2565b600061375c565b600061375c613757868461499b565b614281565b909590945092505050565b61376f6118de565b6001600160a01b031663c5ebeaec826040518263ffffffff1660e01b815260040161379c91815260200190565b6020604051808303816000875af11580156137bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137df91906148f1565b506137ea6001613a42565b15611895576137f761097e565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561383157600080fd5b505af1158015613845573d6000803e3d6000fd5b505050505050565b6000806138586142ae565b601a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061388e903090600401614596565b602060405180830381865afa1580156138ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138cf91906148f1565b90506138db8183614a16565b9250505090565b601754601b54604051630ad58d2f60e01b81526001600160a01b0390921691630ad58d2f916139179185903090600401614ba7565b600060405180830381600087803b15801561393157600080fd5b505af1158015613945573d6000803e3d6000fd5b5050505050565b60008061397361395a61131f565b8461396361131f565b6001600160a01b03169190611ddd565b600061398d613980610c37565b61398861097e565b614004565b50905060008061399b61131f565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b81526004016139c69190614596565b60408051808303816000875af11580156139e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a089190614bc6565b91509150613a14610c37565b6001600160a01b0316836001600160a01b031614613a33578082613a36565b81815b94509450505050915091565b60008160ff16600114613a56576000610998565b600192915050565b613a666118de565b6001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561383157600080fd5b600080613aac836120bd565b90506000613ab861220b565b5090506000613ac5611c10565b90506000613ad284613f09565b90508284101580613ae35750818110155b15613af0576135636129a7565b600080613b0061211e878761499b565b91509150613b0d816123da565b613b1a613757838a61499b565b613b249083614a16565b98975050505050505050565b612205846323b872dd60e01b858585604051602401611a0093929190614a8a565b6103e8811015613b5e5750565b6000613b69826120bd565b90506000613b7682613f09565b9050613b8a613b85838561499b565b6124d5565b613b9381613767565b6000613b9f8383613f2f565b905061220581613fcf565b600080613bb98686868661432d565b90506000613bc78486614004565b509050600080826001600160a01b0316876001600160a01b031614613bee57876000613bf2565b6000885b9092509050613c0b6001600160a01b0388168a86611ddd565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f90613c4a9085908590309060248101614bea565b600060405180830381600087803b158015613c6457600080fd5b505af1158015613c78573d6000803e3d6000fd5b50959b9a5050505050505050505050565b600080613c98868686866143f3565b90506000613ca68486614004565b509050600080826001600160a01b0316876001600160a01b031614613ccd57836000613cd1565b6000845b9092509050613c0b6001600160a01b0388168a8a611ddd565b6000613cf4611282565b6001600160a01b031663852a12e3836040518263ffffffff1660e01b8152600401613d2191815260200190565b6020604051808303816000875af1158015613d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3791906148f1565b6000613d708480614c17565b6001613d7c8780614c17565b613d8792915061499b565b818110613d9657613d966148db565b9050602002016020810190613dab91906145d8565b90506001600160a01b038316613dc18580614c17565b6000818110613dd257613dd26148db565b9050602002016020810190613de791906145d8565b6001600160a01b0316148015613e155750613e0061097e565b6001600160a01b0316816001600160a01b0316145b80613e385750613e23610c37565b6001600160a01b0316816001600160a01b0316145b613e7c5760405162461bcd60e51b81526020600482015260156024820152740928cc2e4dac2c4d8ca7440aea49e9c8ebea082a89605b1b604482015260640161089b565b6001600160a01b0385166338ed1739836020870135613e9b8880614c17565b308a604001356040518763ffffffff1660e01b8152600401613ec296959493929190614c60565b6000604051808303816000875af1158015613ee1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138459190810190614cd3565b60008115611ec857600c54600d54611ec39184916001600160a01b039182169116613535565b6000613f45613f3c61131f565b84613963610c37565b613f59613f5061131f565b8361396361097e565b613f6161131f565b6001600160a01b0316636a627842306040518263ffffffff1660e01b8152600401613f8c9190614596565b6020604051808303816000875af1158015613fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4e91906148f1565b601754601b54604051638dbdbe6d60e01b81526001600160a01b0390921691638dbdbe6d916139179185903090600401614ba7565b600080826001600160a01b0316846001600160a01b031614156140695760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f414444524553534553000000604482015260640161089b565b826001600160a01b0316846001600160a01b03161061408957828461408c565b83835b90925090506001600160a01b0382166140e05760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b604482015260640161089b565b9250929050565b606083156140f6575081611a4e565b8251156141065782518084602001fd5b8160405162461bcd60e51b815260040161089b9190614583565b60008084116141715760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e54000000604482015260640161089b565b6000831180156141815750600082115b6141cd5760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c4951554944495459604482015260640161089b565b826141d8838661486f565b611a4b919061488e565b6000806141ed610c37565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016142189190614596565b602060405180830381865afa158015614235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425991906148f1565b9050828111614268578061426a565b825b9150811561427b5761427b826124d5565b50919050565b60008061428c6144b4565b905082811161429b578061429d565b825b9150811561427b5761427b82613cea565b601754601b546040516393f1a40b60e01b815260009283926001600160a01b03909116916393f1a40b916142e6913090600401614acb565b6040805180830381865afa158015614302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143269190614bc6565b5092915050565b600080841161438a5760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b606482015260840161089b565b60008061439887868661327b565b909250905060006143a9878461486f565b6143b5906103e861486f565b905060006143c3888461499b565b6143cf906103e561486f565b90506143db818361488e565b6143e6906001614a16565b9998505050505050505050565b60008084116144505760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b606482015260840161089b565b60008061445e87868661327b565b90925090506000614471876103e561486f565b9050600061447f838361486f565b9050600082614490866103e861486f565b61449a9190614a16565b90506144a6818361488e565b9a9950505050505050505050565b6000806144bf611c62565b905060006144ce61096f611c10565b90506000605f6144dc611d57565b6144ee84670de0b6b3a764000061486f565b6144f990606461486f565b614503919061488e565b61450d919061488e565b905082811115614521576000935050505090565b6109ff818461499b565b60005b8381101561454657818101518382015260200161452e565b838111156122055750506000910152565b6000815180845261456f81602086016020860161452b565b601f01601f19169290920160200192915050565b602081526000611a4e6020830184614557565b6001600160a01b0391909116815260200190565b6000602082840312156145bc57600080fd5b5035919050565b6001600160a01b038116811461189557600080fd5b6000602082840312156145ea57600080fd5b8135611a4e816145c3565b60008083601f84011261460757600080fd5b5081356001600160401b0381111561461e57600080fd5b6020830191508360208260051b85010111156140e057600080fd5b60008060006040848603121561464e57600080fd5b8335614659816145c3565b925060208401356001600160401b0381111561467457600080fd5b614680868287016145f5565b9497909650939450505050565b801515811461189557600080fd5b600080604083850312156146ae57600080fd5b82356146b9816145c3565b915060208301356146c98161468d565b809150509250929050565b6000602082840312156146e657600080fd5b813561ffff81168114611a4e57600080fd5b6000806000806040858703121561470e57600080fd5b84356001600160401b038082111561472557600080fd5b614731888389016145f5565b9096509450602087013591508082111561474a57600080fd5b50614757878288016145f5565b95989497509550505050565b600081518084526020808501945080840160005b8381101561479357815187529582019590820190600101614777565b509495945050505050565b6040815260006147b16040830185614763565b82810360208401526147c38185614763565b95945050505050565b600181811c908216806147e057607f821691505b6020821081141561427b57634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561484857600080fd5b815160ff81168114611a4e57600080fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561488957614889614859565b500290565b6000826148ab57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526011908201527014dd1c985d0e8813d3931657d590555315607a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561490357600080fd5b5051919050565b600060001982141561491e5761491e614859565b5060010190565b60208082528181018390526000908460408401835b8681101561496857823561494d816145c3565b6001600160a01b03168252918301919083019060010161493a565b509695505050505050565b6020808252600e908201526d0a6e8e4c2e874409c9ebe82aaa8960931b604082015260600190565b6000828210156149ad576149ad614859565b500390565b60208082526013908201527209098a07440a0a492868abe9a92a69a82a8869606b1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115614a2957614a29614859565b500190565b6001600160a01b03929092168252602082015260400190565b600080600060608486031215614a5c57600080fd5b8351614a678161468d565b602085015160408601519194509250614a7f8161468d565b809150509250925092565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215614ac057600080fd5b8151611a4e8161468d565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052604160045260246000fd5b60008235605e19833603018112614b0e57600080fd5b9190910192915050565b60ff9290921682526001600160a01b0316602082015260400190565b80516001600160701b0381168114614b4b57600080fd5b919050565b600080600060608486031215614b6557600080fd5b614b6e84614b34565b9250614b7c60208501614b34565b9150604084015163ffffffff81168114614a7f57600080fd5b60008251614b0e81846020870161452b565b92835260208301919091526001600160a01b0316604082015260600190565b60008060408385031215614bd957600080fd5b505080516020909101519092909150565b84815283602082015260018060a01b03831660408201526080606082015260006135636080830184614557565b6000808335601e19843603018112614c2e57600080fd5b8301803591506001600160401b03821115614c4857600080fd5b6020019150600581901b36038213156140e057600080fd5b868152602080820187905260a0604083018190528201859052600090869060c08401835b88811015614cb2578335614c97816145c3565b6001600160a01b031682529282019290820190600101614c84565b506001600160a01b0396909616606085015250505060800152949350505050565b60006020808385031215614ce657600080fd5b82516001600160401b0380821115614cfd57600080fd5b818501915085601f830112614d1157600080fd5b815181811115614d2357614d23614ae2565b8060051b604051601f19603f83011681018181108582111715614d4857614d48614ae2565b604052918252848201925083810185019188831115614d6657600080fd5b938501935b82851015613b2457845184529385019392850192614d6b56fe3efad319b6afe1e0317f51df66abdc4d7a7c8b1cfda31f03440b4ad255af7245a264697066735822122059b375b63339e4721a02d7fc62b2d37f4a310f356bdc7aa5dfeb5db94ba952b364736f6c634300080a0033",
  "deployedBytecode": "",
  "libraries": {
    "UniUtils": "0xd7df1eee437bc25edeffd5e54fc83f7e7fdb8a52"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getMaxTvl()": {
        "returns": {
          "_0": "MaxTvl"
        }
      },
      "isCEther()": {
        "details": "Only present in Fuse cTokens, not Compound cTokens.",
        "returns": {
          "_0": "True if the strategy accepts ETH, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeemUnderlying(uint256)": {
        "params": {
          "amount": "The amount of underlying tokens to withdraw."
        },
        "returns": {
          "errCode": "An error code, or 0 if the withdrawal was successful."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address,address[])": {
        "notice": "Withdraws any ERC20 tokens back to recipient."
      },
      "getMaxTvl()": {
        "notice": "Returns max deposits a strategy can take."
      },
      "getPricePerShare()": {
        "notice": "Returns the share price of the strategy in `underlying` units, multiplied  by 1e18"
      },
      "isCEther()": {
        "notice": "Returns whether the strategy accepts ETH or an ERC20."
      },
      "redeemUnderlying(uint256)": {
        "notice": "Withdraws a specific amount of underlying tokens from the strategy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2661,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4116,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 18263,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "isIntialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 19459,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "isInitialized",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 19464,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "lastHarvest",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 19466,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 19468,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_shares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 19470,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 19472,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 19476,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_managers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19478,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "BASE_UNIT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 19868,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_maxPriceMismatch",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 19871,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "minLoanHealth",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 19874,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_underlying",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)4769"
      },
      {
        "astId": 19877,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_short",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC20)4769"
      },
      {
        "astId": 19880,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "rebalanceThreshold",
        "offset": 20,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 19883,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "version",
        "offset": 22,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 19885,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_maxTvl",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 19887,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_cachedBalanceOfUnderlying",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 21602,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_cTokenLend",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(ICTokenErc20)16319"
      },
      {
        "astId": 21605,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_cTokenBorrow",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ICTokenErc20)16319"
      },
      {
        "astId": 21608,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_comptroller",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IComptroller)16561"
      },
      {
        "astId": 21611,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_oracle",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ICompPriceOracle)16342"
      },
      {
        "astId": 21613,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_safeCollateralRatio",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 21761,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_router",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IUniswapV2Router01)17509"
      },
      {
        "astId": 21764,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_farmToken",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IERC20)4769"
      },
      {
        "astId": 22235,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_farm",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IMiniChefV2)16896"
      },
      {
        "astId": 22238,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_router",
        "offset": 0,
        "slot": "24",
        "type": "t_contract(IUniswapV2Router01)17509"
      },
      {
        "astId": 22241,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_farmToken",
        "offset": 0,
        "slot": "25",
        "type": "t_contract(IERC20)4769"
      },
      {
        "astId": 22244,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_pair",
        "offset": 0,
        "slot": "26",
        "type": "t_contract(IUniswapV2Pair)17201"
      },
      {
        "astId": 22246,
        "contract": "src/strategies/implementations/USDCavaxPNGqi.sol:USDCavaxPNGqi",
        "label": "_farmId",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICTokenErc20)16319": {
        "encoding": "inplace",
        "label": "contract ICTokenErc20",
        "numberOfBytes": "20"
      },
      "t_contract(ICompPriceOracle)16342": {
        "encoding": "inplace",
        "label": "contract ICompPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IComptroller)16561": {
        "encoding": "inplace",
        "label": "contract IComptroller",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4769": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMiniChefV2)16896": {
        "encoding": "inplace",
        "label": "contract IMiniChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)17201": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router01)17509": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router01",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}