{
  "language": "Solidity",
  "sources": {
    "src/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract BaseStrategy is\n\tInitializable,\n\tERC20Upgradeable,\n\tERC20PermitUpgradeable,\n\tAccessControlUpgradeable,\n\tReentrancyGuardUpgradeable\n{\n\tusing SafeERC20 for IERC20;\n\n\tuint256 constant BPS_ADJUST = 10000;\n\tuint256 private constant SHARE_DECIMALS = 1e18;\n\n\tbytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n\tbytes32 public constant WHITELIST_ROLE = keccak256(\"WHITELIST_ROLE\");\n\n\t// upper limit for fees so owner cannot maliciously increase fees TODO - used when not upgradable\n\tuint256 public constant operationalFeeLimit = 500; // 5% limit\n\tuint256 public constant profitFeeLimit = 20000; // 20% limit\n\n\t// Vault limits TODO use these\n\tuint256 public accountDepositLimit; // max deposit per account\n\tuint256 public vaultTvlLimit; // max vault TVL. if this is reached, deposits will fail.\n\n\t// these need initialization\n\tuint256 public sharePriceTracker;\n\tuint256 public operationalFee;\n\tuint256 public profitFee;\n\taddress public rewardsAddr;\n\tuint256 public lastHarvest; // block.timestamp;\n\n\tevent UpdatedManager(address newManager);\n\tevent Harvested(uint256 harvested, uint256 profitFeeTaken, uint256 operationalFeeTaken);\n\tevent Deposit(address addr, uint256 want, uint256 shares);\n\tevent Withdrawal(address addr, uint256 want, uint256 shares, uint256 fee);\n\tevent UpdatedRewardsAddr(address rewardsAddr);\n\n\tfunction __BaseStrategy_init_unchained(\n\t\taddress rewardsAddr_,\n\t\tuint256 operationalFee_,\n\t\tuint256 profitFee_,\n\t\taddress manager\n\t) internal initializer {\n\t\trequire(\n\t\t\toperationalFee_ < operationalFeeLimit,\n\t\t\t\"BaseStrategy: operationalFee exceeds limit\"\n\t\t);\n\t\trequire(profitFee_ < profitFeeLimit, \"BaseStrategy: profitFee exceeds limit\");\n\n\t\t__ReentrancyGuard_init_unchained();\n\n\t\t_setupRole(MANAGER_ROLE, manager);\n\t\t_setupRole(WHITELIST_ROLE, manager);\n\t\t_setupRole(WHITELIST_ROLE, msg.sender);\n\n\t\trewardsAddr = rewardsAddr_;\n\t\toperationalFee = operationalFee_;\n\t\tprofitFee = profitFee_;\n\n\t\t// init defaults\n\t\tsharePriceTracker = SHARE_DECIMALS; // init at 1\n\t\tlastHarvest = block.timestamp;\n\t\taccountDepositLimit = type(uint256).max; // max deposit per account\n\t\tvaultTvlLimit = type(uint256).max; // max vault TVL. if this is reached, deposits will fail.\n\t}\n\n\t/**\n\t * @notice\n\t *  Used to change `rewards`. EOA or smart contract which has the permission\n\t *  to pull rewards from the vault.\n\t *\n\t *  This may only be called by the manager.\n\t * @param rewardsAddr_ The address to use for pulling rewards.\n\t */\n\t// function setRewards(address rewardsAddr_) external onlyOwner {\n\tfunction setRewards(address rewardsAddr_) external onlyRole(MANAGER_ROLE) {\n\t\trequire(rewardsAddr_ != address(0));\n\t\trewardsAddr_ = rewardsAddr_;\n\t\temit UpdatedRewardsAddr(rewardsAddr_);\n\t}\n\n\t/**\n\t * @notice\n\t *  Provide an accurate estimate for the total amount of assets\n\t *  (principle + return) that this Strategy is currently managing,\n\t *  denominated in terms of `want` tokens.\n\t *\n\t *  This total should be \"realizable\" e.g. the total value that could\n\t *  *actually* be obtained from this Strategy if it were to divest its\n\t *  entire position wantd on current on-chain conditions.\n\t * @dev\n\t *  Care must be taken in using this function, since it relies on external\n\t *  systems, which could be manipulated by the attacker to give an inflated\n\t *  (or reduced) value produced by this function, wantd on current on-chain\n\t *  conditions (e.g. this function is possible to influence through\n\t *  flashloan attacks, oracle manipulations, or other DeFi attack\n\t *  mechanisms).\n\t *\n\t * @return The estimated total assets in this Strategy.\n\t */\n\tfunction estimatedTotalAssets() public view virtual returns (uint256);\n\n\t/**\n\t * @notice\n\t *  Harvests the Strategy\n\t *\n\t *  This may only be called by MANAGER_ROLE.\n\t * @dev\n\t *  When `harvest()` is called, the Strategy reports to the Vault (via\n\t *  `vault.report()`), so in some cases `harvest()` must be called in order\n\t *  to take in profits, to borrow newly available funds from the Vault, or\n\t *  otherwise adjust its position. In other cases `harvest()` must be\n\t *  called to report to the Vault on the Strategy's position, especially if\n\t *  any losses have occurred.\n\t */\n\t// function harvest() external onlyOwner {\n\tfunction harvest() external onlyRole(MANAGER_ROLE) {\n\t\t// harvest\n\t\tuint256 harvested = _harvestInternal();\n\n\t\t// Take fees\n\t\t(uint256 pFee, uint256 oFee) = takeFees();\n\n\t\t// Update harvest timestamp - used for fee calculations\n\t\tlastHarvest = block.timestamp;\n\n\t\temit Harvested(harvested, pFee, oFee);\n\t}\n\n\t/**\n\t * Virtual function for triggering a harvest\n\t *\n\t * Returns\n\t * want harvested in harvest\n\t */\n\tfunction _harvestInternal() internal virtual returns (uint256 _wantHarvested);\n\n\t/**\n\t * @notice\n\t *  Returns the share price of the strategy in `want` units, multiplied\n\t *  by 1e18\n\t */\n\tfunction getPricePerShare() public view returns (uint256) {\n\t\tuint256 bal = estimatedTotalAssets();\n\t\tuint256 supply = totalSupply();\n\t\treturn (bal * SHARE_DECIMALS) / supply;\n\t}\n\n\t/**\n\t * @notice\n\t *  Takes the fees from the vault and distributes it to manager selected `rewards` address.\n\t *   - Fees are issued as minted shares.\n\t *\n\t *  Profit Fee:\n\t *  A percentage fee take on profits.\n\t *\n\t *  Operational Fee:\n\t *  The operational fee is a percentage of TVL taken incrementally each harvest\n\t *  over 365 days.\n\t */\n\tfunction takeFees() internal returns (uint256 _profitFeeMinted, uint256 _operationFeeMinted) {\n\t\tuint256 pricePerShare = getPricePerShare();\n\t\t// only take performance fee on profits\n\t\tif (pricePerShare > sharePriceTracker) {\n\t\t\tuint256 profitPerShare = pricePerShare - sharePriceTracker;\n\t\t\tuint256 profitPercent = (profitPerShare * SHARE_DECIMALS) / sharePriceTracker;\n\t\t\t_profitFeeMinted =\n\t\t\t\t(totalSupply() * profitPercent * profitFee) /\n\t\t\t\tBPS_ADJUST /\n\t\t\t\tSHARE_DECIMALS;\n\n\t\t\t// uint256 profitFeeGov = (_profitFeeMinted * profitFeeGovernance) / BPS_ADJUST;\n\t\t\t// uint256 profitFeeStrat = _profitFeeMinted - profitFeeGov;\n\t\t\t// _mint(rewards, profitFeeStrat);\n\t\t\t// _mint(governance, profitFeeGov);\n\t\t\t_mint(rewardsAddr, _profitFeeMinted);\n\t\t\tsharePriceTracker = pricePerShare;\n\t\t}\n\n\t\tif (operationalFee != 0) {\n\t\t\t// take operational fee\n\t\t\tuint256 timeSinceHarvest = block.timestamp - lastHarvest;\n\t\t\tuint256 annualAdj = uint256(365) * 24 * 60 * 60;\n\t\t\t_operationFeeMinted =\n\t\t\t\t(operationalFee * timeSinceHarvest * totalSupply()) /\n\t\t\t\tBPS_ADJUST /\n\t\t\t\tannualAdj;\n\t\t\t_mint(rewardsAddr, _operationFeeMinted);\n\t\t}\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal initializer {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal initializer {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/HedgedLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./mixins/ILending.sol\";\nimport \"./mixins/IFarmable.sol\";\nimport \"./mixins/IUniLp.sol\";\nimport \"./mixins/IBase.sol\";\nimport \"./mixins/ISwappable.sol\";\nimport \"./BaseStrategy.sol\";\nimport \"./interfaces/uniswap/IWETH.sol\";\n\n// import \"hardhat/console.sol\";\n\n// @custom: alphabetize dependencies to avoid linearization conflicts\nabstract contract HedgedLP is\n\tInitializable,\n\tBaseStrategy,\n\tIBase,\n\tIFarmable,\n\tILending,\n\tISwappable,\n\tIUniLp\n{\n\tusing SafeERC20 for IERC20;\n\n\tuint256 private _maxPriceMismatch;\n\n\tmodifier checkPrice() {\n\t\tuint256 minPrice = _quote(1e18, address(_short), address(_want));\n\t\tuint256 maxPrice = _oraclePriceOfShort(1e18);\n\t\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\n\t\trequire(\n\t\t\t((maxPrice - minPrice) * BPS_ADJUST) / maxPrice < _maxPriceMismatch,\n\t\t\t\"HedgedLP: SHORT_PRICE_MISMATCH\"\n\t\t);\n\t\t_;\n\t}\n\n\tIERC20 private _want;\n\tIERC20 private _short;\n\n\tuint256 _minLendHarvest; // don't harvest until we have this balance\n\tuint16 public rebalanceThreshold; // 4% of lp\n\n\tfunction __HedgedLP_init_unchained(address want_, address short_) internal initializer {\n\t\t_want = IERC20(want_);\n\t\t_short = IERC20(short_);\n\n\t\t_want.safeApprove(address(this), type(uint256).max);\n\n\t\t// init params\n\t\t_maxPriceMismatch = 60; // .6% based on uniswap .6% bid-ask spread\n\t\trebalanceThreshold = 400;\n\t\t_minLendHarvest = 20 * 1e6;\n\t}\n\n\t// PUBLIC METHODS\n\n\t// TODO uncomment later\n\t// function updateParams(\n\t// \tuint256 minLendHarvest_,\n\t// \tuint256 maxPriceMismatch_,\n\t// \tuint16 rebalanceThreshold_\n\t// ) public onlyRole(MANAGER_ROLE) {\n\t// \t_minLendHarvest = minLendHarvest_;\n\t// \t_maxPriceMismatch = maxPriceMismatch_;\n\t// \trebalanceThreshold = rebalanceThreshold_;\n\t// }\n\n\tfunction short() public view override returns (IERC20) {\n\t\treturn _short;\n\t}\n\n\tfunction want() public view override returns (IERC20) {\n\t\treturn _want;\n\t}\n\n\t// assets are deposited but rebalance needs to be called before assets are deployed\n\t// TODO can we make it safe to call rebalance here?\n\tfunction deposit(uint256 total) external onlyRole(WHITELIST_ROLE) checkPrice nonReentrant {\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tuint256 shares = totalSupply() == 0 ? total : (totalSupply() * total) / tvl;\n\t\t_want.transferFrom(msg.sender, address(this), total);\n\t\t_increasePosition(total);\n\t\t_mint(msg.sender, shares);\n\t\temit Deposit(msg.sender, total, shares);\n\t}\n\n\tfunction withdraw(uint256 shares) external checkPrice nonReentrant {\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tuint256 withdrawAmnt = (tvl * shares) / totalSupply();\n\t\tuint256 reserves = _want.balanceOf(address(this));\n\n\t\t// if we can not withdraw straight out of reserves\n\t\tif (reserves < withdrawAmnt) {\n\t\t\tif (shares == totalSupply()) {\n\t\t\t\t// decrease current position\n\t\t\t\t_closePosition();\n\t\t\t\twithdrawAmnt = _want.balanceOf(address(this));\n\t\t\t} else withdrawAmnt = _decreasePosition(withdrawAmnt - reserves) + reserves;\n\t\t}\n\t\tshares = (withdrawAmnt * totalSupply()) / tvl;\n\t\t_burn(msg.sender, shares);\n\t\t_want.safeTransferFrom(address(this), msg.sender, withdrawAmnt);\n\t\temit Withdrawal(msg.sender, withdrawAmnt, shares, 0);\n\t}\n\n\t// decreases position based on current desired balance\n\t// ** does not rebalance remaining portfolio\n\t// ** may return slighly less then desired amount\n\t// ** make sure to update lending positions before calling this\n\tfunction _decreasePosition(uint256 amount) internal returns (uint256) {\n\t\tuint256 removeLpAmnt = _totalToLp(amount);\n\n\t\t(uint256 wantLp, ) = _getLPBalances();\n\t\t// uint256 removeLpAmnt = (amount * wantLp) / position;\n\n\t\tuint256 shortPosition = _getBorrowBalance();\n\n\t\t// remove lp\n\t\t(uint256 wantBalance, uint256 shortBalance) = _decreaseLpTo(wantLp - removeLpAmnt);\n\t\tuint256 repayAmnt = shortBalance;\n\t\tif (shortPosition < shortBalance) {\n\t\t\t// this means we are closing the short position\n\t\t\twantBalance += _swapExactTokensForTokens(\n\t\t\t\tpair(),\n\t\t\t\tshortBalance - shortPosition,\n\t\t\t\taddress(_short),\n\t\t\t\taddress(_want)\n\t\t\t);\n\t\t\trepayAmnt = shortPosition;\n\t\t}\n\t\t_repay(repayAmnt);\n\n\t\t// this might remove less collateral than desired if we hit the limit\n\t\t// this happens when position is close to empty\n\t\tuint256 removed = _removeCollateral(amount - wantBalance);\n\t\treturn wantBalance + removed;\n\t}\n\n\t// increases the position based on current desired balance\n\t// ** does not rebalance remaining portfolio\n\tfunction _increasePosition(uint256 amount) internal {\n\t\tuint256 amntWant = _totalToLp(amount);\n\t\tuint256 amntShort = _quote(amntWant, address(_want), address(_short));\n\t\t_lend(amount - amntWant);\n\t\t_borrow(amntShort);\n\t\tuint256 liquidity = _addLiquidity(amntWant, amntShort);\n\t\t_depositIntoFarm(liquidity);\n\t}\n\n\tfunction _harvestInternal() internal override checkPrice returns (uint256 harvested) {\n\t\tharvested += _harvestLending(_minLendHarvest);\n\t\tharvested += _harvestFarm();\n\t\t_increasePosition(_want.balanceOf(address(this)));\n\t}\n\n\t// MANAGER METHODS\n\t// TODO can we make it safe to make these public?\n\n\tfunction rebalance() public onlyRole(MANAGER_ROLE) checkPrice nonReentrant {\n\t\t(uint256 wantLp, ) = _getLPBalances();\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tuint256 targetWantLP = _totalToLp(tvl);\n\n\t\t(bool needsRebalance, bool shouldIncrease) = _shouldRebalance(targetWantLP, wantLp);\n\t\trequire(needsRebalance); // maybe next time...\n\n\t\tuint256 targetCollateral = tvl - targetWantLP;\n\n\t\tif (shouldIncrease)\n\t\t\t// this means lp is low - short price went down\n\t\t\t// most of the time we should not have to remove collateral\n\t\t\t_rebalanceUp(targetWantLP, targetCollateral);\n\t\t\t// this means lp is too high - short price went up\n\t\telse _rebalanceDown(targetWantLP, targetCollateral);\n\t}\n\n\tfunction closePosition() external onlyRole(MANAGER_ROLE) {\n\t\t_closePosition();\n\t}\n\n\tfunction _closePosition() internal {\n\t\t_decreaseLpTo(0);\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 shortBalance = _short.balanceOf(address(this));\n\t\tif (shortPosition > shortBalance) {\n\t\t\tuint256 adjustShort = shortPosition - shortBalance;\n\t\t\t_swapTokensForExactTokens(pair(), adjustShort, address(_want), address(_short));\n\t\t} else if (shortBalance > shortPosition) {\n\t\t\tuint256 adjustShort = shortBalance - shortPosition;\n\t\t\t_swapExactTokensForTokens(pair(), adjustShort, address(_short), address(_want));\n\t\t}\n\t\t_repay(_short.balanceOf(address(this)));\n\n\t\tuint256 collateralBalance = _updateAndGetCollateralBalance();\n\t\t_redeem(collateralBalance);\n\t}\n\n\tfunction _shouldRebalance(uint256 targetWantLP, uint256 wantLp)\n\t\tinternal\n\t\tview\n\t\treturns (bool needsRebalance, bool shouldIncrease)\n\t{\n\t\tshouldIncrease = targetWantLP > wantLp ? true : false;\n\t\tif (wantLp == 0 || targetWantLP == 0) return (wantLp != targetWantLP, shouldIncrease);\n\n\t\tuint256 shortPosition = _getBorrowBalance();\n\n\t\t// this is the % by which our position has moved from beeing balanced\n\t\tuint256 positionOffset = shouldIncrease\n\t\t\t? ((targetWantLP - wantLp) * BPS_ADJUST) / wantLp\n\t\t\t: ((wantLp - targetWantLP) * BPS_ADJUST) / targetWantLP;\n\n\t\t// don't rebalance unless\n\t\tneedsRebalance =\n\t\t\tpositionOffset > rebalanceThreshold ||\n\t\t\t_want.balanceOf(address(this)) > 10e6 ||\n\t\t\tshortPosition == 0;\n\t}\n\n\t// TODO handle case for when lp is not 100% in farm?\n\tfunction _decreaseLpTo(uint256 targetWantLP)\n\t\tinternal\n\t\treturns (uint256 wantRemove, uint256 shortRemove)\n\t{\n\t\t(uint256 wantLp, ) = _getLPBalances();\n\t\tuint256 liquidity = _getLiquidity();\n\t\tuint256 wantLiquidity = (liquidity * targetWantLP) / wantLp;\n\t\tuint256 removeLp = liquidity - wantLiquidity;\n\t\t_withdrawFromFarm(removeLp);\n\t\treturn _removeLiquidity(removeLp);\n\t}\n\n\t// remove collateral (short price moved down so target collateral is lower)\n\t// borrow short\n\t// sell extra short\n\t// add lp\n\tfunction _rebalanceUp(uint256 targetWantLP, uint256 targetCollateral) internal {\n\t\t_adjustCollateral(targetCollateral);\n\n\t\t// borrow\n\t\tuint256 targetShortPosition = _wantToShort(targetWantLP);\n\t\tuint256 shortPosition = _getBorrowBalance();\n\n\t\t_borrow(targetShortPosition - shortPosition);\n\n\t\t// sell extra short\n\t\t(uint256 wantLp, ) = _getLPBalances();\n\n\t\tuint256 buyWant = targetWantLP - (_want.balanceOf(address(this)) + wantLp);\n\t\tif (buyWant > 0)\n\t\t\t_swapTokensForExactTokens(pair(), buyWant, address(_short), address(_want));\n\n\t\t// we will have more want tokens as a result of the tx fees\n\t\t// so we use short balance to compute final lp amounts\n\t\tuint256 amntShort = _short.balanceOf(address(this));\n\t\tuint256 amntWant = _shortToWant(amntShort);\n\t\tuint256 balWant = _want.balanceOf(address(this));\n\t\tif (balWant < amntWant) {\n\t\t\tamntWant = balWant;\n\t\t\tamntShort = _wantToShort(amntWant);\n\t\t}\n\n\t\t// add liquidity\n\t\tuint256 liquidity = _addLiquidity(amntWant, amntShort);\n\n\t\t// ape into farm\n\t\t_depositIntoFarm(liquidity);\n\n\t\t// TODO - might have leftover want tokens here\n\t}\n\n\t// remove lp\n\t// return borrow\n\t// remove collateral\n\t// buy back extra short\n\t// return extra short borrow\n\tfunction _rebalanceDown(uint256 targetWantLP, uint256 targetCollateral) internal {\n\t\tif (targetWantLP == 0) return _closePosition();\n\n\t\t// remove lp\n\t\t_decreaseLpTo(targetWantLP);\n\n\t\tuint256 shortBalance = _short.balanceOf(address(this));\n\t\t_repay(shortBalance);\n\n\t\t// if we're already over collateral threshold we may not have enought to buy back\n\t\t// full amount of short tokens\n\t\t(, uint256 removed) = _adjustCollateral(targetCollateral);\n\n\t\t// if we're withdrawing we may end up with extra $$\n\t\t// do the check here\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 adjustBorrow = shortPosition - _wantToShort(targetWantLP);\n\n\t\tif (adjustBorrow == 0) return;\n\n\t\tuint256 wantIn = UniUtils._getAmountIn(\n\t\t\tpair(),\n\t\t\tadjustBorrow,\n\t\t\taddress(_want),\n\t\t\taddress(_short)\n\t\t);\n\t\tuint256 wantBalance = _want.balanceOf(address(this));\n\t\tuint256 sellShort = wantIn < wantBalance ? wantIn : wantBalance;\n\t\t_swapExactTokensForTokens(pair(), sellShort, address(_want), address(_short));\n\n\t\tshortBalance = _short.balanceOf(address(this));\n\t\t// return borrow\n\t\t_repay(shortBalance);\n\t\tif (targetCollateral > removed) _adjustCollateral(targetCollateral);\n\t}\n\n\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\n\t\tuint256 cRatio = getCollateralRatio();\n\t\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\n\t}\n\n\t// TODO should we compute pending farm & lending rewards here?\n\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\n\t\tuint256 collateralBalance = _updateAndGetCollateralBalance();\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 shortBalance = _shortToWant(shortPosition);\n\t\t(uint256 wantLp, ) = _getLPBalances();\n\t\tuint256 wantBalance = _want.balanceOf(address(this));\n\t\ttvl = collateralBalance + wantLp * 2 - shortBalance + wantBalance;\n\t}\n\n\tfunction estimatedTotalAssets() public view override returns (uint256 assets) {\n\t\t(assets, , , , , ) = getTVL();\n\t}\n\n\t// VIEW\n\tfunction getTVL()\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint256 tvl,\n\t\t\tuint256 collateralBalance,\n\t\t\tuint256 shortPosition,\n\t\t\tuint256 shortBalance,\n\t\t\tuint256 lpBalance,\n\t\t\tuint256 wantBalance\n\t\t)\n\t{\n\t\tcollateralBalance = _getCollateralBalance();\n\t\tshortPosition = _getBorrowBalance();\n\t\t// shortBalance is the short position denominated in want tokens\n\t\tshortBalance = _shortToWant(shortPosition);\n\t\t(uint256 wantLp, ) = _getLPBalances();\n\t\tlpBalance = wantLp * 2;\n\t\twantBalance = _want.balanceOf(address(this));\n\n\t\ttvl = collateralBalance + lpBalance - shortBalance + wantBalance;\n\t}\n\n\tfunction _shortToWant(uint256 amount) internal view returns (uint256) {\n\t\tif (amount == 0) return 0;\n\t\t// lending oracle price\n\t\t// return _oraclePriceOfShort(amount);\n\n\t\t// uni price\n\t\treturn _quote(amount, address(_short), address(_want));\n\t}\n\n\tfunction _wantToShort(uint256 amount) internal view returns (uint256) {\n\t\tif (amount == 0) return 0;\n\t\t// lending oracle price\n\t\t// return _oraclePriceOfWant(amount);\n\n\t\t// uni price\n\t\treturn _quote(amount, address(_want), address(_short));\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/mixins/ILending.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./IBase.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract ILending is IBase {\n\tfunction _addLendingApprovals() internal virtual;\n\n\tfunction _getCollateralBalance() internal view virtual returns (uint256);\n\n\tfunction _getBorrowBalance() internal view virtual returns (uint256);\n\n\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\n\n\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\n\n\tfunction _getCollateralFactor() internal view virtual returns (uint256);\n\n\tfunction safeCollateralRatio() public view virtual returns (uint256);\n\n\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\n\n\tfunction _oraclePriceOfWant(uint256 amount) internal view virtual returns (uint256);\n\n\tfunction _lend(uint256 amount) internal virtual;\n\n\tfunction _redeem(uint256 amount) internal virtual;\n\n\tfunction _borrow(uint256 amount) internal virtual;\n\n\tfunction _repay(uint256 amount) internal virtual;\n\n\tfunction _harvestLending(uint256 minHarvest) internal virtual returns (uint256);\n\n\tfunction _pendingLendingHarvest() internal virtual returns (uint256);\n\n\tfunction getCollateralRatio() public view returns (uint256) {\n\t\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\n\t}\n\n\tfunction _adjustCollateral(uint256 targetCollateral)\n\t\tinternal\n\t\treturns (uint256 added, uint256 removed)\n\t{\n\t\tuint256 collateralBalance = _getCollateralBalance();\n\t\tif (collateralBalance == targetCollateral) return (0, 0);\n\t\t(added, removed) = collateralBalance > targetCollateral\n\t\t\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\n\t\t\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\n\t}\n\n\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\n\t\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\n\t\tuint256 collateral = _getCollateralBalance();\n\n\t\t// stay within 5% of the liquidation threshold\n\t\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 95;\n\t\tif (minCollateral > collateral) return 0;\n\n\t\tuint256 maxRemove = collateral - minCollateral;\n\t\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\n\t\t_redeem(removed);\n\t}\n\n\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\n\t\tuint256 wantBalance = want().balanceOf(address(this));\n\t\tadded = wantBalance > amountToAdd ? amountToAdd : wantBalance;\n\t\tif (added != 0) _lend(added);\n\t}\n}\n"
    },
    "src/mixins/IFarmable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./IBase.sol\";\n\nabstract contract IFarmable is IBase {\n\tfunction _depositIntoFarm(uint256 amount) internal virtual;\n\n\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\n\n\tfunction _harvestFarm() internal virtual returns (uint256);\n\n\tfunction _getFarmLp() internal view virtual returns (uint256);\n}\n"
    },
    "src/mixins/IUniLp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../libraries/UniUtils.sol\";\n\nimport \"./IBase.sol\";\nimport \"./ILp.sol\";\n\nabstract contract IUniLp is IBase, ILp {\n\tusing SafeERC20 for IERC20;\n\n\tfunction pair() public view virtual returns (IUniswapV2Pair);\n\n\tfunction _getLiquidity() internal view virtual returns (uint256);\n\n\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\n\t\tinternal\n\t\toverride\n\t\treturns (uint256 liquidity)\n\t{\n\t\twant().safeTransfer(address(pair()), amountToken0);\n\t\tshort().safeTransfer(address(pair()), amountToken1);\n\t\tliquidity = pair().mint(address(this));\n\t}\n\n\tfunction _removeLiquidity(uint256 liquidity) internal override returns (uint256, uint256) {\n\t\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\n\t\t(address tokenA, ) = UniUtils._sortTokens(address(want()), address(short()));\n\t\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\n\t\treturn\n\t\t\ttokenA == address(want()) ? (amountToken0, amountToken1) : (amountToken1, amountToken0);\n\t}\n\n\tfunction _quote(\n\t\tuint256 amount,\n\t\taddress token0,\n\t\taddress token1\n\t) internal view override returns (uint256 price) {\n\t\tif (amount == 0) return 0;\n\t\t(uint256 reserve0, uint256 reserve1) = UniUtils._getPairReserves(pair(), token0, token1);\n\t\tprice = UniUtils._quote(amount, reserve0, reserve1);\n\t}\n\n\t// fetches and sorts the reserves for a uniswap pair\n\tfunction _getWantShortReserves() internal view returns (uint256 reserveA, uint256 reserveB) {\n\t\t(reserveA, reserveB) = UniUtils._getPairReserves(pair(), address(want()), address(short()));\n\t}\n\n\tfunction _getLPBalances()\n\t\tinternal\n\t\tview\n\t\toverride\n\t\treturns (uint256 wantBalance, uint256 shortBalance)\n\t{\n\t\tuint256 totalLp = _getLiquidity();\n\t\t(uint256 totalWantBalance, uint256 totalShortBalance) = _getWantShortReserves();\n\t\tuint256 total = pair().totalSupply();\n\t\twantBalance = (totalWantBalance * totalLp) / total;\n\t\tshortBalance = (totalShortBalance * totalLp) / total;\n\t}\n}\n"
    },
    "src/mixins/IBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// all interfaces need to inherit from base\nabstract contract IBase {\n\tfunction short() public view virtual returns (IERC20);\n\n\tfunction want() public view virtual returns (IERC20);\n}\n"
    },
    "src/mixins/ISwappable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/uniswap/IStakingRewards.sol\";\nimport \"../libraries/UniUtils.sol\";\n\nabstract contract ISwappable {\n\tusing SafeERC20 for IERC20;\n\n\t// TODO custom swap method requires custom price match check!\n\t// TODO in the future this should use the optimal path determined externally & router\n\t// using https://docs.uniswap.org/sdk/2.0.0/reference/trade#besttradeexactin\n\tfunction _swapExactTokensForTokens(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountIn,\n\t\taddress inToken,\n\t\taddress outToken\n\t) public returns (uint256) {\n\t\tuint256 amountOut = UniUtils._getAmountOut(pair, amountIn, inToken, outToken);\n\t\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\n\t\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\n\t\t\t? (uint256(0), amountOut)\n\t\t\t: (amountOut, uint256(0));\n\n\t\tIERC20(inToken).safeTransfer(address(pair), amountIn);\n\t\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n\t\treturn amountOut;\n\t}\n\n\tfunction _swapTokensForExactTokens(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountOut,\n\t\taddress inToken,\n\t\taddress outToken\n\t) public returns (uint256) {\n\t\tuint256 amountIn = UniUtils._getAmountIn(pair, amountOut, inToken, outToken);\n\t\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\n\t\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\n\t\t\t? (uint256(0), amountOut)\n\t\t\t: (amountOut, uint256(0));\n\n\t\tIERC20(inToken).safeTransfer(address(pair), amountIn);\n\t\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n\t\treturn amountIn;\n\t}\n}\n"
    },
    "src/interfaces/uniswap/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IWETH {\n\tfunction deposit() external payable;\n\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction withdraw(uint256) external;\n}\n"
    },
    "src/interfaces/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IUniswapV2Pair {\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\tfunction name() external pure returns (string memory);\n\n\tfunction symbol() external pure returns (string memory);\n\n\tfunction decimals() external pure returns (uint8);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\tfunction approve(address spender, uint256 value) external returns (bool);\n\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 value\n\t) external returns (bool);\n\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\n\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\n\n\tfunction nonces(address owner) external view returns (uint256);\n\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external;\n\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n\tevent Swap(\n\t\taddress indexed sender,\n\t\tuint256 amount0In,\n\t\tuint256 amount1In,\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress indexed to\n\t);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n\tfunction factory() external view returns (address);\n\n\tfunction token0() external view returns (address);\n\n\tfunction token1() external view returns (address);\n\n\tfunction getReserves()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint112 reserve0,\n\t\t\tuint112 reserve1,\n\t\t\tuint32 blockTimestampLast\n\t\t);\n\n\tfunction price0CumulativeLast() external view returns (uint256);\n\n\tfunction price1CumulativeLast() external view returns (uint256);\n\n\tfunction kLast() external view returns (uint256);\n\n\tfunction mint(address to) external returns (uint256 liquidity);\n\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n\tfunction swap(\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress to,\n\t\tbytes calldata data\n\t) external;\n\n\tfunction skim(address to) external;\n\n\tfunction sync() external;\n\n\tfunction initialize(address, address) external;\n}\n"
    },
    "src/libraries/UniUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\n\nlibrary UniUtils {\n\tfunction _getPairReserves(\n\t\tIUniswapV2Pair pair,\n\t\taddress tokenA,\n\t\taddress tokenB\n\t) internal view returns (uint256 reserveA, uint256 reserveB) {\n\t\t(address token0, ) = _sortTokens(tokenA, tokenB);\n\t\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n\t\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n\t}\n\n\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\n\tfunction _quote(\n\t\tuint256 amountA,\n\t\tuint256 reserveA,\n\t\tuint256 reserveB\n\t) internal pure returns (uint256 amountB) {\n\t\trequire(amountA > 0, \"UniUtils: INSUFFICIENT_AMOUNT\");\n\t\trequire(reserveA > 0 && reserveB > 0, \"UniUtils: INSUFFICIENT_LIQUIDITY\");\n\t\tamountB = (amountA * reserveB) / reserveA;\n\t}\n\n\tfunction _sortTokens(address tokenA, address tokenB)\n\t\tinternal\n\t\tpure\n\t\treturns (address token0, address token1)\n\t{\n\t\trequire(tokenA != tokenB, \"UniUtils: IDENTICAL_ADDRESSES\");\n\t\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n\t\trequire(token0 != address(0), \"UniUtils: ZERO_ADDRESS\");\n\t}\n\n\tfunction _getAmountOut(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountIn,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal view returns (uint256 amountOut) {\n\t\trequire(amountIn > 0, \"UniUtils: INSUFFICIENT_INPUT_AMOUNT\");\n\t\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\n\t\tuint256 amountInWithFee = amountIn * 997;\n\t\tuint256 numerator = amountInWithFee * reserveOut;\n\t\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\n\t\tamountOut = numerator / denominator;\n\t}\n\n\tfunction _getAmountIn(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountOut,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal view returns (uint256 amountIn) {\n\t\trequire(amountOut > 0, \"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\n\t\tuint256 numerator = reserveIn * amountOut * 1000;\n\t\tuint256 denominator = (reserveOut - amountOut) * 997;\n\t\tamountIn = (numerator / denominator) + 1;\n\t}\n}\n"
    },
    "src/mixins/ILp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nabstract contract ILp {\n\tfunction _quote(\n\t\tuint256 amount,\n\t\taddress token0,\n\t\taddress token1\n\t) internal view virtual returns (uint256 price);\n\n\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\n\t\tinternal\n\t\tvirtual\n\t\treturns (uint256 liquidity);\n\n\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\n\n\tfunction _getLPBalances()\n\t\tinternal\n\t\tview\n\t\tvirtual\n\t\treturns (uint256 wantBalance, uint256 shortBalance);\n}\n"
    },
    "src/interfaces/uniswap/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IStakingRewards is IERC20 {\n\tfunction stakingToken() external view returns (address);\n\n\tfunction lastTimeRewardApplicable() external view returns (uint256);\n\n\tfunction rewardPerToken() external view returns (uint256);\n\n\tfunction earned(address account) external view returns (uint256);\n\n\tfunction getRewardForDuration() external view returns (uint256);\n\n\tfunction stakeWithPermit(\n\t\tuint256 amount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external;\n\n\tfunction stake(uint256 amount) external;\n\n\tfunction withdraw(uint256 amount) external;\n\n\tfunction getReward() external;\n\n\tfunction exit() external;\n}\n\n// some farms use sushi interface\ninterface IFarmMasterChef {\n\tfunction deposit(uint256 _pid, uint256 _amount) external;\n\n\tfunction withdraw(uint256 _pid, uint256 _amount) external;\n\n\tfunction userInfo(uint256 _pid, address user) external view returns (uint256);\n}\n"
    },
    "src/vUSDCavaxPB.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./HedgedLP.sol\";\nimport \"./strategy/Compound.sol\";\nimport \"./strategy/FarmableUniLp.sol\";\nimport \"./strategy/BenqiFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract vUSDCavaxPB is Initializable, HedgedLP, Compound, BenqiFarm, FarmableUniLp {\n\tuint256[200] private _gap;\n\n\tstruct Config {\n\t\taddress want;\n\t\taddress short;\n\t\taddress cTokenLend;\n\t\taddress cTokenBorrow;\n\t\taddress uniPair;\n\t\taddress uniFarm;\n\t\taddress farmLp;\n\t\taddress farmToken;\n\t\taddress router;\n\t\taddress comptroller;\n\t\taddress benqiPair;\n\t\taddress benqiToken;\n\t\tuint256 safeCollateralRatio;\n\t\tuint256 operationalFee;\n\t\tuint256 profitFee;\n\t\taddress manager;\n\t}\n\n\t// @custom:oz-upgrades-unsafe-allow constructor\n\t// constructor() initializer {}\n\n\tfunction initialize(Config memory config) public initializer {\n\t\t__ERC20_init(\"vUSDCAVAXPangolinBenqi\", \"vUSDCPB\");\n\t\t__ERC20Permit_init(\"vUSDCAVAXPangolinBenqi\");\n\t\t__AccessControl_init();\n\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n\t\t__FarmableUniLp_init_unchained(\n\t\t\tconfig.uniPair,\n\t\t\tconfig.uniFarm,\n\t\t\tconfig.farmLp,\n\t\t\tconfig.farmToken\n\t\t);\n\t\t__Compound_init_unchained(\n\t\t\tconfig.comptroller,\n\t\t\tconfig.cTokenLend,\n\t\t\tconfig.cTokenBorrow,\n\t\t\tconfig.safeCollateralRatio\n\t\t);\n\t\t__BenqiFarm_init_unchained(config.comptroller, config.benqiPair, config.benqiToken);\n\n\t\t__BaseStrategy_init_unchained(\n\t\t\tmsg.sender,\n\t\t\tconfig.operationalFee,\n\t\t\tconfig.profitFee,\n\t\t\tconfig.manager\n\t\t);\n\t\t// main strategy  should allways be intialized last\n\t\t__HedgedLP_init_unchained(config.want, config.short);\n\n\t\t// TODO should this be a separate admin func?\n\t\t// TODO revoke aprovals methods?\n\t\t_addLendingApprovals();\n\t\t_addFarmApprovals();\n\t}\n\n\treceive() external payable {}\n\n\t// required implementations: hooks\n\tfunction _postBorrowHook(uint256 amount) internal override(Compound) {\n\t\t// wrap avax\n\t\tIWETH(address(short())).deposit{ value: amount }();\n\t}\n\n\tfunction _preRepayHook(uint256 amount) internal override(Compound) {\n\t\t// wrap avax\n\t\tIWETH(address(short())).withdraw(amount);\n\t}\n}\n"
    },
    "src/strategy/Compound.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../interfaces/compound/ICTokenInterfaces.sol\";\nimport \"../interfaces/compound/IComptroller.sol\";\nimport \"../interfaces/compound/ICompPriceOracle.sol\";\nimport \"../interfaces/compound/IComptroller.sol\";\n\nimport \"../mixins/ILending.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract Compound is Initializable, ILending {\n\tusing SafeERC20 for IERC20;\n\n\tICTokenErc20 private _cTokenLend;\n\tICTokenErc20 private _cTokenBorrow;\n\n\tIComptroller private _comptroller;\n\tICompPriceOracle private _oracle;\n\n\tuint256 private _safeCollateralRatio; // percentage of max ratio\n\n\tfunction __Compound_init_unchained(\n\t\taddress comptroller_,\n\t\taddress cTokenLend_,\n\t\taddress cTokenBorrow_,\n\t\tuint256 safeCollateralRatio_\n\t) internal initializer {\n\t\t_cTokenLend = ICTokenErc20(cTokenLend_);\n\t\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\n\t\t_comptroller = IComptroller(comptroller_);\n\t\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\n\t\t_safeCollateralRatio = safeCollateralRatio_;\n\t\t_enterMarket();\n\t}\n\n\tfunction _addLendingApprovals() internal override {\n\t\t// ensure USDC approval - assume we trust USDC\n\t\twant().safeApprove(address(_cTokenLend), type(uint256).max);\n\t}\n\n\tfunction safeCollateralRatio() public view override returns (uint256) {\n\t\treturn _safeCollateralRatio;\n\t}\n\n\tfunction oracle() public view returns (ICompPriceOracle) {\n\t\treturn _oracle;\n\t}\n\n\tfunction comptroller() public view returns (IComptroller) {\n\t\treturn _comptroller;\n\t}\n\n\tfunction _enterMarket() internal {\n\t\taddress[] memory cTokens = new address[](1);\n\t\tcTokens[0] = address(_cTokenLend);\n\t\t_comptroller.enterMarkets(cTokens);\n\t}\n\n\tfunction _getCollateralFactor() internal view override returns (uint256) {\n\t\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(_comptroller))\n\t\t\t.markets(address(_cTokenLend));\n\t\treturn collateralFactorMantissa;\n\t}\n\n\tfunction _redeem(uint256 amount) internal override {\n\t\tuint256 err = _cTokenLend.redeemUnderlying(amount);\n\t\t// if (err != 0) console.log(\"Compund: error redeeming underlying\");\n\t\t// require(err == 0, \"Compund: error redeeming underlying\");\n\t}\n\n\tfunction _borrow(uint256 amount) internal override {\n\t\t_cTokenBorrow.borrow(amount);\n\n\t\t// hook in case we need to wrap any tokens\n\t\t_postBorrowHook(amount);\n\t}\n\n\tfunction _lend(uint256 amount) internal override {\n\t\t_cTokenLend.mint(amount);\n\t}\n\n\tfunction _repay(uint256 amount) internal override {\n\t\t_preRepayHook(amount);\n\t\tICTokenBase(address(_cTokenBorrow)).repayBorrow{ value: amount }();\n\t}\n\n\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\n\t\treturn _cTokenLend.balanceOfUnderlying(address(this));\n\t}\n\n\tfunction _getCollateralBalance() internal view override returns (uint256) {\n\t\tuint256 b = _cTokenLend.balanceOf(address(this));\n\t\treturn (b * _cTokenLend.exchangeRateStored()) / 1e18;\n\t}\n\n\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\n\t\treturn _cTokenBorrow.borrowBalanceCurrent(address(this));\n\t}\n\n\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\n\t\tshortBorrow = _cTokenBorrow.borrowBalanceStored(address(this));\n\t}\n\n\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\n\t\treturn\n\t\t\t(amount * _oracle.getUnderlyingPrice(address(_cTokenBorrow))) /\n\t\t\t_oracle.getUnderlyingPrice(address(_cTokenLend));\n\t}\n\n\tfunction _oraclePriceOfWant(uint256 amount) internal view override returns (uint256) {\n\t\treturn\n\t\t\t(amount * _oracle.getUnderlyingPrice(address(_cTokenLend))) /\n\t\t\t_oracle.getUnderlyingPrice(address(_cTokenBorrow));\n\t}\n\n\t// default hook\n\tfunction _postBorrowHook(uint256 borrow) internal virtual {}\n\n\tfunction _preRepayHook(uint256 borrow) internal virtual {}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/strategy/FarmableUniLp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/uniswap/IStakingRewards.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\n\nimport \"../mixins/IFarmable.sol\";\nimport \"../mixins/ISwappable.sol\";\nimport \"../mixins/IUniLp.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract FarmableUniLp is Initializable, IFarmable, ISwappable, IUniLp {\n\tusing SafeERC20 for IERC20;\n\n\tIStakingRewards private _farm;\n\tIUniswapV2Pair private _farmLp;\n\tIERC20 private _farmToken;\n\tIUniswapV2Pair private _pair;\n\n\tfunction __FarmableUniLp_init_unchained(\n\t\taddress pair_,\n\t\taddress farm_,\n\t\taddress farmLp_,\n\t\taddress farmToken_\n\t) internal initializer {\n\t\t_farm = IStakingRewards(farm_);\n\t\t_farmLp = IUniswapV2Pair(farmLp_);\n\t\t_farmToken = IERC20(farmToken_);\n\t\t_pair = IUniswapV2Pair(pair_);\n\t}\n\n\tfunction _addFarmApprovals() internal {\n\t\t// farm approvals\n\t\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\n\t}\n\n\tfunction pair() public view override returns (IUniswapV2Pair) {\n\t\treturn _pair;\n\t}\n\n\tfunction _withdrawFromFarm(uint256 amount) internal override {\n\t\t_farm.withdraw(amount);\n\t}\n\n\tfunction _depositIntoFarm(uint256 amount) internal override {\n\t\t_farm.stake(amount);\n\t}\n\n\tfunction _harvestFarm() internal override returns (uint256 harvested) {\n\t\t_farm.getReward();\n\t\tuint256 farmTokenBalance = _farmToken.balanceOf(address(this));\n\t\tif (farmTokenBalance == 0) return harvested;\n\t\tharvested = _swapExactTokensForTokens(\n\t\t\t_farmLp,\n\t\t\tfarmTokenBalance,\n\t\t\taddress(_farmToken),\n\t\t\taddress(want())\n\t\t);\n\t}\n\n\tfunction _getFarmLp() internal view override returns (uint256) {\n\t\treturn _farm.balanceOf(address(this));\n\t}\n\n\tfunction _getLiquidity() internal view override returns (uint256) {\n\t\tuint256 farmLp = _getFarmLp();\n\t\tuint256 poolLp = _pair.balanceOf(address(this));\n\t\treturn farmLp + poolLp;\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/strategy/BenqiFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/forks/IBenqiComptroller.sol\";\nimport \"../mixins/ISwappable.sol\";\nimport \"../mixins/IUniLp.sol\";\nimport \"../mixins/ILending.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../interfaces/uniswap/IWETH.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract BenqiFarm is Initializable, ILending, ISwappable, IUniLp {\n\tIBenqiComptroller _comptroller;\n\tIERC20 _qi;\n\tIUniswapV2Pair private _qiAvaxPair;\n\n\tfunction __BenqiFarm_init_unchained(\n\t\taddress comptroller_,\n\t\taddress pair_,\n\t\taddress token_\n\t) internal initializer {\n\t\t_comptroller = IBenqiComptroller(comptroller_);\n\t\t_qiAvaxPair = IUniswapV2Pair(pair_);\n\t\t_qi = IERC20(token_);\n\t}\n\n\tfunction _pendingLendingHarvest() internal view override returns (uint256 pendingWant) {\n\t\tuint256 pendingQi = _comptroller.rewardAccrued(0, address(this));\n\n\t\tuint256 pendingShort = pendingQi == 0\n\t\t\t? 0\n\t\t\t: UniUtils._getAmountOut(_qiAvaxPair, pendingQi, address(_qi), address(short()));\n\t\tpendingShort += _comptroller.rewardAccrued(1, address(this));\n\t\tpendingWant = pendingShort == 0\n\t\t\t? 0\n\t\t\t: UniUtils._getAmountOut(pair(), pendingShort, address(short()), address(want()));\n\t}\n\n\tfunction _harvestLending(uint256 minHarvest) internal override returns (uint256 harvested) {\n\t\tuint256 pending = _pendingLendingHarvest();\n\t\tif (pending < minHarvest) return harvested;\n\n\t\t// qi rewards\n\t\t_comptroller.claimReward(0, payable(address(this)));\n\t\tuint256 farmTokenBalance = _qi.balanceOf(address(this));\n\n\t\tif (farmTokenBalance > 0) {\n\t\t\t// qi - wavax pair is the most liquid\n\t\t\t_swapExactTokensForTokens(\n\t\t\t\t_qiAvaxPair,\n\t\t\t\tfarmTokenBalance,\n\t\t\t\taddress(_qi),\n\t\t\t\taddress(short())\n\t\t\t);\n\t\t}\n\n\t\t// avax rewards\n\t\t_comptroller.claimReward(1, payable(address(this)));\n\t\tuint256 avaxBalance = address(this).balance;\n\t\tif (avaxBalance == 0) return harvested;\n\n\t\tIWETH(address(short())).deposit{ value: avaxBalance }();\n\t\tharvested = _swapExactTokensForTokens(\n\t\t\tpair(),\n\t\t\tavaxBalance,\n\t\t\taddress(short()),\n\t\t\taddress(want())\n\t\t);\n\t}\n\n\tuint256[50] private _gap;\n}\n"
    },
    "src/interfaces/compound/ICTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./IComptroller.sol\";\nimport \"./InterestRateModel.sol\";\n\ninterface ICTokenStorage {\n\t/**\n\t * @dev Container for borrow balance information\n\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n\t */\n\tstruct BorrowSnapshot {\n\t\tuint256 principal;\n\t\tuint256 interestIndex;\n\t}\n}\n\ninterface ICToken is ICTokenStorage {\n\t/*** Market Events ***/\n\n\t/**\n\t * @dev Event emitted when interest is accrued\n\t */\n\tevent AccrueInterest(\n\t\tuint256 cashPrior,\n\t\tuint256 interestAccumulated,\n\t\tuint256 borrowIndex,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when tokens are minted\n\t */\n\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n\t/**\n\t * @dev Event emitted when tokens are redeemed\n\t */\n\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n\t/**\n\t * @dev Event emitted when underlying is borrowed\n\t */\n\tevent Borrow(\n\t\taddress borrower,\n\t\tuint256 borrowAmount,\n\t\tuint256 accountBorrows,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when a borrow is repaid\n\t */\n\tevent RepayBorrow(\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 accountBorrows,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when a borrow is liquidated\n\t */\n\tevent LiquidateBorrow(\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\taddress cTokenCollateral,\n\t\tuint256 seizeTokens\n\t);\n\n\t/*** Admin Events ***/\n\n\t/**\n\t * @dev Event emitted when pendingAdmin is changed\n\t */\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n\t/**\n\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\n\t */\n\tevent NewAdmin(address oldAdmin, address newAdmin);\n\n\t/**\n\t * @dev Event emitted when comptroller is changed\n\t */\n\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\n\n\t/**\n\t * @dev Event emitted when interestRateModel is changed\n\t */\n\tevent NewMarketInterestRateModel(\n\t\tInterestRateModel oldInterestRateModel,\n\t\tInterestRateModel newInterestRateModel\n\t);\n\n\t/**\n\t * @dev Event emitted when the reserve factor is changed\n\t */\n\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\n\n\t/**\n\t * @dev Event emitted when the reserves are added\n\t */\n\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\n\n\t/**\n\t * @dev Event emitted when the reserves are reduced\n\t */\n\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\n\n\t/**\n\t * @dev EIP20 Transfer event\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\n\n\t/**\n\t * @dev EIP20 Approval event\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\n\n\t/**\n\t * @dev Failure event\n\t */\n\tevent Failure(uint256 error, uint256 info, uint256 detail);\n\n\t/*** User Interface ***/\n\tfunction totalBorrows() external view returns (uint256);\n\n\tfunction totalReserves() external view returns (uint256);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction transfer(address dst, uint256 amount) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\tfunction balanceOfUnderlying(address owner) external returns (uint256);\n\n\tfunction getAccountSnapshot(address account)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\tfunction borrowRatePerBlock() external view returns (uint256);\n\n\tfunction supplyRatePerBlock() external view returns (uint256);\n\n\tfunction totalBorrowsCurrent() external returns (uint256);\n\n\tfunction borrowBalanceCurrent(address account) external returns (uint256);\n\n\tfunction borrowBalanceStored(address account) external view returns (uint256);\n\n\tfunction exchangeRateCurrent() external returns (uint256);\n\n\tfunction exchangeRateStored() external view returns (uint256);\n\n\tfunction getCash() external view returns (uint256);\n\n\tfunction accrueInterest() external returns (uint256);\n\n\tfunction seize(\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external returns (uint256);\n\n\t/*** CCap Interface ***/\n\n\t// ONLY SCREAM\n\tfunction totalCollateralTokens() external view returns (uint256);\n\n\t// ONLY SCREAM\n\tfunction isCollateralTokenInit(address account) external view returns (bool);\n\n\t// ONLY SCREAM\n\tfunction collateralCap() external view returns (uint256);\n\n\t/*** Admin Functions ***/\n\n\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\n\n\tfunction _acceptAdmin() external returns (uint256);\n\n\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\n\n\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\n\n\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\n\n\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\n\t\texternal\n\t\treturns (uint256);\n}\n\ninterface ICTokenErc20 is ICToken {\n\t/*** User Interface ***/\n\n\tfunction mint(uint256 mintAmount) external returns (uint256);\n\n\tfunction redeem(uint256 redeemTokens) external returns (uint256);\n\n\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n\tfunction borrow(uint256 borrowAmount) external returns (uint256);\n\n\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\n\n\tfunction liquidateBorrow(\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tICToken cTokenCollateral\n\t) external returns (uint256);\n\n\t/*** Admin Functions ***/\n\n\tfunction _addReserves(uint256 addAmount) external returns (uint256);\n}\n\ninterface ICTokenBase is ICToken {\n\tfunction repayBorrow() external payable;\n}\n"
    },
    "src/interfaces/compound/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IComptroller {\n\t/*** Assets You Are In ***/\n\n\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n\tfunction exitMarket(address cToken) external returns (uint256);\n\n\t/*** Policy Hooks ***/\n\n\tfunction mintAllowed(\n\t\taddress cToken,\n\t\taddress minter,\n\t\tuint256 mintAmount\n\t) external returns (uint256);\n\n\tfunction mintVerify(\n\t\taddress cToken,\n\t\taddress minter,\n\t\tuint256 mintAmount,\n\t\tuint256 mintTokens\n\t) external;\n\n\tfunction redeemAllowed(\n\t\taddress cToken,\n\t\taddress redeemer,\n\t\tuint256 redeemTokens\n\t) external returns (uint256);\n\n\tfunction redeemVerify(\n\t\taddress cToken,\n\t\taddress redeemer,\n\t\tuint256 redeemAmount,\n\t\tuint256 redeemTokens\n\t) external;\n\n\tfunction borrowAllowed(\n\t\taddress cToken,\n\t\taddress borrower,\n\t\tuint256 borrowAmount\n\t) external returns (uint256);\n\n\tfunction borrowVerify(\n\t\taddress cToken,\n\t\taddress borrower,\n\t\tuint256 borrowAmount\n\t) external;\n\n\tfunction repayBorrowAllowed(\n\t\taddress cToken,\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount\n\t) external returns (uint256);\n\n\tfunction repayBorrowVerify(\n\t\taddress cToken,\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 borrowerIndex\n\t) external;\n\n\tfunction liquidateBorrowAllowed(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount\n\t) external returns (uint256);\n\n\tfunction liquidateBorrowVerify(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 seizeTokens\n\t) external;\n\n\tfunction seizeAllowed(\n\t\taddress cTokenCollateral,\n\t\taddress cTokenBorrowed,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external returns (uint256);\n\n\tfunction seizeVerify(\n\t\taddress cTokenCollateral,\n\t\taddress cTokenBorrowed,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external;\n\n\tfunction transferAllowed(\n\t\taddress cToken,\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 transferTokens\n\t) external returns (uint256);\n\n\tfunction transferVerify(\n\t\taddress cToken,\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 transferTokens\n\t) external;\n\n\tfunction claimComp(address holder) external;\n\n\t/*** Liquidity/Liquidation Calculations ***/\n\n\tfunction liquidateCalculateSeizeTokens(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\tuint256 repayAmount\n\t) external view returns (uint256, uint256);\n}\n\ninterface UnitrollerAdminStorage {\n\t/**\n\t * @notice Administrator for this contract\n\t */\n\t// address external admin;\n\tfunction admin() external view returns (address);\n\n\t/**\n\t * @notice Pending administrator for this contract\n\t */\n\t// address external pendingAdmin;\n\tfunction pendingAdmin() external view returns (address);\n\n\t/**\n\t * @notice Active brains of Unitroller\n\t */\n\t// address external comptrollerImplementation;\n\tfunction comptrollerImplementation() external view returns (address);\n\n\t/**\n\t * @notice Pending brains of Unitroller\n\t */\n\t// address external pendingComptrollerImplementation;\n\tfunction pendingComptrollerImplementation() external view returns (address);\n}\n\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\n\t/**\n\t * @notice Oracle which gives the price of any given asset\n\t */\n\t// PriceOracle external oracle;\n\tfunction oracle() external view returns (address);\n\n\t/**\n\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n\t */\n\t// uint external closeFactorMantissa;\n\tfunction closeFactorMantissa() external view returns (uint256);\n\n\t/**\n\t * @notice Multiplier representing the discount on collateral that a liquidator receives\n\t */\n\t// uint external liquidationIncentiveMantissa;\n\tfunction liquidationIncentiveMantissa() external view returns (uint256);\n\n\t/**\n\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\n\t */\n\t// uint external maxAssets;\n\tfunction maxAssets() external view returns (uint256);\n\n\t/**\n\t * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n\t */\n\t// mapping(address => CToken[]) external accountAssets;\n\t// function accountAssets(address) external view returns (CToken[]);\n}\n\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\n\tenum Version {\n\t\tVANILLA,\n\t\tCOLLATERALCAP,\n\t\tWRAPPEDNATIVE\n\t}\n\n\tstruct Market {\n\t\tbool isListed;\n\t\tuint256 collateralFactorMantissa;\n\t\tmapping(address => bool) accountMembership;\n\t\tbool isComped;\n\t\t// Version version;\n\t}\n\n\t/**\n\t * @notice Official mapping of cTokens -> Market metadata\n\t * @dev Used e.g. to determine if a market is supported\n\t */\n\tmapping(address => Market) public markets;\n\n\t/**\n\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n\t *  Actions which allow users to remove their own assets cannot be paused.\n\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\n\t */\n\t// address external pauseGuardian;\n\t// bool external _mintGuardianPaused;\n\t// bool external _borrowGuardianPaused;\n\t// bool external transferGuardianPaused;\n\t// bool external seizeGuardianPaused;\n\t// mapping(address => bool) external mintGuardianPaused;\n\t// mapping(address => bool) external borrowGuardianPaused;\n}\n\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\n\t// struct CompMarketState {\n\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n\t//     uint224 index;\n\t//     /// @notice The block number the index was last updated at\n\t//     uint32 block;\n\t// }\n\t// /// @notice A list of all markets\n\t// CToken[] external allMarkets;\n\t// /// @notice The rate at which the flywheel distributes COMP, per block\n\t// uint external compRate;\n\t// /// @notice The portion of compRate that each market currently receives\n\t// mapping(address => uint) external compSpeeds;\n\t// /// @notice The COMP market supply state for each market\n\t// mapping(address => CompMarketState) external compSupplyState;\n\t// /// @notice The COMP market borrow state for each market\n\t// mapping(address => CompMarketState) external compBorrowState;\n\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\n\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\n\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\n\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\n\t// /// @notice The COMP accrued but not yet transferred to each user\n\t// mapping(address => uint) external compAccrued;\n}\n\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\n\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n\t// address external borrowCapGuardian;\n\tfunction borrowCapGuardian() external view virtual returns (address);\n\n\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n\t// mapping(address => uint) external borrowCaps;\n\tfunction borrowCaps(address) external view virtual returns (uint256);\n}\n\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\n\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\n\t// address external supplyCapGuardian;\n\tfunction supplyCapGuardian() external view virtual returns (address);\n\n\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\n\t// mapping(address => uint) external supplyCaps;\n\tfunction supplyCaps(address) external view virtual returns (uint256);\n}\n"
    },
    "src/interfaces/compound/ICompPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./ICTokenInterfaces.sol\";\n\ninterface ICompPriceOracle {\n\tfunction isPriceOracle() external view returns (bool);\n\n\t/**\n\t * @notice Get the underlying price of a cToken asset\n\t * @param cToken The cToken to get the underlying price of\n\t * @return The underlying asset price mantissa (scaled by 1e18).\n\t *  Zero means the price is unavailable.\n\t */\n\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\n}\n"
    },
    "src/interfaces/compound/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n/**\n * @title Compound's InterestRateModel Interface\n * @author Compound\n */\ninterface InterestRateModel {\n\t/**\n\t * @dev Calculates the current borrow interest rate per block\n\t * @param cash The total amount of cash the market has\n\t * @param borrows The total amount of borrows the market has outstanding\n\t * @param reserves The total amnount of reserves the market has\n\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n\t */\n\tfunction getBorrowRate(\n\t\tuint256 cash,\n\t\tuint256 borrows,\n\t\tuint256 reserves\n\t) external view returns (uint256);\n\n\t/**\n\t * @dev Calculates the current supply interest rate per block\n\t * @param cash The total amount of cash the market has\n\t * @param borrows The total amount of borrows the market has outstanding\n\t * @param reserves The total amnount of reserves the market has\n\t * @param reserveFactorMantissa The current reserve factor the market has\n\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\n\t */\n\tfunction getSupplyRate(\n\t\tuint256 cash,\n\t\tuint256 borrows,\n\t\tuint256 reserves,\n\t\tuint256 reserveFactorMantissa\n\t) external view returns (uint256);\n}\n"
    },
    "src/interfaces/forks/IBenqiComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nabstract contract IBenqiComptroller {\n\tfunction claimReward(uint8 rewardType, address payable holder) external virtual;\n\n\t/// @notice The QI/AVAX accrued but not yet transferred to each user\n\tmapping(uint8 => mapping(address => uint256)) public rewardAccrued;\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "src/UUPSProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract UUPSProxy is ERC1967Proxy {\n\tconstructor(\n\t\taddress _logic,\n\t\taddress, // This is completely unused by the uups proxy, required to remain compatible with hardhat deploy: https://github.com/wighawag/hardhat-deploy/issues/146\n\t\tbytes memory _data\n\t) payable ERC1967Proxy(_logic, _data) {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}