{
  "address": "0xE206074595D33bd315aA436f3eb5159668Ec8f8b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvested",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvest0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvest1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvest2",
          "type": "uint256"
        }
      ],
      "name": "LendHarvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvest",
          "type": "uint256"
        }
      ],
      "name": "LpHarvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "ManagerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvlBeforeRebalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Upgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outToken",
          "type": "address"
        }
      ],
      "name": "_swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outToken",
          "type": "address"
        }
      ],
      "name": "_swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenBorrow",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenLend",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underlyingBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingShortReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "short",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenLend",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenBorrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniPair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniFarm",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmLp",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "farmId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardPair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "safeCollateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct USDCftmSPIRITscream.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCEther",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onUpgradeFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onUpgradeLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ICompPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceThreshold",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPriceMismatch_",
          "type": "uint256"
        }
      ],
      "name": "setMaxPriceMismatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLendHarvest_",
          "type": "uint256"
        }
      ],
      "name": "setMinLendHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rebalanceThreshold_",
          "type": "uint16"
        }
      ],
      "name": "setRebalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "short",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x52a1823a41cda5fcaa8ed0ea640aed8db383b90525492805ed202681a878e1bf",
  "receipt": {
    "to": null,
    "from": "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "contractAddress": "0xE206074595D33bd315aA436f3eb5159668Ec8f8b",
    "transactionIndex": 2,
    "gasUsed": "4602852",
    "logsBloom": "0x
    "blockHash": "0x000115060000073ab19af10ce5aebfc5bdac7ce5c77e48c2a97a57e8232affde",
    "transactionHash": "0x52a1823a41cda5fcaa8ed0ea640aed8db383b90525492805ed202681a878e1bf",
    "logs": [],
    "blockNumber": 27966155,
    "cumulativeGasUsed": "4713545",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b94a9bfe6ec3898123a86570253bf917",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvest0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvest1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvest2\",\"type\":\"uint256\"}],\"name\":\"LendHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvest\",\"type\":\"uint256\"}],\"name\":\"LpHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"ManagerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvlBeforeRebalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"}],\"name\":\"_swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"}],\"name\":\"_swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenBorrow\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenLend\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingShortReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"short\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safeCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct USDCftmSPIRITscream.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgradeFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgradeLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ICompPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceMismatch_\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceMismatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLendHarvest_\",\"type\":\"uint256\"}],\"name\":\"setMinLendHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rebalanceThreshold_\",\"type\":\"uint16\"}],\"name\":\"setRebalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"short\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPricePerShare()\":{\"notice\":\"Returns the share price of the strategy in `want` units, multiplied  by 1e18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategies/impl/USDCftmSPIRITscream.sol\":\"USDCftmSPIRITscream\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/interfaces/compound/ICTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ninterface ICTokenStorage {\\n\\t/**\\n\\t * @dev Container for borrow balance information\\n\\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n\\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n\\t */\\n\\tstruct BorrowSnapshot {\\n\\t\\tuint256 principal;\\n\\t\\tuint256 interestIndex;\\n\\t}\\n}\\n\\ninterface ICToken is ICTokenStorage {\\n\\t/*** Market Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when interest is accrued\\n\\t */\\n\\tevent AccrueInterest(\\n\\t\\tuint256 cashPrior,\\n\\t\\tuint256 interestAccumulated,\\n\\t\\tuint256 borrowIndex,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are minted\\n\\t */\\n\\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are redeemed\\n\\t */\\n\\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when underlying is borrowed\\n\\t */\\n\\tevent Borrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is repaid\\n\\t */\\n\\tevent RepayBorrow(\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is liquidated\\n\\t */\\n\\tevent LiquidateBorrow(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 seizeTokens\\n\\t);\\n\\n\\t/*** Admin Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is changed\\n\\t */\\n\\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\\n\\t */\\n\\tevent NewAdmin(address oldAdmin, address newAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when comptroller is changed\\n\\t */\\n\\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\\n\\n\\t/**\\n\\t * @dev Event emitted when interestRateModel is changed\\n\\t */\\n\\tevent NewMarketInterestRateModel(\\n\\t\\tInterestRateModel oldInterestRateModel,\\n\\t\\tInterestRateModel newInterestRateModel\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserve factor is changed\\n\\t */\\n\\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are added\\n\\t */\\n\\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are reduced\\n\\t */\\n\\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev EIP20 Transfer event\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev EIP20 Approval event\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Failure event\\n\\t */\\n\\tevent Failure(uint256 error, uint256 info, uint256 detail);\\n\\n\\t/*** User Interface ***/\\n\\tfunction totalBorrows() external view returns (uint256);\\n\\n\\tfunction totalReserves() external view returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction transfer(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction balanceOfUnderlying(address owner) external returns (uint256);\\n\\n\\tfunction getAccountSnapshot(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction borrowRatePerBlock() external view returns (uint256);\\n\\n\\tfunction supplyRatePerBlock() external view returns (uint256);\\n\\n\\tfunction totalBorrowsCurrent() external returns (uint256);\\n\\n\\tfunction borrowBalanceCurrent(address account) external returns (uint256);\\n\\n\\tfunction borrowBalanceStored(address account) external view returns (uint256);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction exchangeRateStored() external view returns (uint256);\\n\\n\\tfunction getCash() external view returns (uint256);\\n\\n\\tfunction accrueInterest() external returns (uint256);\\n\\n\\tfunction seize(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\t/*** CCap Interface ***/\\n\\n\\t// ONLY SCREAM\\n\\tfunction totalCollateralTokens() external view returns (uint256);\\n\\n\\t// ONLY SCREAM\\n\\tfunction isCollateralTokenInit(address account) external view returns (bool);\\n\\n\\t// ONLY SCREAM\\n\\tfunction collateralCap() external view returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n\\tfunction _acceptAdmin() external returns (uint256);\\n\\n\\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n\\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n\\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n\\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n}\\n\\ninterface ICTokenErc20 is ICToken {\\n\\t/*** User Interface ***/\\n\\n\\tfunction mint(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeem(uint256 redeemTokens) external returns (uint256);\\n\\n\\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n\\tfunction borrow(uint256 borrowAmount) external returns (uint256);\\n\\n\\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n\\tfunction liquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tICToken cTokenCollateral\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ninterface ICTokenBase is ICToken {\\n\\tfunction repayBorrow() external payable;\\n}\\n\",\"keccak256\":\"0x287395b914b5d5db5e074b986016cec04fc17004643e0f344055993544d7c805\",\"license\":\"MIT\"},\"src/interfaces/compound/ICompPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface ICompPriceOracle {\\n\\tfunction isPriceOracle() external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Get the underlying price of a cToken asset\\n\\t * @param cToken The cToken to get the underlying price of\\n\\t * @return The underlying asset price mantissa (scaled by 1e18).\\n\\t *  Zero means the price is unavailable.\\n\\t */\\n\\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73464e501fec8d9e1320ffb675618524b646f8a4869a425117091f74926a3ab7\",\"license\":\"MIT\"},\"src/interfaces/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface IComptroller {\\n\\t/*** Assets You Are In ***/\\n\\n\\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n\\tfunction exitMarket(address cToken) external returns (uint256);\\n\\n\\t/*** Policy Hooks ***/\\n\\n\\tfunction mintAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction mintVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount,\\n\\t\\tuint256 mintTokens\\n\\t) external;\\n\\n\\tfunction redeemAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction redeemVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemAmount,\\n\\t\\tuint256 redeemTokens\\n\\t) external;\\n\\n\\tfunction borrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction borrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external;\\n\\n\\tfunction repayBorrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction repayBorrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 borrowerIndex\\n\\t) external;\\n\\n\\tfunction liquidateBorrowAllowed(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction liquidateBorrowVerify(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction seizeAllowed(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction seizeVerify(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction transferAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction transferVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external;\\n\\n\\tfunction claimComp(address holder) external;\\n\\n\\tfunction claimComp(address holder, ICTokenErc20[] memory cTokens) external;\\n\\n\\t/*** Liquidity/Liquidation Calculations ***/\\n\\n\\tfunction liquidateCalculateSeizeTokens(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 repayAmount\\n\\t) external view returns (uint256, uint256);\\n}\\n\\ninterface UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Administrator for this contract\\n\\t */\\n\\t// address external admin;\\n\\tfunction admin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending administrator for this contract\\n\\t */\\n\\t// address external pendingAdmin;\\n\\tfunction pendingAdmin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Active brains of Unitroller\\n\\t */\\n\\t// address external comptrollerImplementation;\\n\\tfunction comptrollerImplementation() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending brains of Unitroller\\n\\t */\\n\\t// address external pendingComptrollerImplementation;\\n\\tfunction pendingComptrollerImplementation() external view returns (address);\\n}\\n\\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Oracle which gives the price of any given asset\\n\\t */\\n\\t// PriceOracle external oracle;\\n\\tfunction oracle() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n\\t */\\n\\t// uint external closeFactorMantissa;\\n\\tfunction closeFactorMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Multiplier representing the discount on collateral that a liquidator receives\\n\\t */\\n\\t// uint external liquidationIncentiveMantissa;\\n\\tfunction liquidationIncentiveMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n\\t */\\n\\t// uint external maxAssets;\\n\\tfunction maxAssets() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n\\t */\\n\\t// mapping(address => CToken[]) external accountAssets;\\n\\t// function accountAssets(address) external view returns (CToken[]);\\n}\\n\\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\\n\\tenum Version {\\n\\t\\tVANILLA,\\n\\t\\tCOLLATERALCAP,\\n\\t\\tWRAPPEDNATIVE\\n\\t}\\n\\n\\tstruct Market {\\n\\t\\tbool isListed;\\n\\t\\tuint256 collateralFactorMantissa;\\n\\t\\tmapping(address => bool) accountMembership;\\n\\t\\tbool isComped;\\n\\t\\t// Version version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Official mapping of cTokens -> Market metadata\\n\\t * @dev Used e.g. to determine if a market is supported\\n\\t */\\n\\tmapping(address => Market) public markets;\\n\\n\\t/**\\n\\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n\\t *  Actions which allow users to remove their own assets cannot be paused.\\n\\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n\\t */\\n\\t// address external pauseGuardian;\\n\\t// bool external _mintGuardianPaused;\\n\\t// bool external _borrowGuardianPaused;\\n\\t// bool external transferGuardianPaused;\\n\\t// bool external seizeGuardianPaused;\\n\\t// mapping(address => bool) external mintGuardianPaused;\\n\\t// mapping(address => bool) external borrowGuardianPaused;\\n}\\n\\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\\n\\t// struct CompMarketState {\\n\\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n\\t//     uint224 index;\\n\\t//     /// @notice The block number the index was last updated at\\n\\t//     uint32 block;\\n\\t// }\\n\\t// /// @notice A list of all markets\\n\\t// CToken[] external allMarkets;\\n\\t// /// @notice The rate at which the flywheel distributes COMP, per block\\n\\t// uint external compRate;\\n\\t// /// @notice The portion of compRate that each market currently receives\\n\\t// mapping(address => uint) external compSpeeds;\\n\\t// /// @notice The COMP market supply state for each market\\n\\t// mapping(address => CompMarketState) external compSupplyState;\\n\\t// /// @notice The COMP market borrow state for each market\\n\\t// mapping(address => CompMarketState) external compBorrowState;\\n\\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\\n\\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\\n\\t// /// @notice The COMP accrued but not yet transferred to each user\\n\\t// mapping(address => uint) external compAccrued;\\n}\\n\\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\\n\\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n\\t// address external borrowCapGuardian;\\n\\tfunction borrowCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n\\t// mapping(address => uint) external borrowCaps;\\n\\tfunction borrowCaps(address) external view virtual returns (uint256);\\n}\\n\\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\\n\\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n\\t// address external supplyCapGuardian;\\n\\tfunction supplyCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n\\t// mapping(address => uint) external supplyCaps;\\n\\tfunction supplyCaps(address) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x1037e2d122c8bc2597c5fff4dc02e5664880532e0a3cc08d38eca07ca633047e\",\"license\":\"MIT\"},\"src/interfaces/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ninterface InterestRateModel {\\n\\t/**\\n\\t * @dev Calculates the current borrow interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getBorrowRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Calculates the current supply interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @param reserveFactorMantissa The current reserve factor the market has\\n\\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getSupplyRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves,\\n\\t\\tuint256 reserveFactorMantissa\\n\\t) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb859c2e88d16362f7f12101f9f24314ea698ff7f49ad9a5150507616bb962731\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IStakingRewards is IERC20 {\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction lastTimeRewardApplicable() external view returns (uint256);\\n\\n\\tfunction rewardPerToken() external view returns (uint256);\\n\\n\\tfunction earned(address account) external view returns (uint256);\\n\\n\\tfunction getRewardForDuration() external view returns (uint256);\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction getReward() external;\\n\\n\\tfunction exit() external;\\n}\\n\\n// some farms use sushi interface\\ninterface IMasterChef {\\n\\t// depositing 0 amount will withdraw the rewards (harvest)\\n\\tfunction deposit(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n\\tfunction emergencyWithdraw(uint256 _pid) external;\\n\\n\\tfunction pendingTokens(uint256 _pid, address _user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\\ninterface IMiniChefV2 {\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount;\\n\\t\\tint256 rewardDebt;\\n\\t}\\n\\n\\tstruct PoolInfo {\\n\\t\\tuint128 accSushiPerShare;\\n\\t\\tuint64 lastRewardTime;\\n\\t\\tuint64 allocPoint;\\n\\t}\\n\\n\\tfunction poolLength() external view returns (uint256);\\n\\n\\tfunction updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, int256);\\n\\n\\tfunction deposit(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction harvest(uint256 pid, address to) external;\\n\\n\\tfunction withdrawAndHarvest(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\",\"keccak256\":\"0xd532fcb3cddf4d67c6ae6a8565de8bf6e2810b2b5056602fe842f3872e0191f2\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint256 amount0In,\\n\\t\\tuint256 amount1In,\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7835569d6c0b60f7e1ddba27e62a22239cc072cf9cd930a85376c8468e03898b\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction balanceOf(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x51cd2a66681e56e4e32d556b62b411640f6423f9f31b1a7df6ea42df07dee4cb\",\"license\":\"MIT\"},\"src/libraries/UniUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniUtils {\\n\\tfunction _getPairTokens(IUniswapV2Pair pair) internal view returns (address, address) {\\n\\t\\treturn (pair.token0(), pair.token1());\\n\\t}\\n\\n\\tfunction _getPairReserves(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(address token0, ) = _sortTokens(tokenA, tokenB);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\t\\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\\n\\tfunction _quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) internal pure returns (uint256 amountB) {\\n\\t\\trequire(amountA > 0, \\\"UniUtils: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(reserveA > 0 && reserveB > 0, \\\"UniUtils: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tamountB = (amountA * reserveB) / reserveA;\\n\\t}\\n\\n\\tfunction _sortTokens(address tokenA, address tokenB)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (address token0, address token1)\\n\\t{\\n\\t\\trequire(tokenA != tokenB, \\\"UniUtils: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"UniUtils: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\tfunction _getAmountOut(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"UniUtils: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 amountInWithFee = amountIn * 997;\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\tfunction _getAmountIn(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 numerator = reserveIn * amountOut * 1000;\\n\\t\\tuint256 denominator = (reserveOut - amountOut) * 997;\\n\\t\\tamountIn = (numerator / denominator) + 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0ca70a122e865932784aefd16f6e4bc4dd61aabf2608ce154ad2c293f6237bf8\",\"license\":\"MIT\"},\"src/mixins/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// all interfaces need to inherit from base\\nabstract contract IBase {\\n\\tfunction short() public view virtual returns (IERC20);\\n\\n\\tfunction underlying() public view virtual returns (IERC20);\\n}\\n\",\"keccak256\":\"0x7582533261918a1c9f1fa0354d79516a823c24ea9cfdcd504c671c20c0ee2caa\",\"license\":\"MIT\"},\"src/mixins/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\nimport \\\"./ILending.sol\\\";\\nimport \\\"./IBase.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ICompound is IBase, ILending {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction cTokenLend() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction cTokenBorrow() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction oracle() public view virtual returns (ICompPriceOracle);\\n\\n\\tfunction comptroller() public view virtual returns (IComptroller);\\n\\n\\tfunction _enterMarket() internal {\\n\\t\\taddress[] memory cTokens = new address[](2);\\n\\t\\tcTokens[0] = address(cTokenLend());\\n\\t\\tcTokens[1] = address(cTokenBorrow());\\n\\t\\tcomptroller().enterMarkets(cTokens);\\n\\t}\\n\\n\\tfunction _getCollateralFactor() internal view override returns (uint256) {\\n\\t\\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(comptroller()))\\n\\t\\t\\t.markets(address(cTokenLend()));\\n\\t\\treturn collateralFactorMantissa;\\n\\t}\\n\\n\\tfunction _redeem(uint256 amount) internal override {\\n\\t\\tuint256 err = cTokenLend().redeemUnderlying(amount);\\n\\t\\t// if (err != 0) console.log(\\\"Compund: error redeeming underlying\\\");\\n\\t\\t// require(err == 0, \\\"Compund: error redeeming underlying\\\");\\n\\t}\\n\\n\\tfunction _borrow(uint256 amount) internal override {\\n\\t\\tcTokenBorrow().borrow(amount);\\n\\n\\t\\t// in case we need to wrap the tokens\\n\\t\\tif (_isBase(1)) IWETH(address(short())).deposit{ value: amount }();\\n\\t}\\n\\n\\tfunction _lend(uint256 amount) internal override {\\n\\t\\tcTokenLend().mint(amount);\\n\\t}\\n\\n\\tfunction _repay(uint256 amount) internal override {\\n\\t\\tif (_isBase(1)) {\\n\\t\\t\\t// need to convert to base first\\n\\t\\t\\tIWETH(address(short())).withdraw(amount);\\n\\n\\t\\t\\t// then repay in the base\\n\\t\\t\\t_repayBase(amount);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tcTokenBorrow().repayBorrow(amount);\\n\\t}\\n\\n\\tfunction _repayBase(uint256 amount) internal {\\n\\t\\tICTokenBase(address(cTokenBorrow())).repayBorrow{ value: amount }();\\n\\t}\\n\\n\\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenLend().balanceOfUnderlying(address(this));\\n\\t}\\n\\n\\tfunction _getCollateralBalance() internal view override returns (uint256) {\\n\\t\\tuint256 b = cTokenLend().balanceOf(address(this));\\n\\t\\treturn (b * cTokenLend().exchangeRateStored()) / 1e18;\\n\\t}\\n\\n\\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenBorrow().borrowBalanceCurrent(address(this));\\n\\t}\\n\\n\\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\\n\\t\\tshortBorrow = cTokenBorrow().borrowBalanceStored(address(this));\\n\\t}\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenBorrow()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenLend()));\\n\\t}\\n\\n\\tfunction _oraclePriceOfWant(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenLend()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenBorrow()));\\n\\t}\\n\\n\\t// returns true if either of the CTokens is cEth\\n\\t// index 0 = cTokenLend index 1 = cTokenBorrow\\n\\tfunction _isBase(uint8 index) internal virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0xb52c7518c551d504ef63ffb78355223597995aa4d830586b40cace14dc80545e\",\"license\":\"MIT\"},\"src/mixins/IFarmable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IBase.sol\\\";\\n\\nabstract contract IFarmable is IBase {\\n\\tevent LpHarvest(uint256 harvest);\\n\\n\\tfunction _depositIntoFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestFarm() internal virtual;\\n\\n\\tfunction _getFarmLp() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x95be2012824ed955cfebddc9d34edb9a51a1872e02d92cd0d840d9c80cf8e243\",\"license\":\"MIT\"},\"src/mixins/ILending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IBase.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ILending is IBase {\\n\\tevent LendHarvest(uint256 harvest0, uint256 harvest1, uint256 harvest2);\\n\\n\\tfunction _addLendingApprovals() internal virtual;\\n\\n\\tfunction _getCollateralBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _getBorrowBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\\n\\n\\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\\n\\n\\tfunction _getCollateralFactor() internal view virtual returns (uint256);\\n\\n\\tfunction safeCollateralRatio() public view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfWant(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _lend(uint256 amount) internal virtual;\\n\\n\\tfunction _redeem(uint256 amount) internal virtual;\\n\\n\\tfunction _borrow(uint256 amount) internal virtual;\\n\\n\\tfunction _repay(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestLending(uint256 minHarvest) internal virtual;\\n\\n\\tfunction getCollateralRatio() public view returns (uint256) {\\n\\t\\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\\n\\t}\\n\\n\\tfunction _adjustCollateral(uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\treturns (uint256 added, uint256 removed)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (collateralBalance == targetCollateral) return (0, 0);\\n\\t\\t(added, removed) = collateralBalance > targetCollateral\\n\\t\\t\\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\\n\\t\\t\\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\\n\\t}\\n\\n\\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\tuint256 collateral = _getCollateralBalance();\\n\\n\\t\\t// stay within 5% of the liquidation threshold\\n\\t\\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 95;\\n\\t\\tif (minCollateral > collateral) return 0;\\n\\n\\t\\tuint256 maxRemove = collateral - minCollateral;\\n\\t\\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\\n\\t\\t_redeem(removed);\\n\\t}\\n\\n\\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\\n\\t\\tuint256 wantBalance = underlying().balanceOf(address(this));\\n\\t\\tadded = wantBalance > amountToAdd ? amountToAdd : wantBalance;\\n\\t\\tif (added != 0) _lend(added);\\n\\t}\\n}\\n\",\"keccak256\":\"0x35d0ebe7fb22cec36e820082766a23d4a6346063d4b1d72604d2a1e54c8041c9\",\"license\":\"MIT\"},\"src/mixins/ILp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nabstract contract ILp {\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual returns (uint256 price);\\n\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 liquidity);\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256 wantBalance, uint256 shortBalance);\\n}\\n\",\"keccak256\":\"0xe5159baefbcf6e44edc3d58f0aad5b91890b20a24e42c0250013c331b32c21e0\",\"license\":\"MIT\"},\"src/mixins/ISwappable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IStakingRewards.sol\\\";\\nimport \\\"../libraries/UniUtils.sol\\\";\\n\\nabstract contract ISwappable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// TODO custom swap method requires custom price match check!\\n\\t// TODO in the future this should use the optimal path determined externally & router\\n\\t// using https://docs.uniswap.org/sdk/2.0.0/reference/trade#besttradeexactin\\n\\tfunction _swapExactTokensForTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) public returns (uint256) {\\n\\t\\tuint256 amountOut = UniUtils._getAmountOut(pair, amountIn, inToken, outToken);\\n\\t\\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\tfunction _swapTokensForExactTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) public returns (uint256) {\\n\\t\\tuint256 amountIn = UniUtils._getAmountIn(pair, amountOut, inToken, outToken);\\n\\t\\t(address token0, ) = UniUtils._sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountIn;\\n\\t}\\n}\\n\",\"keccak256\":\"0x88ff2152fae037cf832206093c664f68d52eb67a014a7f1ed7a1bce76d75ee0f\",\"license\":\"MIT\"},\"src/mixins/IUniLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/UniUtils.sol\\\";\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./ILp.sol\\\";\\n\\nabstract contract IUniLp is IBase, ILp {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction pair() public view virtual returns (IUniswapV2Pair);\\n\\n\\tfunction _getLiquidity() internal view virtual returns (uint256);\\n\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256 liquidity)\\n\\t{\\n\\t\\tunderlying().safeTransfer(address(pair()), amountToken0);\\n\\t\\tshort().safeTransfer(address(pair()), amountToken1);\\n\\t\\tliquidity = pair().mint(address(this));\\n\\t}\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal override returns (uint256, uint256) {\\n\\t\\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\\n\\t\\t(address tokenA, ) = UniUtils._sortTokens(address(underlying()), address(short()));\\n\\t\\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\\n\\t\\treturn\\n\\t\\t\\ttokenA == address(underlying())\\n\\t\\t\\t\\t? (amountToken0, amountToken1)\\n\\t\\t\\t\\t: (amountToken1, amountToken0);\\n\\t}\\n\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view override returns (uint256 price) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t(uint256 reserve0, uint256 reserve1) = UniUtils._getPairReserves(pair(), token0, token1);\\n\\t\\tprice = UniUtils._quote(amount, reserve0, reserve1);\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a uniswap pair\\n\\tfunction getUnderlyingShortReserves() public view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(reserveA, reserveB) = UniUtils._getPairReserves(\\n\\t\\t\\tpair(),\\n\\t\\t\\taddress(underlying()),\\n\\t\\t\\taddress(short())\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256 wantBalance, uint256 shortBalance)\\n\\t{\\n\\t\\tuint256 totalLp = _getLiquidity();\\n\\t\\t(uint256 totalWantBalance, uint256 totalShortBalance) = getUnderlyingShortReserves();\\n\\t\\tuint256 total = pair().totalSupply();\\n\\t\\twantBalance = (totalWantBalance * totalLp) / total;\\n\\t\\tshortBalance = (totalShortBalance * totalLp) / total;\\n\\t}\\n}\\n\",\"keccak256\":\"0x835f61ed7c398400f963c9cea236eaca1ae920d596df5ba882c39563a0d02a3e\",\"license\":\"MIT\"},\"src/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseStrategy is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tmodifier onlyVault() {\\n\\t\\trequire(msg.sender == vault(), \\\"Strat: NO_AUTH\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAuth() {\\n\\t\\trequire(msg.sender == owner() || _managers[msg.sender] == true, \\\"Strat: NO_AUTH\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tuint256 constant BPS_ADJUST = 10000;\\n\\tuint256 public lastHarvest; // block.timestamp;\\n\\taddress private _vault;\\n\\tuint256 private _shares;\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\n\\tmapping(address => bool) private _managers;\\n\\n\\tuint256 public BASE_UNIT; // 10 ** decimals\\n\\n\\tevent Harvest(uint256 harvested);\\n\\tevent Deposit(address sender, uint256 amount);\\n\\tevent Withdraw(address sender, uint256 amount);\\n\\tevent Rebalance(uint256 shortPrice, uint256 tvlBeforeRebalance, uint256 positionOffset);\\n\\tevent ManagerUpdate(address indexed account, bool isManager);\\n\\tevent Upgrade();\\n\\n\\tfunction __BaseStrategy_init(\\n\\t\\taddress vault_,\\n\\t\\tstring memory symbol_,\\n\\t\\tstring memory name_\\n\\t) internal initializer {\\n\\t\\t__ReentrancyGuard_init();\\n\\t\\t__Ownable_init();\\n\\t\\t_vault = vault_;\\n\\t\\tsymbol = symbol_;\\n\\t\\tname = name_;\\n\\t}\\n\\n\\t// VIEW\\n\\tfunction vault() public view returns (address) {\\n\\t\\treturn _vault;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _shares;\\n\\t}\\n\\n\\tfunction onUpgrade(string calldata _symbol, string calldata _name) public onlyOwner {\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\temit Upgrade();\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Returns the share price of the strategy in `want` units, multiplied\\n\\t *  by 1e18\\n\\t */\\n\\tfunction getPricePerShare() public view returns (uint256) {\\n\\t\\tuint256 bal = balanceOfUnderlying();\\n\\t\\tif (_shares == 0) return BASE_UNIT;\\n\\t\\treturn (bal * BASE_UNIT) / _shares;\\n\\t}\\n\\n\\tfunction balanceOfUnderlying(address) public view virtual returns (uint256) {\\n\\t\\treturn balanceOfUnderlying();\\n\\t}\\n\\n\\tfunction balanceOfUnderlying() public view virtual returns (uint256);\\n\\n\\t// PUBLIC METHODS\\n\\tfunction mint(uint256 amount) public onlyVault returns (uint256 errCode) {\\n\\t\\tuint256 newShares = _deposit(amount);\\n\\t\\t_shares += newShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\tfunction redeemUnderlying(uint256 amount) external onlyVault returns (uint256 errCode) {\\n\\t\\tuint256 burnShares = _withdraw(amount);\\n\\t\\t_shares -= burnShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\tfunction harvest() external onlyAuth {\\n\\t\\t// harvest\\n\\t\\tuint256 harvested = _harvestInternal();\\n\\t\\temit Harvest(harvested);\\n\\t}\\n\\n\\t// GOVERNANCE - MANAGER\\n\\tfunction isManager(address user) public view returns (bool) {\\n\\t\\treturn _managers[user];\\n\\t}\\n\\n\\tfunction setManager(address user, bool _isManager) external onlyOwner {\\n\\t\\t_managers[user] = _isManager;\\n\\t\\temit ManagerUpdate(user, _isManager);\\n\\t}\\n\\n\\tfunction setVault(address vault_) public {\\n\\t\\t_vault = vault_;\\n\\t}\\n\\n\\t/**\\n\\t * Virtual function for triggering a harvest\\n\\t *\\n\\t * Returns\\n\\t * want harvested in harvest\\n\\t */\\n\\tfunction _harvestInternal() internal virtual returns (uint256 harvested);\\n\\n\\tfunction _deposit(uint256 amount) internal virtual returns (uint256 newShares);\\n\\n\\tfunction _withdraw(uint256 amount) internal virtual returns (uint256 burnShares);\\n\\n\\tfunction isCEther() external pure returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tuint256[49] private _gap;\\n}\\n\",\"keccak256\":\"0x42ae861d766468faaa2e07e3c380553da90336ce4b208810bb4555ec81ee677b\",\"license\":\"MIT\"},\"src/strategies/HedgedLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../mixins/IBase.sol\\\";\\nimport \\\"../mixins/ILending.sol\\\";\\nimport \\\"../mixins/IFarmable.sol\\\";\\nimport \\\"../mixins/IUniLp.sol\\\";\\nimport \\\"../mixins/ISwappable.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n// @custom: alphabetize dependencies to avoid linearization conflicts\\nabstract contract HedgedLP is\\n\\tInitializable,\\n\\tIBase,\\n\\tBaseStrategy,\\n\\tIFarmable,\\n\\tILending,\\n\\tISwappable,\\n\\tIUniLp\\n{\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tuint256 private _maxPriceMismatch;\\n\\n\\tmodifier checkPrice() {\\n\\t\\tuint256 minPrice = _quote(1e18, address(_short), address(_underlying));\\n\\t\\tuint256 maxPrice = _oraclePriceOfShort(1e18);\\n\\t\\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\\n\\t\\trequire(\\n\\t\\t\\t((maxPrice - minPrice) * BPS_ADJUST) / maxPrice < _maxPriceMismatch,\\n\\t\\t\\t\\\"HedgedLP: SHORT_PRICE_MISMATCH\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tIERC20 private _underlying;\\n\\tIERC20 private _short;\\n\\n\\tuint256 _minLendHarvest; // don't harvest until we have this balance\\n\\tuint16 public rebalanceThreshold; // 4% of lp\\n\\n\\tfunction __HedgedLP_init_unchained(address underlying_, address short_) internal initializer {\\n\\t\\t_underlying = IERC20(underlying_);\\n\\t\\t_short = IERC20(short_);\\n\\n\\t\\t_underlying.safeApprove(address(this), type(uint256).max);\\n\\n\\t\\t// init params\\n\\t\\t_maxPriceMismatch = 60; // .6% based on uniswap .6% bid-ask spread\\n\\t\\trebalanceThreshold = 400;\\n\\t\\t_minLendHarvest = 4 * 1e6; // $4\\n\\t\\tBASE_UNIT = 10**decimals();\\n\\t}\\n\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn IERC20Metadata(address(_underlying)).decimals();\\n\\t}\\n\\n\\t// OWNER CONFIG\\n\\n\\tfunction setMinLendHarvest(uint256 minLendHarvest_) public onlyOwner {\\n\\t\\t_minLendHarvest = minLendHarvest_;\\n\\t}\\n\\n\\tfunction setMaxPriceMismatch(uint256 maxPriceMismatch_) public onlyOwner {\\n\\t\\t_maxPriceMismatch = maxPriceMismatch_;\\n\\t}\\n\\n\\tfunction setRebalanceThreshold(uint16 rebalanceThreshold_) public onlyOwner {\\n\\t\\trebalanceThreshold = rebalanceThreshold_;\\n\\t}\\n\\n\\t// PUBLIC METHODS\\n\\n\\tfunction short() public view override returns (IERC20) {\\n\\t\\treturn _short;\\n\\t}\\n\\n\\tfunction underlying() public view override returns (IERC20) {\\n\\t\\treturn _underlying;\\n\\t}\\n\\n\\t// assets are deposited but rebalance needs to be called before assets are deployed\\n\\t// should rebalance here\\n\\tfunction _deposit(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 newShares)\\n\\t{\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tnewShares = totalSupply() == 0 ? amount : (totalSupply() * amount) / tvl;\\n\\t\\t_underlying.transferFrom(vault(), address(this), amount);\\n\\t\\t_increasePosition(amount);\\n\\t\\temit Deposit(msg.sender, amount);\\n\\t}\\n\\n\\tfunction _withdraw(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tonlyVault\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 burnShares)\\n\\t{\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 reserves = _underlying.balanceOf(address(this));\\n\\n\\t\\t// if we can not withdraw straight out of reserves\\n\\t\\tif (reserves < amount) {\\n\\t\\t\\t// add 1% to withdraw amount for tx fees etc\\n\\t\\t\\tuint256 withdrawAmnt = (amount * 101) / 100;\\n\\n\\t\\t\\tif (withdrawAmnt >= tvl) {\\n\\t\\t\\t\\t// decrease current position\\n\\t\\t\\t\\t_closePosition();\\n\\t\\t\\t\\twithdrawAmnt = _underlying.balanceOf(address(this));\\n\\t\\t\\t} else withdrawAmnt = _decreasePosition(withdrawAmnt - reserves) + reserves;\\n\\t\\t\\t// use the minimum of the two\\n\\t\\t\\tamount = min(withdrawAmnt, amount);\\n\\t\\t}\\n\\t\\tburnShares = (amount * totalSupply()) / tvl;\\n\\t\\t_underlying.safeTransferFrom(address(this), vault(), amount);\\n\\t\\temit Withdraw(msg.sender, amount);\\n\\t}\\n\\n\\t// decreases position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\t// ** may return slighly less then desired amount\\n\\t// ** make sure to update lending positions before calling this\\n\\tfunction _decreasePosition(uint256 amount) internal returns (uint256) {\\n\\t\\tuint256 removeLpAmnt = _totalToLp(amount);\\n\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 underlyingBalance, uint256 shortBalance) = _decreaseLpTo(\\n\\t\\t\\tunderlyingLp - removeLpAmnt\\n\\t\\t);\\n\\n\\t\\tuint256 repayAmnt = shortBalance;\\n\\n\\t\\tif (shortPosition < shortBalance) {\\n\\t\\t\\t// this means we are closing the short position\\n\\t\\t\\tunderlyingBalance += _swapExactTokensForTokens(\\n\\t\\t\\t\\tpair(),\\n\\t\\t\\t\\tshortBalance - shortPosition,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_underlying)\\n\\t\\t\\t);\\n\\t\\t\\trepayAmnt = shortPosition;\\n\\t\\t}\\n\\t\\t_repay(repayAmnt);\\n\\n\\t\\t// this might remove less collateral than desired if we hit the limit\\n\\t\\t// this happens when position is close to empty\\n\\t\\tuint256 removed = _removeCollateral(amount - underlyingBalance);\\n\\t\\treturn underlyingBalance + removed;\\n\\t}\\n\\n\\t// increases the position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\tfunction _increasePosition(uint256 amount) internal {\\n\\t\\tuint256 amntUnderlying = _totalToLp(amount);\\n\\t\\tuint256 amntShort = _quote(amntUnderlying, address(_underlying), address(_short));\\n\\t\\t_lend(amount - amntUnderlying);\\n\\t\\t_borrow(amntShort);\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\tfunction _harvestInternal()\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 harvested)\\n\\t{\\n\\t\\tuint256 startTvl = _getAndUpdateTVL();\\n\\n\\t\\t_harvestLending(_minLendHarvest);\\n\\t\\t_harvestFarm();\\n\\n\\t\\t// deposit funds back into farm\\n\\t\\tuint256 underlyingBal = _underlying.balanceOf(address(this));\\n\\t\\tif (underlyingBal > 0) _lend(underlyingBal);\\n\\t\\tuint256 shortBal = _short.balanceOf(address(this));\\n\\t\\tif (shortBal > 0) _repay(shortBal);\\n\\t\\tuint256 endTvl = balanceOfUnderlying();\\n\\n\\t\\treturn endTvl > startTvl ? (endTvl - startTvl) : 0;\\n\\t}\\n\\n\\t// MANAGER + OWNER METHODS\\n\\t// TODO rebalance can be public eventually\\n\\tfunction rebalance() public onlyAuth checkPrice nonReentrant {\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 targetWantLP = _totalToLp(tvl);\\n\\n\\t\\t(bool needsRebalance, bool shouldIncrease, uint256 positionOffset) = _shouldRebalance(\\n\\t\\t\\ttargetWantLP,\\n\\t\\t\\tunderlyingLp\\n\\t\\t);\\n\\t\\trequire(needsRebalance, \\\"HedgedLP: have not reached rebalance threshold\\\"); // maybe next time...\\n\\n\\t\\tuint256 targetCollateral = tvl - targetWantLP;\\n\\n\\t\\tif (shouldIncrease)\\n\\t\\t\\t// this means lp is low - short price went down\\n\\t\\t\\t// most of the time we should not have to remove collateral\\n\\t\\t\\t_rebalanceUp(targetWantLP, targetCollateral);\\n\\t\\t\\t// this means lp is too high - short price went up\\n\\t\\telse _rebalanceDown(targetWantLP, targetCollateral);\\n\\t\\temit Rebalance(_shortToWant(1e18), positionOffset, tvl);\\n\\t}\\n\\n\\tfunction closePosition() external onlyAuth {\\n\\t\\t_closePosition();\\n\\t}\\n\\n\\tfunction _closePosition() internal {\\n\\t\\t_decreaseLpTo(0);\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\t\\tif (shortPosition > shortBalance) {\\n\\t\\t\\tuint256 adjustShort = shortPosition - shortBalance;\\n\\t\\t\\t_swapTokensForExactTokens(pair(), adjustShort, address(_underlying), address(_short));\\n\\t\\t} else if (shortBalance > shortPosition) {\\n\\t\\t\\tuint256 adjustShort = shortBalance - shortPosition;\\n\\t\\t\\t_swapExactTokensForTokens(pair(), adjustShort, address(_short), address(_underlying));\\n\\t\\t}\\n\\t\\t_repay(_short.balanceOf(address(this)));\\n\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\t_redeem(collateralBalance);\\n\\t}\\n\\n\\tfunction _shouldRebalance(uint256 targetWantLP, uint256 underlyingLp)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tbool needsRebalance,\\n\\t\\t\\tbool shouldIncrease,\\n\\t\\t\\tuint256 positionOffset\\n\\t\\t)\\n\\t{\\n\\t\\tshouldIncrease = targetWantLP > underlyingLp ? true : false;\\n\\t\\tif (underlyingLp == 0 || targetWantLP == 0)\\n\\t\\t\\treturn (underlyingLp != targetWantLP, shouldIncrease, positionOffset);\\n\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\n\\t\\t// this is the % by which our position has moved from beeing balanced\\n\\t\\tpositionOffset = shouldIncrease\\n\\t\\t\\t? ((targetWantLP - underlyingLp) * BPS_ADJUST) / underlyingLp\\n\\t\\t\\t: ((underlyingLp - targetWantLP) * BPS_ADJUST) / targetWantLP;\\n\\n\\t\\t// don't rebalance unless\\n\\t\\tneedsRebalance =\\n\\t\\t\\tpositionOffset > rebalanceThreshold ||\\n\\t\\t\\t_underlying.balanceOf(address(this)) > 10e6 ||\\n\\t\\t\\tshortPosition == 0;\\n\\t}\\n\\n\\t// TODO handle case for when lp is not 100% in farm?\\n\\tfunction _decreaseLpTo(uint256 targetWantLP)\\n\\t\\tinternal\\n\\t\\treturns (uint256 underlyingRemove, uint256 shortRemove)\\n\\t{\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 liquidity = _getLiquidity();\\n\\t\\tuint256 underlyingLiquidity = (liquidity * targetWantLP) / underlyingLp;\\n\\t\\tuint256 removeLp = liquidity - underlyingLiquidity;\\n\\t\\t_withdrawFromFarm(removeLp);\\n\\t\\treturn _removeLiquidity(removeLp);\\n\\t}\\n\\n\\t// remove collateral (short price moved down so target collateral is lower)\\n\\t// borrow short\\n\\t// sell extra short\\n\\t// add lp\\n\\tfunction _rebalanceUp(uint256 targetWantLP, uint256 targetCollateral) internal {\\n\\t\\t_adjustCollateral(targetCollateral);\\n\\n\\t\\t// borrow\\n\\t\\tuint256 targetShortPosition = _underlyingToShort(targetWantLP);\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\n\\t\\t_borrow(targetShortPosition - shortPosition);\\n\\n\\t\\t// sell extra short\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\n\\t\\tuint256 buyWant = targetWantLP - (_underlying.balanceOf(address(this)) + underlyingLp);\\n\\t\\tif (buyWant > 0)\\n\\t\\t\\t_swapTokensForExactTokens(pair(), buyWant, address(_short), address(_underlying));\\n\\n\\t\\t// we will have more underlying tokens as a result of the tx fees\\n\\t\\t// so we use short balance to compute final lp amounts\\n\\t\\tuint256 amntShort = _short.balanceOf(address(this));\\n\\t\\tuint256 amntUnderlying = _shortToWant(amntShort);\\n\\t\\tuint256 balWant = _underlying.balanceOf(address(this));\\n\\t\\tif (balWant < amntUnderlying) {\\n\\t\\t\\tamntUnderlying = balWant;\\n\\t\\t\\tamntShort = _underlyingToShort(amntUnderlying);\\n\\t\\t}\\n\\n\\t\\t// add liquidity\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\n\\t\\t// ape into farm\\n\\t\\t_depositIntoFarm(liquidity);\\n\\n\\t\\t// TODO - might have leftover underlying tokens here\\n\\t}\\n\\n\\t// remove lp\\n\\t// return borrow\\n\\t// remove collateral\\n\\t// buy back extra short\\n\\t// return extra short borrow\\n\\tfunction _rebalanceDown(uint256 targetWantLP, uint256 targetCollateral) internal {\\n\\t\\tif (targetWantLP == 0) return _closePosition();\\n\\n\\t\\t// remove lp\\n\\t\\t_decreaseLpTo(targetWantLP);\\n\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\t\\t_repay(shortBalance);\\n\\n\\t\\t// if we're already over collateral threshold we may not have enought to buy back\\n\\t\\t// full amount of short tokens\\n\\t\\t(, uint256 removed) = _adjustCollateral(targetCollateral);\\n\\n\\t\\t// if we're withdrawing we may end up with extra $$\\n\\t\\t// do the check here\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 adjustBorrow = shortPosition - _underlyingToShort(targetWantLP);\\n\\n\\t\\tif (adjustBorrow == 0) return;\\n\\n\\t\\tuint256 underlyingIn = UniUtils._getAmountIn(\\n\\t\\t\\tpair(),\\n\\t\\t\\tadjustBorrow,\\n\\t\\t\\taddress(_underlying),\\n\\t\\t\\taddress(_short)\\n\\t\\t);\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\tuint256 sellShort = underlyingIn < underlyingBalance ? underlyingIn : underlyingBalance;\\n\\t\\t_swapExactTokensForTokens(pair(), sellShort, address(_underlying), address(_short));\\n\\n\\t\\tshortBalance = _short.balanceOf(address(this));\\n\\t\\t// return borrow\\n\\t\\t_repay(shortBalance);\\n\\t\\tif (targetCollateral > removed) _adjustCollateral(targetCollateral);\\n\\t}\\n\\n\\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\\n\\t}\\n\\n\\t// TODO should we compute pending farm & lending rewards here?\\n\\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 shortBalance = _shortToWant(shortPosition);\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\ttvl = collateralBalance + underlyingLp * 2 - shortBalance + underlyingBalance;\\n\\t}\\n\\n\\tfunction balanceOfUnderlying() public view override returns (uint256 assets) {\\n\\t\\t(assets, , , , , ) = getTVL();\\n\\t}\\n\\n\\t// VIEW\\n\\tfunction getTVL()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 tvl,\\n\\t\\t\\tuint256 collateralBalance,\\n\\t\\t\\tuint256 shortPosition,\\n\\t\\t\\tuint256 shortBalance,\\n\\t\\t\\tuint256 lpBalance,\\n\\t\\t\\tuint256 underlyingBalance\\n\\t\\t)\\n\\t{\\n\\t\\tcollateralBalance = _getCollateralBalance();\\n\\t\\tshortPosition = _getBorrowBalance();\\n\\t\\t// shortBalance is the short position denominated in underlying tokens\\n\\t\\tshortBalance = _shortToWant(shortPosition);\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tlpBalance = underlyingLp * 2;\\n\\t\\tunderlyingBalance = _underlying.balanceOf(address(this));\\n\\n\\t\\ttvl = collateralBalance + lpBalance - shortBalance + underlyingBalance;\\n\\t}\\n\\n\\tfunction _shortToWant(uint256 amount) internal view returns (uint256) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t// lending oracle price\\n\\t\\t// return _oraclePriceOfShort(amount);\\n\\n\\t\\t// uni price\\n\\t\\treturn _quote(amount, address(_short), address(_underlying));\\n\\t}\\n\\n\\tfunction _underlyingToShort(uint256 amount) internal view returns (uint256) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t// lending oracle price\\n\\t\\t// return _oraclePriceOfWant(amount);\\n\\n\\t\\t// uni price\\n\\t\\treturn _quote(amount, address(_underlying), address(_short));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the smallest of two numbers.\\n\\t */\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0x92ac3d0199703ea362e9e25253a274ec9280fa0df75e2f46ca13f2589c6de9a7\",\"license\":\"MIT\"},\"src/strategies/impl/USDCftmSPIRITscream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../HedgedLP.sol\\\";\\nimport \\\"../modules/Compound.sol\\\";\\nimport \\\"../modules/MasterChefFarm.sol\\\";\\nimport \\\"../modules/CompoundFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract USDCftmSPIRITscream is Initializable, HedgedLP, Compound, CompoundFarm, MasterChefFarm {\\n\\tuint256[200] private _gap;\\n\\n\\tstruct Config {\\n\\t\\taddress underlying;\\n\\t\\taddress short;\\n\\t\\taddress cTokenLend;\\n\\t\\taddress cTokenBorrow;\\n\\t\\taddress uniPair;\\n\\t\\taddress uniFarm;\\n\\t\\taddress farmLp;\\n\\t\\taddress farmToken;\\n\\t\\tuint256 farmId;\\n\\t\\taddress router;\\n\\t\\taddress comptroller;\\n\\t\\taddress lendRewardPair;\\n\\t\\taddress lendRewardToken;\\n\\t\\tuint256 safeCollateralRatio;\\n\\t\\taddress vault;\\n\\t\\tstring symbol;\\n\\t\\tstring name;\\n\\t}\\n\\n\\t// @custom:oz-upgrades-unsafe-allow constructor\\n\\tconstructor() initializer {}\\n\\n\\tfunction initialize(Config memory config) public initializer {\\n\\t\\t__MasterChefFarm_init_unchained(\\n\\t\\t\\tconfig.uniPair,\\n\\t\\t\\tconfig.uniFarm,\\n\\t\\t\\tconfig.farmLp,\\n\\t\\t\\tconfig.farmToken,\\n\\t\\t\\tconfig.farmId\\n\\t\\t);\\n\\n\\t\\t__Compound_init_unchained(\\n\\t\\t\\tconfig.comptroller,\\n\\t\\t\\tconfig.cTokenLend,\\n\\t\\t\\tconfig.cTokenBorrow,\\n\\t\\t\\tconfig.safeCollateralRatio\\n\\t\\t);\\n\\t\\t__CompoundFarm_init_unchained(config.lendRewardPair, config.lendRewardToken);\\n\\n\\t\\t__BaseStrategy_init(config.vault, config.symbol, config.name);\\n\\n\\t\\t// main strategy  should allways be intialized last\\n\\t\\t__HedgedLP_init_unchained(config.underlying, config.short);\\n\\n\\t\\t// TODO should this be a separate admin func?\\n\\t\\t// TODO revoke aprovals methods?\\n\\t\\t_addLendingApprovals();\\n\\t\\t_addFarmApprovals();\\n\\t\\tversion = 1;\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t// our borrow token is treated as ETH by benqi\\n\\tfunction _isBase(uint8 id) internal pure override(ICompound) returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tuint256 public version;\\n}\\n\",\"keccak256\":\"0xc0606ee84df58d811088316fc23c1f707b43149291a291d4eab8eb86bfba44e7\",\"license\":\"MIT\"},\"src/strategies/modules/Compound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../../mixins/ICompound.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n// TODO supplyCaps\\n\\nabstract contract Compound is Initializable, ICompound {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tICTokenErc20 private _cTokenLend;\\n\\tICTokenErc20 private _cTokenBorrow;\\n\\n\\tIComptroller private _comptroller;\\n\\tICompPriceOracle private _oracle;\\n\\n\\tuint256 private _safeCollateralRatio; // percentage of max ratio\\n\\n\\tfunction __Compound_init_unchained(\\n\\t\\taddress comptroller_,\\n\\t\\taddress cTokenLend_,\\n\\t\\taddress cTokenBorrow_,\\n\\t\\tuint256 safeCollateralRatio_\\n\\t) internal initializer {\\n\\t\\t_cTokenLend = ICTokenErc20(cTokenLend_);\\n\\t\\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\\n\\t\\t_comptroller = IComptroller(comptroller_);\\n\\t\\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\\n\\n\\t\\t_safeCollateralRatio = safeCollateralRatio_;\\n\\t\\t_enterMarket();\\n\\t}\\n\\n\\tfunction _addLendingApprovals() internal override {\\n\\t\\t// ensure USDC approval - assume we trust USDC\\n\\t\\tunderlying().safeApprove(address(_cTokenLend), type(uint256).max);\\n\\t\\tshort().safeApprove(address(_cTokenBorrow), type(uint256).max);\\n\\t}\\n\\n\\tfunction safeCollateralRatio() public view override(ILending) returns (uint256) {\\n\\t\\treturn _safeCollateralRatio;\\n\\t}\\n\\n\\tfunction cTokenLend() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenLend;\\n\\t}\\n\\n\\tfunction cTokenBorrow() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenBorrow;\\n\\t}\\n\\n\\tfunction oracle() public view override returns (ICompPriceOracle) {\\n\\t\\treturn _oracle;\\n\\t}\\n\\n\\tfunction comptroller() public view override returns (IComptroller) {\\n\\t\\treturn _comptroller;\\n\\t}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0xd2508ca1bc301ca5a32f3890c5f9aa4a2e3f5deb7a3882bc1a7c3ed0e40b80a1\",\"license\":\"MIT\"},\"src/strategies/modules/CompoundFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../../mixins/ISwappable.sol\\\";\\nimport \\\"../../mixins/IUniLp.sol\\\";\\nimport \\\"../../mixins/ICompound.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract CompoundFarm is Initializable, ICompound, ISwappable, IUniLp {\\n\\taddress private _harvestTo;\\n\\tIERC20 _farmToken;\\n\\tIUniswapV2Pair private _farmPair;\\n\\n\\tfunction __CompoundFarm_init_unchained(address pair_, address token_) internal initializer {\\n\\t\\t_farmPair = IUniswapV2Pair(pair_);\\n\\t\\t_farmToken = IERC20(token_);\\n\\t\\taddress harvestTo_ = _farmPair.token0();\\n\\t\\t_harvestTo = harvestTo_ == token_ ? _farmPair.token1() : harvestTo_;\\n\\t}\\n\\n\\tfunction onUpgradeLend() public {\\n\\t\\taddress harvestTo_ = _farmPair.token0();\\n\\t\\t_harvestTo = harvestTo_ == address(_farmToken) ? _farmPair.token1() : harvestTo_;\\n\\t}\\n\\n\\tfunction _harvestLending(uint256) internal override {\\n\\t\\t// comp token rewards\\n\\t\\tICTokenErc20[] memory cTokens = new ICTokenErc20[](2);\\n\\t\\tcTokens[0] = cTokenLend();\\n\\t\\tcTokens[1] = cTokenBorrow();\\n\\t\\tcomptroller().claimComp(address(this), cTokens);\\n\\n\\t\\tuint256 harvest = _farmToken.balanceOf(address(this));\\n\\t\\t// console.log(\\\"comp harvest\\\", harvest);\\n\\n\\t\\tif (harvest > 0)\\n\\t\\t\\t_swapExactTokensForTokens(_farmPair, harvest, address(_farmToken), _harvestTo);\\n\\n\\t\\temit LendHarvest(harvest, 0, 0);\\n\\t}\\n\\n\\tuint256[50] private _gap;\\n}\\n\",\"keccak256\":\"0x9218c63b54b6b599a72e532cf7b02011f4dd90f720d05e2a43a7af6766c64e4b\",\"license\":\"MIT\"},\"src/strategies/modules/MasterChefFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IMasterChef } from \\\"../../interfaces/uniswap/IStakingRewards.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"../../mixins/IFarmable.sol\\\";\\nimport \\\"../../mixins/ISwappable.sol\\\";\\nimport \\\"../../mixins/IUniLp.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract MasterChefFarm is Initializable, IFarmable, ISwappable, IUniLp {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIMasterChef private _farm;\\n\\tIUniswapV2Pair private _farmPair;\\n\\tIERC20 private _farmToken;\\n\\tIUniswapV2Pair private _pair;\\n\\tuint256 private _farmId;\\n\\taddress private _harvestTo;\\n\\n\\tfunction __MasterChefFarm_init_unchained(\\n\\t\\taddress pair_,\\n\\t\\taddress farm_,\\n\\t\\taddress farmPair_,\\n\\t\\taddress farmToken_,\\n\\t\\tuint256 farmPid_\\n\\t) internal initializer {\\n\\t\\t_farm = IMasterChef(farm_);\\n\\t\\t_farmPair = IUniswapV2Pair(farmPair_);\\n\\t\\t_farmToken = IERC20(farmToken_);\\n\\t\\t_pair = IUniswapV2Pair(pair_);\\n\\t\\t_farmId = farmPid_;\\n\\t\\taddress harvestTo_ = _farmPair.token0();\\n\\t\\t_harvestTo = harvestTo_ == farmToken_ ? _farmPair.token1() : harvestTo_;\\n\\t}\\n\\n\\tfunction onUpgradeFarm() public {\\n\\t\\taddress harvestTo_ = _farmPair.token0();\\n\\t\\t_harvestTo = harvestTo_ == address(_farmToken) ? _farmPair.token1() : harvestTo_;\\n\\t}\\n\\n\\tfunction _addFarmApprovals() internal {\\n\\t\\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\\n\\t}\\n\\n\\tfunction pair() public view override returns (IUniswapV2Pair) {\\n\\t\\treturn _pair;\\n\\t}\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal override {\\n\\t\\t_farm.withdraw(_farmId, amount);\\n\\t}\\n\\n\\tfunction _depositIntoFarm(uint256 amount) internal override {\\n\\t\\t_farm.deposit(_farmId, amount);\\n\\t}\\n\\n\\tfunction _harvestFarm() internal override {\\n\\t\\t_farm.deposit(_farmId, 0);\\n\\t\\tuint256 harvested = _farmToken.balanceOf(address(this));\\n\\t\\tif (harvested == 0) return;\\n\\t\\tharvested = _swapExactTokensForTokens(\\n\\t\\t\\t_farmPair,\\n\\t\\t\\tharvested,\\n\\t\\t\\taddress(_farmToken),\\n\\t\\t\\t_harvestTo\\n\\t\\t);\\n\\t\\temit LpHarvest(harvested);\\n\\t}\\n\\n\\tfunction _getFarmLp() internal view override returns (uint256) {\\n\\t\\t(uint256 lp, ) = _farm.userInfo(_farmId, address(this));\\n\\t\\treturn lp;\\n\\t}\\n\\n\\tfunction _getLiquidity() internal view override returns (uint256) {\\n\\t\\tuint256 farmLp = _getFarmLp();\\n\\t\\tuint256 poolLp = _pair.balanceOf(address(this));\\n\\t\\treturn farmLp + poolLp;\\n\\t}\\n\\n\\tuint256[49] private _gap;\\n}\\n\",\"keccak256\":\"0xa5bd211e365190a4edc1897d21c7af66558aa0366849f3304829b07fc00fbdf0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620015891760201c565b15905090565b3b151590565b6151cb80620001126000396000f3fe6080604052600436106101fb5760003560e01c806302df632f1461020757806306fdde031461021e5780630e962f001461024957806318160ddd1461026d5780632125001e1461028257806330741fa4146102a2578063313ce567146102c257806338bea4cb146102e95780633af9e6691461030b5780633d68175c1461032b5780633dfe9f6a146103405780634641257d1461036e5780634654e3f3146103835780634880f951146103a35780634f1342d4146103b85780635439c4ad146103d857806354fd4d50146103f85780635fe3b5671461040f5780636817031b146104245780636f307dc314610461578063711326ce14610476578063715018a6146104965780637d7c2a1c146104ab5780637dc0d1d0146104c0578063852a12e3146104d55780638da5cb5b146104f557806395d89b411461050a57806397b3fcaa1461051f578063a0712d6814610561578063a52602b914610581578063a5e90eee14610596578063a8aa1b31146105b6578063ac784ddc146105cb578063c393d0e3146105eb578063cd377c5314610600578063d539fe4b14610615578063d56974cf1461062b578063de747e5a14610640578063f1a392da14610660578063f2fde38b14610676578063f3ae241514610696578063f9e40ac4146106cf578063fbfa77cf146106f2578063fd6bac701461070757600080fd5b3661020257005b600080fd5b34801561021357600080fd5b5061021c61071c565b005b34801561022a57600080fd5b50610233610846565b60405161024091906146d9565b60405180910390f35b34801561025557600080fd5b5061025f609d5481565b604051908152602001610240565b34801561027957600080fd5b5060995461025f565b34801561028e57600080fd5b5061021c61029d3660046146ec565b6108d4565b3480156102ae57600080fd5b5061025f6102bd36600461472a565b610911565b3480156102ce57600080fd5b506102d76109f0565b60405160ff9091168152602001610240565b3480156102f557600080fd5b506102fe610a63565b604051610240919061477d565b34801561031757600080fd5b5061025f610326366004614791565b610a72565b34801561033757600080fd5b5061025f610a82565b34801561034c57600080fd5b5060d35461035b9061ffff1681565b60405161ffff9091168152602001610240565b34801561037a57600080fd5b5061021c610ac2565b34801561038f57600080fd5b5061021c61039e3660046147ef565b610b61565b3480156103af57600080fd5b5061025f610bd9565b3480156103c457600080fd5b5061021c6103d3366004614938565b610bee565b3480156103e457600080fd5b5061025f6103f336600461472a565b610cf7565b34801561040457600080fd5b5061025f6102715481565b34801561041b57600080fd5b506102fe610d58565b34801561043057600080fd5b5061021c61043f366004614791565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b34801561046d57600080fd5b506102fe610d68565b34801561048257600080fd5b5061021c6104913660046146ec565b610d77565b3480156104a257600080fd5b5061021c610dab565b3480156104b757600080fd5b5061021c610de6565b3480156104cc57600080fd5b506102fe611024565b3480156104e157600080fd5b5061025f6104f03660046146ec565b611034565b34801561050157600080fd5b506102fe61109b565b34801561051657600080fd5b506102336110aa565b34801561052b57600080fd5b506105346110b7565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610240565b34801561056d57600080fd5b5061025f61057c3660046146ec565b611196565b34801561058d57600080fd5b506102fe6111ef565b3480156105a257600080fd5b5061021c6105b1366004614ad5565b6111ff565b3480156105c257600080fd5b506102fe61128d565b3480156105d757600080fd5b5060005b6040519015158152602001610240565b3480156105f757600080fd5b5061021c61129d565b34801561060c57600080fd5b5061025f6112fc565b34801561062157600080fd5b5061010a5461025f565b34801561063757600080fd5b5061021c61132d565b34801561064c57600080fd5b5061021c61065b366004614b0e565b611457565b34801561066c57600080fd5b5061025f60975481565b34801561068257600080fd5b5061021c610691366004614791565b61149e565b3480156106a257600080fd5b506105db6106b1366004614791565b6001600160a01b03166000908152609c602052604090205460ff1690565b3480156106db57600080fd5b506106e461153e565b604051610240929190614b32565b3480156106fe57600080fd5b506102fe61156a565b34801561071357600080fd5b506102fe611579565b6101735460408051630dfe168160e01b815290516000926001600160a01b031691630dfe16819160048083019260209291908290030181865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190614b40565b610174549091506001600160a01b038083169116146107aa5780610822565b61017360009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190614b40565b61017780546001600160a01b0319166001600160a01b039290921691909117905550565b609a805461085390614b5d565b80601f016020809104026020016040519081016040528092919081815260200182805461087f90614b5d565b80156108cc5780601f106108a1576101008083540402835291602001916108cc565b820191906000526020600020905b8154815290600101906020018083116108af57829003601f168201915b505050505081565b336108dd61109b565b6001600160a01b03161461090c5760405162461bcd60e51b815260040161090390614b92565b60405180910390fd5b60d255565b6000806109208686868661158f565b9050600061092e8486611650565b509050600080826001600160a01b0316876001600160a01b03161461095557836000610959565b6000845b90925090506109726001600160a01b0388168a8a611733565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f906109b19085908590309060248101614bc7565b600060405180830381600087803b1580156109cb57600080fd5b505af11580156109df573d6000803e3d6000fd5b50959b9a5050505050505050505050565b60d0546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190614bfe565b905090565b60d1546001600160a01b031690565b6000610a7c610bd9565b92915050565b600080610a8d610bd9565b905060995460001415610aa2575050609d5490565b609954609d54610ab29083614c37565b610abc9190614c56565b91505090565b610aca61109b565b6001600160a01b0316336001600160a01b03161480610afd5750336000908152609c602052604090205460ff1615156001145b610b195760405162461bcd60e51b815260040161090390614c78565b6000610b2361178e565b90507f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d5881604051610b5691815260200190565b60405180910390a150565b33610b6a61109b565b6001600160a01b031614610b905760405162461bcd60e51b815260040161090390614b92565b610b9c609a8383614574565b50610ba9609b8585614574565b506040517f6f2d71ced264587bd808aaf888d1c083d1ef532ab6eafb10b4fbd18b60eda3e690600090a150505050565b6000610be36110b7565b509395945050505050565b600054610100900460ff16610c095760005460ff1615610c0d565b303b155b610c295760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015610c4b576000805461ffff19166101011790555b610c6d82608001518360a001518460c001518560e001518661010001516119a9565b610c8b82610140015183604001518460600151856101a00151611b93565b610c9f826101600151836101800151611cd5565b610cb9826101c00151836101e00151846102000151611e95565b610ccb82600001518360200151611f5d565b610cd361203c565b610cdb612084565b6001610271558015610cf3576000805461ff00191690555b5050565b600080610d06868686866120a5565b90506000610d148486611650565b509050600080826001600160a01b0316876001600160a01b031614610d3b57876000610d3f565b6000885b90925090506109726001600160a01b0388168a86611733565b610108546001600160a01b031690565b60d0546001600160a01b031690565b33610d8061109b565b6001600160a01b031614610da65760405162461bcd60e51b815260040161090390614b92565b60cf55565b33610db461109b565b6001600160a01b031614610dda5760405162461bcd60e51b815260040161090390614b92565b610de4600061216b565b565b610dee61109b565b6001600160a01b0316336001600160a01b03161480610e215750336000908152609c602052604090205460ff1615156001145b610e3d5760405162461bcd60e51b815260040161090390614c78565b60d15460d054600091610e6691670de0b6b3a7640000916001600160a01b0390811691166121bd565b90506000610e7b670de0b6b3a76400006121fc565b9050818111610e8b578082610e8e565b81815b60cf54919350915081612710610ea48583614cee565b610eae9190614c37565b610eb89190614c56565b10610ed55760405162461bcd60e51b815260040161090390614d05565b60026065541415610ef85760405162461bcd60e51b815260040161090390614d3c565b60026065556000610f07612308565b5090506000610f146123c9565b90506000610f21826124a8565b90506000806000610f3284876124d5565b92509250925082610f9c5760405162461bcd60e51b815260206004820152602e60248201527f4865646765644c503a2068617665206e6f74207265616368656420726562616c60448201526d185b98d9481d1a1c995cda1bdb1960921b6064820152608401610903565b6000610fa88587614cee565b90508215610fbf57610fba85826125fe565b610fc9565b610fc9858261282b565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b610ffb670de0b6b3a7640000612a72565b838860405161100c93929190614d73565b60405180910390a15050600160655550505050505050565b610109546001600160a01b031690565b600061103e61156a565b6001600160a01b0316336001600160a01b03161461106e5760405162461bcd60e51b815260040161090390614c78565b600061107983612a9f565b9050806099600082825461108d9190614cee565b909155506000949350505050565b6033546001600160a01b031690565b609b805461085390614b5d565b6000806000806000806110c8612d7c565b94506110d2612e71565b93506110dd84612a72565b925060006110e9612308565b5090506110f7816002614c37565b60d0546040516370a0823160e01b81529194506001600160a01b0316906370a082319061112890309060040161477d565b602060405180830381865afa158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190614d89565b915081846111778589614da2565b6111819190614cee565b61118b9190614da2565b965050909192939495565b60006111a061156a565b6001600160a01b0316336001600160a01b0316146111d05760405162461bcd60e51b815260040161090390614c78565b60006111db83612ee7565b9050806099600082825461108d9190614da2565b610106546001600160a01b031690565b3361120861109b565b6001600160a01b03161461122e5760405162461bcd60e51b815260040161090390614b92565b6001600160a01b0382166000818152609c6020908152604091829020805460ff191685151590811790915591519182527f2458f684567d238b66deaa0126265bf3becabda0caaab7ebdda6b1794614a2d3910160405180910390a25050565b610175546001600160a01b031690565b6112a561109b565b6001600160a01b0316336001600160a01b031614806112d85750336000908152609c602052604090205460ff1615156001145b6112f45760405162461bcd60e51b815260040161090390614c78565b610de46130b8565b6000670de0b6b3a764000061131161010a5490565b611319613254565b6113239190614c37565b610a5e9190614c56565b61013f5460408051630dfe168160e01b815290516000926001600160a01b031691630dfe16819160048083019260209291908290030181865afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c9190614b40565b61013e549091506001600160a01b038083169116146113bb5780611433565b61013f60009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114339190614b40565b61013d80546001600160a01b0319166001600160a01b039290921691909117905550565b3361146061109b565b6001600160a01b0316146114865760405162461bcd60e51b815260040161090390614b92565b60d3805461ffff191661ffff92909216919091179055565b336114a761109b565b6001600160a01b0316146114cd5760405162461bcd60e51b815260040161090390614b92565b6001600160a01b0381166115325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610903565b61153b8161216b565b50565b60008061156161154c61128d565b611554610d68565b61155c610a63565b6132da565b90939092509050565b6098546001600160a01b031690565b610107546001600160a01b031690565b3b151590565b60008084116115ec5760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b6064820152608401610903565b6000806115fa8786866132da565b9092509050600061160d876103e5614c37565b9050600061161b8383614c37565b905060008261162c866103e8614c37565b6116369190614da2565b90506116428183614c56565b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031614156116b55760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f4144445245535345530000006044820152606401610903565b826001600160a01b0316846001600160a01b0316106116d55782846116d8565b83835b90925090506001600160a01b03821661172c5760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b6044820152606401610903565b9250929050565b6117898363a9059cbb60e01b8484604051602401611752929190614dba565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261339a565b505050565b60d15460d05460009182916117b991670de0b6b3a7640000916001600160a01b0391821691166121bd565b905060006117ce670de0b6b3a76400006121fc565b90508181116117de5780826117e1565b81815b60cf549193509150816127106117f78583614cee565b6118019190614c37565b61180b9190614c56565b106118285760405162461bcd60e51b815260040161090390614d05565b6002606554141561184b5760405162461bcd60e51b815260040161090390614d3c565b6002606555600061185a6123c9565b905061186760d25461346c565b61186f613652565b60d0546040516370a0823160e01b81526000916001600160a01b0316906370a08231906118a090309060040161477d565b602060405180830381865afa1580156118bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e19190614d89565b905080156118f2576118f281613794565b60d1546040516370a0823160e01b81526000916001600160a01b0316906370a082319061192390309060040161477d565b602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190614d89565b90508015611975576119758161380c565b600061197f610bd9565b905083811161198f576000611999565b6119998482614cee565b9650505050505050600160655590565b600054610100900460ff166119c45760005460ff16156119c8565b303b155b6119e45760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611a06576000805461ffff19166101011790555b61017280546001600160a01b038088166001600160a01b0319928316179092556101738054878416908316811790915561017480548785169084161790556101758054938a169390921692909217905561017683905560408051630dfe168160e01b8152905160009291630dfe16819160048083019260209291908290030181865afa158015611a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abe9190614b40565b9050836001600160a01b0316816001600160a01b031614611adf5780611b57565b61017360009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190614b40565b61017780546001600160a01b0319166001600160a01b0392909216919091179055508015611b8b576000805461ff00191690555b505050505050565b600054610100900460ff16611bae5760005460ff1615611bb2565b303b155b611bce5760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611bf0576000805461ffff19166101011790555b61010680546001600160a01b038087166001600160a01b031992831617909255610107805486841690831617905561010880549288169290911682179055604080516307dc0d1d60e41b81529051637dc0d1d0916004808201926020929091908290030181865afa158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d9190614b40565b61010980546001600160a01b0319166001600160a01b039290921691909117905561010a829055611cbc613841565b8015611cce576000805461ff00191690555b5050505050565b600054610100900460ff16611cf05760005460ff1615611cf4565b303b155b611d105760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611d32576000805461ffff19166101011790555b61013f80546001600160a01b038086166001600160a01b0319928316811790935561013e80549186169190921617905560408051630dfe168160e01b8152905160009291630dfe16819160048083019260209291908290030181865afa158015611da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc49190614b40565b9050826001600160a01b0316816001600160a01b031614611de55780611e5d565b61013f60009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190614b40565b61013d80546001600160a01b0319166001600160a01b0392909216919091179055508015611789576000805461ff0019169055505050565b600054610100900460ff16611eb05760005460ff1615611eb4565b303b155b611ed05760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611ef2576000805461ffff19166101011790555b611efa613952565b611f02613981565b609880546001600160a01b0319166001600160a01b0386161790558251611f3090609b9060208601906145f8565b508151611f4490609a9060208501906145f8565b508015611f57576000805461ff00191690555b50505050565b600054610100900460ff16611f785760005460ff1615611f7c565b303b155b611f985760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611fba576000805461ffff19166101011790555b60d080546001600160a01b038086166001600160a01b0319928316811790935560d1805491861691909216179055611ff590306000196139b8565b603c60cf5560d3805461ffff1916610190179055623d090060d2556120186109f0565b61202390600a614eb7565b609d558015611789576000805461ff0019169055505050565b61010654612068906001600160a01b0316600019612058610d68565b6001600160a01b031691906139b8565b61010754610de4906001600160a01b0316600019612058610a63565b6101725461017554610de4916001600160a01b0391821691166000196139b8565b60008084116121025760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b6064820152608401610903565b6000806121108786866132da565b909250905060006121218784614c37565b61212d906103e8614c37565b9050600061213b8884614cee565b612147906103e5614c37565b90506121538183614c56565b61215e906001614da2565b9998505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000836121cc575060006121f5565b6000806121e16121da61128d565b86866132da565b915091506121f0868383613abc565b925050505b9392505050565b6000612206611024565b6001600160a01b031663fc57d4df61221c6111ef565b6040518263ffffffff1660e01b8152600401612238919061477d565b602060405180830381865afa158015612255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122799190614d89565b612281611024565b6001600160a01b031663fc57d4df612297611579565b6040518263ffffffff1660e01b81526004016122b3919061477d565b602060405180830381865afa1580156122d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f49190614d89565b6122fe9084614c37565b610a7c9190614c56565b6000806000612315613b86565b905060008061232261153e565b91509150600061233061128d565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561236d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123919190614d89565b90508061239e8585614c37565b6123a89190614c56565b9550806123b58584614c37565b6123bf9190614c56565b9450505050509091565b6000806123d4613c1c565b905060006123e0613c70565b905060006123ed82612a72565b905060006123f9612308565b5060d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061243090309060040161477d565b602060405180830381865afa15801561244d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124719190614d89565b90508083612480846002614c37565b61248a9088614da2565b6124949190614cee565b61249e9190614da2565b9550505050505090565b6000806124b36112fc565b90506124c181612710614da2565b6124cb8285614c37565b6121f59190614c56565b60008060008385116124e85760006124eb565b60015b91508315806124f8575084155b15612508578484141592506125f7565b6000612512612e71565b90508261254057856127106125278288614cee565b6125319190614c37565b61253b9190614c56565b612562565b8461271061254e8289614cee565b6125589190614c37565b6125629190614c56565b60d35490925061ffff168211806125ea575060d0546040516370a0823160e01b815262989680916001600160a01b0316906370a08231906125a790309060040161477d565b602060405180830381865afa1580156125c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e89190614d89565b115b806125f3575080155b9350505b9250925092565b61260781613ca5565b5050600061261483613d07565b90506000612620612e71565b905061263461262f8284614cee565b613d34565b600061263e612308565b5060d0546040516370a0823160e01b815291925060009183916001600160a01b0316906370a082319061267590309060040161477d565b602060405180830381865afa158015612692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b69190614d89565b6126c09190614da2565b6126ca9087614cee565b905080156126f9576126f76126dd61128d565b60d15460d05484916001600160a01b039081169116610cf7565b505b60d1546040516370a0823160e01b81526000916001600160a01b0316906370a082319061272a90309060040161477d565b602060405180830381865afa158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190614d89565b9050600061277882612a72565b60d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906127ae90309060040161477d565b602060405180830381865afa1580156127cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ef9190614d89565b9050818110156128085780915061280582613d07565b92505b60006128148385613d69565b905061281f81613e19565b50505050505050505050565b8161283857610cf36130b8565b61284182613e7c565b505060d1546040516370a0823160e01b81526000916001600160a01b0316906370a082319061287490309060040161477d565b602060405180830381865afa158015612891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b59190614d89565b90506128c08161380c565b60006128cb83613ca5565b91505060006128d8613c70565b905060006128e586613d07565b6128ef9083614cee565b9050806128fe57505050505050565b600061292561290b61128d565b60d05460d15485916001600160a01b0390811691166120a5565b60d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061295b90309060040161477d565b602060405180830381865afa158015612978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299c9190614d89565b905060008183106129ad57816129af565b825b90506129d66129bc61128d565b60d05460d15484916001600160a01b039081169116610911565b5060d1546040516370a0823160e01b81526001600160a01b03909116906370a0823190612a0790309060040161477d565b602060405180830381865afa158015612a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a489190614d89565b9650612a538761380c565b85881115612a6757612a6488613ca5565b50505b505050505050505050565b600081612a8157506000919050565b60d15460d054610a7c9184916001600160a01b0391821691166121bd565b6000612aa961156a565b6001600160a01b0316336001600160a01b031614612ad95760405162461bcd60e51b815260040161090390614c78565b60d15460d054600091612b0291670de0b6b3a7640000916001600160a01b0390811691166121bd565b90506000612b17670de0b6b3a76400006121fc565b9050818111612b27578082612b2a565b81815b60cf54919350915081612710612b408583614cee565b612b4a9190614c37565b612b549190614c56565b10612b715760405162461bcd60e51b815260040161090390614d05565b60026065541415612b945760405162461bcd60e51b815260040161090390614d3c565b60026065556000612ba36123c9565b60d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612bd990309060040161477d565b602060405180830381865afa158015612bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1a9190614d89565b905085811015612cf45760006064612c33886065614c37565b612c3d9190614c56565b9050828110612cc657612c4e6130b8565b60d0546040516370a0823160e01b81526001600160a01b03909116906370a0823190612c7e90309060040161477d565b602060405180830381865afa158015612c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbf9190614d89565b9050612ce6565b81612cd9612cd48284614cee565b613ede565b612ce39190614da2565b90505b612cf08188613f89565b9650505b81612cfe60995490565b612d089088614c37565b612d129190614c56565b9450612d3430612d2061156a565b60d0546001600160a01b0316919089613f9f565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643387604051612d65929190614dba565b60405180910390a150506001606555509092915050565b600080612d876111ef565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612db2919061477d565b602060405180830381865afa158015612dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df39190614d89565b9050670de0b6b3a7640000612e066111ef565b6001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e679190614d89565b610ab29083614c37565b6000612e7b611579565b6001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401612ea6919061477d565b602060405180830381865afa158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190614d89565b60d15460d0546000918291612f1291670de0b6b3a7640000916001600160a01b0391821691166121bd565b90506000612f27670de0b6b3a76400006121fc565b9050818111612f37578082612f3a565b81815b60cf54919350915081612710612f508583614cee565b612f5a9190614c37565b612f649190614c56565b10612f815760405162461bcd60e51b815260040161090390614d05565b60026065541415612fa45760405162461bcd60e51b815260040161090390614d3c565b60026065556000612fb36123c9565b9050612fbe60995490565b15612fe7578085612fce60995490565b612fd89190614c37565b612fe29190614c56565b612fe9565b845b60d0549094506001600160a01b03166323b872dd61300561156a565b30886040518463ffffffff1660e01b815260040161302593929190614ec6565b6020604051808303816000875af1158015613044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130689190614eea565b5061307285613fc0565b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c33866040516130a3929190614dba565b60405180910390a15050600160655550919050565b6130c26000613e7c565b505060006130ce613c70565b60d1546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061310490309060040161477d565b602060405180830381865afa158015613121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131459190614d89565b90508082111561318957600061315b8284614cee565b905061318261316861128d565b60d05460d15484916001600160a01b039081169116610cf7565b50506131c7565b818111156131c757600061319d8383614cee565b90506131c46131aa61128d565b60d15460d05484916001600160a01b039081169116610911565b50505b60d1546040516370a0823160e01b815261323f916001600160a01b0316906370a08231906131f990309060040161477d565b602060405180830381865afa158015613216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323a9190614d89565b61380c565b6000613249613c1c565b905061178981614023565b60008061325f610d58565b6001600160a01b0316638e8f294b6132756111ef565b6040518263ffffffff1660e01b8152600401613291919061477d565b606060405180830381865afa1580156132ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d29190614f07565b509392505050565b60008060006132e98585611650565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561332d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133519190614f61565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461338857808261338b565b81815b90999098509650505050505050565b60006133ef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661409d9092919063ffffffff16565b805190915015611789578080602001905181019061340d9190614eea565b6117895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610903565b6040805160028082526060820183526000926020830190803683370190505090506134956111ef565b816000815181106134a8576134a8614fa6565b60200260200101906001600160a01b031690816001600160a01b0316815250506134d0611579565b816001815181106134e3576134e3614fa6565b60200260200101906001600160a01b031690816001600160a01b03168152505061350b610d58565b6001600160a01b0316631c3db2e030836040518363ffffffff1660e01b8152600401613538929190614fbc565b600060405180830381600087803b15801561355257600080fd5b505af1158015613566573d6000803e3d6000fd5b505061013e546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319061359e90309060040161477d565b602060405180830381865afa1580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df9190614d89565b905080156136115761013f5461013e5461013d5461360f926001600160a01b039081169285929082169116610911565b505b7fb7828c606ac1d345dde5ddccf4f72a887cac5c2627ffabb0ed53c2346497e0108160008060405161364593929190614d73565b60405180910390a1505050565b6101725461017654604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161368891600090600401614b32565b600060405180830381600087803b1580156136a257600080fd5b505af11580156136b6573d6000803e3d6000fd5b5050610174546040516370a0823160e01b8152600093506001600160a01b0390911691506370a08231906136ee90309060040161477d565b602060405180830381865afa15801561370b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372f9190614d89565b9050806137395750565b610173546101745461017754613761926001600160a01b039081169285929082169116610911565b90507f32a12275d11ded9e7f36c2998c56e68328a566370e94f5a57d62df0bb39c690581604051610b5691815260200190565b61379c6111ef565b6001600160a01b031663a0712d68826040518263ffffffff1660e01b81526004016137c991815260200190565b6020604051808303816000875af11580156137e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190614d89565b613814611579565b6001600160a01b0316630e752702826040518263ffffffff1660e01b81526004016137c991815260200190565b60408051600280825260608201835260009260208301908036833701905050905061386a6111ef565b8160008151811061387d5761387d614fa6565b60200260200101906001600160a01b031690816001600160a01b0316815250506138a5611579565b816001815181106138b8576138b8614fa6565b60200260200101906001600160a01b031690816001600160a01b0316815250506138e0610d58565b6001600160a01b031663c2998238826040518263ffffffff1660e01b815260040161390b9190615018565b6000604051808303816000875af115801561392a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf39190810190615065565b600054610100900460ff166139795760405162461bcd60e51b81526004016109039061510a565b610de46140ac565b600054610100900460ff166139a85760405162461bcd60e51b81526004016109039061510a565b6139b06140da565b610de4614101565b801580613a325750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015613a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a309190614d89565b155b613a9d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610903565b6117898363095ea7b360e01b8484604051602401611752929190614dba565b6000808411613b0d5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e540000006044820152606401610903565b600083118015613b1d5750600082115b613b695760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c49515549444954596044820152606401610903565b82613b748386614c37565b613b7e9190614c56565b949350505050565b600080613b91614131565b610175546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190613bc890309060040161477d565b602060405180830381865afa158015613be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c099190614d89565b9050613c158183614da2565b9250505090565b6000613c266111ef565b6001600160a01b0316633af9e669306040518263ffffffff1660e01b8152600401613c51919061477d565b6020604051808303816000875af1158015612ec3573d6000803e3d6000fd5b6000613c7a611579565b6001600160a01b03166317bfdfbc306040518263ffffffff1660e01b8152600401613c51919061477d565b6000806000613cb2612d7c565b905083811415613cc85750600093849350915050565b838111613ce857613ce1613cdc8286614cee565b6141b5565b6000613cfc565b6000613cfc613cf78684614cee565b614254565b909590945092505050565b600081613d1657506000919050565b60d05460d154610a7c9184916001600160a01b0391821691166121bd565b613d3c611579565b6001600160a01b031663c5ebeaec826040518263ffffffff1660e01b81526004016137c991815260200190565b6000613d8f613d7661128d565b84613d7f610d68565b6001600160a01b03169190611733565b613da3613d9a61128d565b83613d7f610a63565b613dab61128d565b6001600160a01b0316636a627842306040518263ffffffff1660e01b8152600401613dd6919061477d565b6020604051808303816000875af1158015613df5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f59190614d89565b6101725461017654604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891613e4e918590600401614b32565b600060405180830381600087803b158015613e6857600080fd5b505af1158015611cce573d6000803e3d6000fd5b6000806000613e89612308565b5090506000613e96613b86565b9050600082613ea58784614c37565b613eaf9190614c56565b90506000613ebd8284614cee565b9050613ec8816142f8565b613ed18161432d565b9550955050505050915091565b600080613eea836124a8565b90506000613ef6612308565b5090506000613f03612e71565b9050600080613f1a613f158686614cee565b613e7c565b90925090508080841015613f6557613f55613f3361128d565b613f3d8685614cee565b60d15460d0546001600160a01b039182169116610911565b613f5f9084614da2565b92508390505b613f6e8161380c565b6000613f7d613cf7858b614cee565b905061215e8185614da2565b6000818310613f9857816121f5565b5090919050565b611f57846323b872dd60e01b85858560405160240161175293929190614ec6565b6000613fcb826124a8565b60d05460d154919250600091613fef9184916001600160a01b0391821691166121bd565b9050614003613ffe8385614cee565b613794565b61400c81613d34565b60006140188383613d69565b9050611f5781613e19565b600061402d6111ef565b6001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040161405a91815260200190565b6020604051808303816000875af1158015614079573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190614d89565b6060613b7e8484600085614413565b600054610100900460ff166140d35760405162461bcd60e51b81526004016109039061510a565b6001606555565b600054610100900460ff16610de45760405162461bcd60e51b81526004016109039061510a565b600054610100900460ff166141285760405162461bcd60e51b81526004016109039061510a565b610de43361216b565b61017254610176546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b906044016040805180830381865afa15801561418a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ae9190615155565b5092915050565b6000806141c0610d68565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016141eb919061477d565b602060405180830381865afa158015614208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422c9190614d89565b905082811161423b578061423d565b825b9150811561424e5761424e82613794565b50919050565b600080614267614262612e71565b6121fc565b90506000614273612d7c565b90506000605f614281613254565b61429385670de0b6b3a7640000614c37565b61429e906064614c37565b6142a89190614c56565b6142b29190614c56565b9050818111156142c757506000949350505050565b60006142d38284614cee565b90508581116142e257806142e4565b855b94506142ef85614023565b50505050919050565b6101725461017654604051630441a3e760e41b81526001600160a01b039092169163441a3e7091613e4e918590600401614b32565b60008061434461433b61128d565b84613d7f61128d565b600061435e614351610d68565b614359610a63565b611650565b50905060008061436c61128d565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401614397919061477d565b60408051808303816000875af11580156143b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d99190615155565b915091506143e5610d68565b6001600160a01b0316836001600160a01b031614614404578082614407565b81815b94509450505050915091565b6060824710156144745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610903565b843b6144c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610903565b600080866001600160a01b031685876040516144de9190615179565b60006040518083038185875af1925050503d806000811461451b576040519150601f19603f3d011682016040523d82523d6000602084013e614520565b606091505b509150915061453082828661453b565b979650505050505050565b6060831561454a5750816121f5565b82511561455a5782518084602001fd5b8160405162461bcd60e51b815260040161090391906146d9565b82805461458090614b5d565b90600052602060002090601f0160209004810192826145a257600085556145e8565b82601f106145bb5782800160ff198235161785556145e8565b828001600101855582156145e8579182015b828111156145e85782358255916020019190600101906145cd565b506145f492915061466c565b5090565b82805461460490614b5d565b90600052602060002090601f01602090048101928261462657600085556145e8565b82601f1061463f57805160ff19168380011785556145e8565b828001600101855582156145e8579182015b828111156145e8578251825591602001919060010190614651565b5b808211156145f4576000815560010161466d565b60005b8381101561469c578181015183820152602001614684565b83811115611f575750506000910152565b600081518084526146c5816020860160208601614681565b601f01601f19169290920160200192915050565b6020815260006121f560208301846146ad565b6000602082840312156146fe57600080fd5b5035919050565b6001600160a01b038116811461153b57600080fd5b803561472581614705565b919050565b6000806000806080858703121561474057600080fd5b843561474b81614705565b935060208501359250604085013561476281614705565b9150606085013561477281614705565b939692955090935050565b6001600160a01b0391909116815260200190565b6000602082840312156147a357600080fd5b81356121f581614705565b60008083601f8401126147c057600080fd5b5081356001600160401b038111156147d757600080fd5b60208301915083602082850101111561172c57600080fd5b6000806000806040858703121561480557600080fd5b84356001600160401b038082111561481c57600080fd5b614828888389016147ae565b9096509450602087013591508082111561484157600080fd5b5061484e878288016147ae565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b60405161022081016001600160401b03811182821017156148935761489361485a565b60405290565b604051601f8201601f191681016001600160401b03811182821017156148c1576148c161485a565b604052919050565b600082601f8301126148da57600080fd5b81356001600160401b038111156148f3576148f361485a565b614906601f8201601f1916602001614899565b81815284602083860101111561491b57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561494a57600080fd5b81356001600160401b038082111561496157600080fd5b90830190610220828603121561497657600080fd5b61497e614870565b6149878361471a565b81526149956020840161471a565b60208201526149a66040840161471a565b60408201526149b76060840161471a565b60608201526149c86080840161471a565b60808201526149d960a0840161471a565b60a08201526149ea60c0840161471a565b60c08201526149fb60e0840161471a565b60e08201526101008381013590820152610120614a1981850161471a565b90820152610140614a2b84820161471a565b90820152610160614a3d84820161471a565b90820152610180614a4f84820161471a565b908201526101a083810135908201526101c0614a6c81850161471a565b908201526101e08381013583811115614a8457600080fd5b614a90888287016148c9565b8284015250506102008084013583811115614aaa57600080fd5b614ab6888287016148c9565b918301919091525095945050505050565b801515811461153b57600080fd5b60008060408385031215614ae857600080fd5b8235614af381614705565b91506020830135614b0381614ac7565b809150509250929050565b600060208284031215614b2057600080fd5b813561ffff811681146121f557600080fd5b918252602082015260400190565b600060208284031215614b5257600080fd5b81516121f581614705565b600181811c90821680614b7157607f821691505b6020821081141561424e57634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b84815283602082015260018060a01b0383166040820152608060608201526000614bf460808301846146ad565b9695505050505050565b600060208284031215614c1057600080fd5b815160ff811681146121f557600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614c5157614c51614c21565b500290565b600082614c7357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600e908201526d0a6e8e4c2e874409c9ebe82aaa8960931b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015614d0057614d00614c21565b500390565b6020808252601e908201527f4865646765644c503a2053484f52545f50524943455f4d49534d415443480000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b9283526020830191909152604082015260600190565b600060208284031215614d9b57600080fd5b5051919050565b60008219821115614db557614db5614c21565b500190565b6001600160a01b03929092168252602082015260400190565b600181815b80851115614e0e578160001904821115614df457614df4614c21565b80851615614e0157918102915b93841c9390800290614dd8565b509250929050565b600082614e2557506001610a7c565b81614e3257506000610a7c565b8160018114614e485760028114614e5257614e6e565b6001915050610a7c565b60ff841115614e6357614e63614c21565b50506001821b610a7c565b5060208310610133831016604e8410600b8410161715614e91575081810a610a7c565b614e9b8383614dd3565b8060001904821115614eaf57614eaf614c21565b029392505050565b60006121f560ff841683614e16565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215614efc57600080fd5b81516121f581614ac7565b600080600060608486031215614f1c57600080fd5b8351614f2781614ac7565b602085015160408601519194509250614f3f81614ac7565b809150509250925092565b80516001600160701b038116811461472557600080fd5b600080600060608486031215614f7657600080fd5b614f7f84614f4a565b9250614f8d60208501614f4a565b9150604084015163ffffffff81168114614f3f57600080fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561500a578551851683529483019491830191600101614fec565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156150595783516001600160a01b031683529284019291840191600101615034565b50909695505050505050565b6000602080838503121561507857600080fd5b82516001600160401b038082111561508f57600080fd5b818501915085601f8301126150a357600080fd5b8151818111156150b5576150b561485a565b8060051b91506150c6848301614899565b81815291830184019184810190888411156150e057600080fd5b938501935b838510156150fe578451825293850193908501906150e5565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000806040838503121561516857600080fd5b505080516020909101519092909150565b6000825161518b818460208701614681565b919091019291505056fea2646970667358221220f6397d1dc85cce70b828edc72b113fc6e8b2782f674db5792da86f49b213b0f764736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101fb5760003560e01c806302df632f1461020757806306fdde031461021e5780630e962f001461024957806318160ddd1461026d5780632125001e1461028257806330741fa4146102a2578063313ce567146102c257806338bea4cb146102e95780633af9e6691461030b5780633d68175c1461032b5780633dfe9f6a146103405780634641257d1461036e5780634654e3f3146103835780634880f951146103a35780634f1342d4146103b85780635439c4ad146103d857806354fd4d50146103f85780635fe3b5671461040f5780636817031b146104245780636f307dc314610461578063711326ce14610476578063715018a6146104965780637d7c2a1c146104ab5780637dc0d1d0146104c0578063852a12e3146104d55780638da5cb5b146104f557806395d89b411461050a57806397b3fcaa1461051f578063a0712d6814610561578063a52602b914610581578063a5e90eee14610596578063a8aa1b31146105b6578063ac784ddc146105cb578063c393d0e3146105eb578063cd377c5314610600578063d539fe4b14610615578063d56974cf1461062b578063de747e5a14610640578063f1a392da14610660578063f2fde38b14610676578063f3ae241514610696578063f9e40ac4146106cf578063fbfa77cf146106f2578063fd6bac701461070757600080fd5b3661020257005b600080fd5b34801561021357600080fd5b5061021c61071c565b005b34801561022a57600080fd5b50610233610846565b60405161024091906146d9565b60405180910390f35b34801561025557600080fd5b5061025f609d5481565b604051908152602001610240565b34801561027957600080fd5b5060995461025f565b34801561028e57600080fd5b5061021c61029d3660046146ec565b6108d4565b3480156102ae57600080fd5b5061025f6102bd36600461472a565b610911565b3480156102ce57600080fd5b506102d76109f0565b60405160ff9091168152602001610240565b3480156102f557600080fd5b506102fe610a63565b604051610240919061477d565b34801561031757600080fd5b5061025f610326366004614791565b610a72565b34801561033757600080fd5b5061025f610a82565b34801561034c57600080fd5b5060d35461035b9061ffff1681565b60405161ffff9091168152602001610240565b34801561037a57600080fd5b5061021c610ac2565b34801561038f57600080fd5b5061021c61039e3660046147ef565b610b61565b3480156103af57600080fd5b5061025f610bd9565b3480156103c457600080fd5b5061021c6103d3366004614938565b610bee565b3480156103e457600080fd5b5061025f6103f336600461472a565b610cf7565b34801561040457600080fd5b5061025f6102715481565b34801561041b57600080fd5b506102fe610d58565b34801561043057600080fd5b5061021c61043f366004614791565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b34801561046d57600080fd5b506102fe610d68565b34801561048257600080fd5b5061021c6104913660046146ec565b610d77565b3480156104a257600080fd5b5061021c610dab565b3480156104b757600080fd5b5061021c610de6565b3480156104cc57600080fd5b506102fe611024565b3480156104e157600080fd5b5061025f6104f03660046146ec565b611034565b34801561050157600080fd5b506102fe61109b565b34801561051657600080fd5b506102336110aa565b34801561052b57600080fd5b506105346110b7565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610240565b34801561056d57600080fd5b5061025f61057c3660046146ec565b611196565b34801561058d57600080fd5b506102fe6111ef565b3480156105a257600080fd5b5061021c6105b1366004614ad5565b6111ff565b3480156105c257600080fd5b506102fe61128d565b3480156105d757600080fd5b5060005b6040519015158152602001610240565b3480156105f757600080fd5b5061021c61129d565b34801561060c57600080fd5b5061025f6112fc565b34801561062157600080fd5b5061010a5461025f565b34801561063757600080fd5b5061021c61132d565b34801561064c57600080fd5b5061021c61065b366004614b0e565b611457565b34801561066c57600080fd5b5061025f60975481565b34801561068257600080fd5b5061021c610691366004614791565b61149e565b3480156106a257600080fd5b506105db6106b1366004614791565b6001600160a01b03166000908152609c602052604090205460ff1690565b3480156106db57600080fd5b506106e461153e565b604051610240929190614b32565b3480156106fe57600080fd5b506102fe61156a565b34801561071357600080fd5b506102fe611579565b6101735460408051630dfe168160e01b815290516000926001600160a01b031691630dfe16819160048083019260209291908290030181865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190614b40565b610174549091506001600160a01b038083169116146107aa5780610822565b61017360009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190614b40565b61017780546001600160a01b0319166001600160a01b039290921691909117905550565b609a805461085390614b5d565b80601f016020809104026020016040519081016040528092919081815260200182805461087f90614b5d565b80156108cc5780601f106108a1576101008083540402835291602001916108cc565b820191906000526020600020905b8154815290600101906020018083116108af57829003601f168201915b505050505081565b336108dd61109b565b6001600160a01b03161461090c5760405162461bcd60e51b815260040161090390614b92565b60405180910390fd5b60d255565b6000806109208686868661158f565b9050600061092e8486611650565b509050600080826001600160a01b0316876001600160a01b03161461095557836000610959565b6000845b90925090506109726001600160a01b0388168a8a611733565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f906109b19085908590309060248101614bc7565b600060405180830381600087803b1580156109cb57600080fd5b505af11580156109df573d6000803e3d6000fd5b50959b9a5050505050505050505050565b60d0546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190614bfe565b905090565b60d1546001600160a01b031690565b6000610a7c610bd9565b92915050565b600080610a8d610bd9565b905060995460001415610aa2575050609d5490565b609954609d54610ab29083614c37565b610abc9190614c56565b91505090565b610aca61109b565b6001600160a01b0316336001600160a01b03161480610afd5750336000908152609c602052604090205460ff1615156001145b610b195760405162461bcd60e51b815260040161090390614c78565b6000610b2361178e565b90507f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d5881604051610b5691815260200190565b60405180910390a150565b33610b6a61109b565b6001600160a01b031614610b905760405162461bcd60e51b815260040161090390614b92565b610b9c609a8383614574565b50610ba9609b8585614574565b506040517f6f2d71ced264587bd808aaf888d1c083d1ef532ab6eafb10b4fbd18b60eda3e690600090a150505050565b6000610be36110b7565b509395945050505050565b600054610100900460ff16610c095760005460ff1615610c0d565b303b155b610c295760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015610c4b576000805461ffff19166101011790555b610c6d82608001518360a001518460c001518560e001518661010001516119a9565b610c8b82610140015183604001518460600151856101a00151611b93565b610c9f826101600151836101800151611cd5565b610cb9826101c00151836101e00151846102000151611e95565b610ccb82600001518360200151611f5d565b610cd361203c565b610cdb612084565b6001610271558015610cf3576000805461ff00191690555b5050565b600080610d06868686866120a5565b90506000610d148486611650565b509050600080826001600160a01b0316876001600160a01b031614610d3b57876000610d3f565b6000885b90925090506109726001600160a01b0388168a86611733565b610108546001600160a01b031690565b60d0546001600160a01b031690565b33610d8061109b565b6001600160a01b031614610da65760405162461bcd60e51b815260040161090390614b92565b60cf55565b33610db461109b565b6001600160a01b031614610dda5760405162461bcd60e51b815260040161090390614b92565b610de4600061216b565b565b610dee61109b565b6001600160a01b0316336001600160a01b03161480610e215750336000908152609c602052604090205460ff1615156001145b610e3d5760405162461bcd60e51b815260040161090390614c78565b60d15460d054600091610e6691670de0b6b3a7640000916001600160a01b0390811691166121bd565b90506000610e7b670de0b6b3a76400006121fc565b9050818111610e8b578082610e8e565b81815b60cf54919350915081612710610ea48583614cee565b610eae9190614c37565b610eb89190614c56565b10610ed55760405162461bcd60e51b815260040161090390614d05565b60026065541415610ef85760405162461bcd60e51b815260040161090390614d3c565b60026065556000610f07612308565b5090506000610f146123c9565b90506000610f21826124a8565b90506000806000610f3284876124d5565b92509250925082610f9c5760405162461bcd60e51b815260206004820152602e60248201527f4865646765644c503a2068617665206e6f74207265616368656420726562616c60448201526d185b98d9481d1a1c995cda1bdb1960921b6064820152608401610903565b6000610fa88587614cee565b90508215610fbf57610fba85826125fe565b610fc9565b610fc9858261282b565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b610ffb670de0b6b3a7640000612a72565b838860405161100c93929190614d73565b60405180910390a15050600160655550505050505050565b610109546001600160a01b031690565b600061103e61156a565b6001600160a01b0316336001600160a01b03161461106e5760405162461bcd60e51b815260040161090390614c78565b600061107983612a9f565b9050806099600082825461108d9190614cee565b909155506000949350505050565b6033546001600160a01b031690565b609b805461085390614b5d565b6000806000806000806110c8612d7c565b94506110d2612e71565b93506110dd84612a72565b925060006110e9612308565b5090506110f7816002614c37565b60d0546040516370a0823160e01b81529194506001600160a01b0316906370a082319061112890309060040161477d565b602060405180830381865afa158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190614d89565b915081846111778589614da2565b6111819190614cee565b61118b9190614da2565b965050909192939495565b60006111a061156a565b6001600160a01b0316336001600160a01b0316146111d05760405162461bcd60e51b815260040161090390614c78565b60006111db83612ee7565b9050806099600082825461108d9190614da2565b610106546001600160a01b031690565b3361120861109b565b6001600160a01b03161461122e5760405162461bcd60e51b815260040161090390614b92565b6001600160a01b0382166000818152609c6020908152604091829020805460ff191685151590811790915591519182527f2458f684567d238b66deaa0126265bf3becabda0caaab7ebdda6b1794614a2d3910160405180910390a25050565b610175546001600160a01b031690565b6112a561109b565b6001600160a01b0316336001600160a01b031614806112d85750336000908152609c602052604090205460ff1615156001145b6112f45760405162461bcd60e51b815260040161090390614c78565b610de46130b8565b6000670de0b6b3a764000061131161010a5490565b611319613254565b6113239190614c37565b610a5e9190614c56565b61013f5460408051630dfe168160e01b815290516000926001600160a01b031691630dfe16819160048083019260209291908290030181865afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c9190614b40565b61013e549091506001600160a01b038083169116146113bb5780611433565b61013f60009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114339190614b40565b61013d80546001600160a01b0319166001600160a01b039290921691909117905550565b3361146061109b565b6001600160a01b0316146114865760405162461bcd60e51b815260040161090390614b92565b60d3805461ffff191661ffff92909216919091179055565b336114a761109b565b6001600160a01b0316146114cd5760405162461bcd60e51b815260040161090390614b92565b6001600160a01b0381166115325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610903565b61153b8161216b565b50565b60008061156161154c61128d565b611554610d68565b61155c610a63565b6132da565b90939092509050565b6098546001600160a01b031690565b610107546001600160a01b031690565b3b151590565b60008084116115ec5760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b6064820152608401610903565b6000806115fa8786866132da565b9092509050600061160d876103e5614c37565b9050600061161b8383614c37565b905060008261162c866103e8614c37565b6116369190614da2565b90506116428183614c56565b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031614156116b55760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f4144445245535345530000006044820152606401610903565b826001600160a01b0316846001600160a01b0316106116d55782846116d8565b83835b90925090506001600160a01b03821661172c5760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b6044820152606401610903565b9250929050565b6117898363a9059cbb60e01b8484604051602401611752929190614dba565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261339a565b505050565b60d15460d05460009182916117b991670de0b6b3a7640000916001600160a01b0391821691166121bd565b905060006117ce670de0b6b3a76400006121fc565b90508181116117de5780826117e1565b81815b60cf549193509150816127106117f78583614cee565b6118019190614c37565b61180b9190614c56565b106118285760405162461bcd60e51b815260040161090390614d05565b6002606554141561184b5760405162461bcd60e51b815260040161090390614d3c565b6002606555600061185a6123c9565b905061186760d25461346c565b61186f613652565b60d0546040516370a0823160e01b81526000916001600160a01b0316906370a08231906118a090309060040161477d565b602060405180830381865afa1580156118bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e19190614d89565b905080156118f2576118f281613794565b60d1546040516370a0823160e01b81526000916001600160a01b0316906370a082319061192390309060040161477d565b602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190614d89565b90508015611975576119758161380c565b600061197f610bd9565b905083811161198f576000611999565b6119998482614cee565b9650505050505050600160655590565b600054610100900460ff166119c45760005460ff16156119c8565b303b155b6119e45760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611a06576000805461ffff19166101011790555b61017280546001600160a01b038088166001600160a01b0319928316179092556101738054878416908316811790915561017480548785169084161790556101758054938a169390921692909217905561017683905560408051630dfe168160e01b8152905160009291630dfe16819160048083019260209291908290030181865afa158015611a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abe9190614b40565b9050836001600160a01b0316816001600160a01b031614611adf5780611b57565b61017360009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190614b40565b61017780546001600160a01b0319166001600160a01b0392909216919091179055508015611b8b576000805461ff00191690555b505050505050565b600054610100900460ff16611bae5760005460ff1615611bb2565b303b155b611bce5760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611bf0576000805461ffff19166101011790555b61010680546001600160a01b038087166001600160a01b031992831617909255610107805486841690831617905561010880549288169290911682179055604080516307dc0d1d60e41b81529051637dc0d1d0916004808201926020929091908290030181865afa158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d9190614b40565b61010980546001600160a01b0319166001600160a01b039290921691909117905561010a829055611cbc613841565b8015611cce576000805461ff00191690555b5050505050565b600054610100900460ff16611cf05760005460ff1615611cf4565b303b155b611d105760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611d32576000805461ffff19166101011790555b61013f80546001600160a01b038086166001600160a01b0319928316811790935561013e80549186169190921617905560408051630dfe168160e01b8152905160009291630dfe16819160048083019260209291908290030181865afa158015611da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc49190614b40565b9050826001600160a01b0316816001600160a01b031614611de55780611e5d565b61013f60009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190614b40565b61013d80546001600160a01b0319166001600160a01b0392909216919091179055508015611789576000805461ff0019169055505050565b600054610100900460ff16611eb05760005460ff1615611eb4565b303b155b611ed05760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611ef2576000805461ffff19166101011790555b611efa613952565b611f02613981565b609880546001600160a01b0319166001600160a01b0386161790558251611f3090609b9060208601906145f8565b508151611f4490609a9060208501906145f8565b508015611f57576000805461ff00191690555b50505050565b600054610100900460ff16611f785760005460ff1615611f7c565b303b155b611f985760405162461bcd60e51b815260040161090390614ca0565b600054610100900460ff16158015611fba576000805461ffff19166101011790555b60d080546001600160a01b038086166001600160a01b0319928316811790935560d1805491861691909216179055611ff590306000196139b8565b603c60cf5560d3805461ffff1916610190179055623d090060d2556120186109f0565b61202390600a614eb7565b609d558015611789576000805461ff0019169055505050565b61010654612068906001600160a01b0316600019612058610d68565b6001600160a01b031691906139b8565b61010754610de4906001600160a01b0316600019612058610a63565b6101725461017554610de4916001600160a01b0391821691166000196139b8565b60008084116121025760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b6064820152608401610903565b6000806121108786866132da565b909250905060006121218784614c37565b61212d906103e8614c37565b9050600061213b8884614cee565b612147906103e5614c37565b90506121538183614c56565b61215e906001614da2565b9998505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000836121cc575060006121f5565b6000806121e16121da61128d565b86866132da565b915091506121f0868383613abc565b925050505b9392505050565b6000612206611024565b6001600160a01b031663fc57d4df61221c6111ef565b6040518263ffffffff1660e01b8152600401612238919061477d565b602060405180830381865afa158015612255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122799190614d89565b612281611024565b6001600160a01b031663fc57d4df612297611579565b6040518263ffffffff1660e01b81526004016122b3919061477d565b602060405180830381865afa1580156122d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f49190614d89565b6122fe9084614c37565b610a7c9190614c56565b6000806000612315613b86565b905060008061232261153e565b91509150600061233061128d565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561236d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123919190614d89565b90508061239e8585614c37565b6123a89190614c56565b9550806123b58584614c37565b6123bf9190614c56565b9450505050509091565b6000806123d4613c1c565b905060006123e0613c70565b905060006123ed82612a72565b905060006123f9612308565b5060d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061243090309060040161477d565b602060405180830381865afa15801561244d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124719190614d89565b90508083612480846002614c37565b61248a9088614da2565b6124949190614cee565b61249e9190614da2565b9550505050505090565b6000806124b36112fc565b90506124c181612710614da2565b6124cb8285614c37565b6121f59190614c56565b60008060008385116124e85760006124eb565b60015b91508315806124f8575084155b15612508578484141592506125f7565b6000612512612e71565b90508261254057856127106125278288614cee565b6125319190614c37565b61253b9190614c56565b612562565b8461271061254e8289614cee565b6125589190614c37565b6125629190614c56565b60d35490925061ffff168211806125ea575060d0546040516370a0823160e01b815262989680916001600160a01b0316906370a08231906125a790309060040161477d565b602060405180830381865afa1580156125c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e89190614d89565b115b806125f3575080155b9350505b9250925092565b61260781613ca5565b5050600061261483613d07565b90506000612620612e71565b905061263461262f8284614cee565b613d34565b600061263e612308565b5060d0546040516370a0823160e01b815291925060009183916001600160a01b0316906370a082319061267590309060040161477d565b602060405180830381865afa158015612692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b69190614d89565b6126c09190614da2565b6126ca9087614cee565b905080156126f9576126f76126dd61128d565b60d15460d05484916001600160a01b039081169116610cf7565b505b60d1546040516370a0823160e01b81526000916001600160a01b0316906370a082319061272a90309060040161477d565b602060405180830381865afa158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190614d89565b9050600061277882612a72565b60d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906127ae90309060040161477d565b602060405180830381865afa1580156127cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ef9190614d89565b9050818110156128085780915061280582613d07565b92505b60006128148385613d69565b905061281f81613e19565b50505050505050505050565b8161283857610cf36130b8565b61284182613e7c565b505060d1546040516370a0823160e01b81526000916001600160a01b0316906370a082319061287490309060040161477d565b602060405180830381865afa158015612891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b59190614d89565b90506128c08161380c565b60006128cb83613ca5565b91505060006128d8613c70565b905060006128e586613d07565b6128ef9083614cee565b9050806128fe57505050505050565b600061292561290b61128d565b60d05460d15485916001600160a01b0390811691166120a5565b60d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061295b90309060040161477d565b602060405180830381865afa158015612978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299c9190614d89565b905060008183106129ad57816129af565b825b90506129d66129bc61128d565b60d05460d15484916001600160a01b039081169116610911565b5060d1546040516370a0823160e01b81526001600160a01b03909116906370a0823190612a0790309060040161477d565b602060405180830381865afa158015612a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a489190614d89565b9650612a538761380c565b85881115612a6757612a6488613ca5565b50505b505050505050505050565b600081612a8157506000919050565b60d15460d054610a7c9184916001600160a01b0391821691166121bd565b6000612aa961156a565b6001600160a01b0316336001600160a01b031614612ad95760405162461bcd60e51b815260040161090390614c78565b60d15460d054600091612b0291670de0b6b3a7640000916001600160a01b0390811691166121bd565b90506000612b17670de0b6b3a76400006121fc565b9050818111612b27578082612b2a565b81815b60cf54919350915081612710612b408583614cee565b612b4a9190614c37565b612b549190614c56565b10612b715760405162461bcd60e51b815260040161090390614d05565b60026065541415612b945760405162461bcd60e51b815260040161090390614d3c565b60026065556000612ba36123c9565b60d0546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612bd990309060040161477d565b602060405180830381865afa158015612bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1a9190614d89565b905085811015612cf45760006064612c33886065614c37565b612c3d9190614c56565b9050828110612cc657612c4e6130b8565b60d0546040516370a0823160e01b81526001600160a01b03909116906370a0823190612c7e90309060040161477d565b602060405180830381865afa158015612c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbf9190614d89565b9050612ce6565b81612cd9612cd48284614cee565b613ede565b612ce39190614da2565b90505b612cf08188613f89565b9650505b81612cfe60995490565b612d089088614c37565b612d129190614c56565b9450612d3430612d2061156a565b60d0546001600160a01b0316919089613f9f565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643387604051612d65929190614dba565b60405180910390a150506001606555509092915050565b600080612d876111ef565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612db2919061477d565b602060405180830381865afa158015612dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df39190614d89565b9050670de0b6b3a7640000612e066111ef565b6001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e679190614d89565b610ab29083614c37565b6000612e7b611579565b6001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401612ea6919061477d565b602060405180830381865afa158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190614d89565b60d15460d0546000918291612f1291670de0b6b3a7640000916001600160a01b0391821691166121bd565b90506000612f27670de0b6b3a76400006121fc565b9050818111612f37578082612f3a565b81815b60cf54919350915081612710612f508583614cee565b612f5a9190614c37565b612f649190614c56565b10612f815760405162461bcd60e51b815260040161090390614d05565b60026065541415612fa45760405162461bcd60e51b815260040161090390614d3c565b60026065556000612fb36123c9565b9050612fbe60995490565b15612fe7578085612fce60995490565b612fd89190614c37565b612fe29190614c56565b612fe9565b845b60d0549094506001600160a01b03166323b872dd61300561156a565b30886040518463ffffffff1660e01b815260040161302593929190614ec6565b6020604051808303816000875af1158015613044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130689190614eea565b5061307285613fc0565b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c33866040516130a3929190614dba565b60405180910390a15050600160655550919050565b6130c26000613e7c565b505060006130ce613c70565b60d1546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061310490309060040161477d565b602060405180830381865afa158015613121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131459190614d89565b90508082111561318957600061315b8284614cee565b905061318261316861128d565b60d05460d15484916001600160a01b039081169116610cf7565b50506131c7565b818111156131c757600061319d8383614cee565b90506131c46131aa61128d565b60d15460d05484916001600160a01b039081169116610911565b50505b60d1546040516370a0823160e01b815261323f916001600160a01b0316906370a08231906131f990309060040161477d565b602060405180830381865afa158015613216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323a9190614d89565b61380c565b6000613249613c1c565b905061178981614023565b60008061325f610d58565b6001600160a01b0316638e8f294b6132756111ef565b6040518263ffffffff1660e01b8152600401613291919061477d565b606060405180830381865afa1580156132ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d29190614f07565b509392505050565b60008060006132e98585611650565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561332d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133519190614f61565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461338857808261338b565b81815b90999098509650505050505050565b60006133ef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661409d9092919063ffffffff16565b805190915015611789578080602001905181019061340d9190614eea565b6117895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610903565b6040805160028082526060820183526000926020830190803683370190505090506134956111ef565b816000815181106134a8576134a8614fa6565b60200260200101906001600160a01b031690816001600160a01b0316815250506134d0611579565b816001815181106134e3576134e3614fa6565b60200260200101906001600160a01b031690816001600160a01b03168152505061350b610d58565b6001600160a01b0316631c3db2e030836040518363ffffffff1660e01b8152600401613538929190614fbc565b600060405180830381600087803b15801561355257600080fd5b505af1158015613566573d6000803e3d6000fd5b505061013e546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319061359e90309060040161477d565b602060405180830381865afa1580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df9190614d89565b905080156136115761013f5461013e5461013d5461360f926001600160a01b039081169285929082169116610911565b505b7fb7828c606ac1d345dde5ddccf4f72a887cac5c2627ffabb0ed53c2346497e0108160008060405161364593929190614d73565b60405180910390a1505050565b6101725461017654604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161368891600090600401614b32565b600060405180830381600087803b1580156136a257600080fd5b505af11580156136b6573d6000803e3d6000fd5b5050610174546040516370a0823160e01b8152600093506001600160a01b0390911691506370a08231906136ee90309060040161477d565b602060405180830381865afa15801561370b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372f9190614d89565b9050806137395750565b610173546101745461017754613761926001600160a01b039081169285929082169116610911565b90507f32a12275d11ded9e7f36c2998c56e68328a566370e94f5a57d62df0bb39c690581604051610b5691815260200190565b61379c6111ef565b6001600160a01b031663a0712d68826040518263ffffffff1660e01b81526004016137c991815260200190565b6020604051808303816000875af11580156137e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190614d89565b613814611579565b6001600160a01b0316630e752702826040518263ffffffff1660e01b81526004016137c991815260200190565b60408051600280825260608201835260009260208301908036833701905050905061386a6111ef565b8160008151811061387d5761387d614fa6565b60200260200101906001600160a01b031690816001600160a01b0316815250506138a5611579565b816001815181106138b8576138b8614fa6565b60200260200101906001600160a01b031690816001600160a01b0316815250506138e0610d58565b6001600160a01b031663c2998238826040518263ffffffff1660e01b815260040161390b9190615018565b6000604051808303816000875af115801561392a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf39190810190615065565b600054610100900460ff166139795760405162461bcd60e51b81526004016109039061510a565b610de46140ac565b600054610100900460ff166139a85760405162461bcd60e51b81526004016109039061510a565b6139b06140da565b610de4614101565b801580613a325750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015613a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a309190614d89565b155b613a9d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610903565b6117898363095ea7b360e01b8484604051602401611752929190614dba565b6000808411613b0d5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e540000006044820152606401610903565b600083118015613b1d5750600082115b613b695760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c49515549444954596044820152606401610903565b82613b748386614c37565b613b7e9190614c56565b949350505050565b600080613b91614131565b610175546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190613bc890309060040161477d565b602060405180830381865afa158015613be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c099190614d89565b9050613c158183614da2565b9250505090565b6000613c266111ef565b6001600160a01b0316633af9e669306040518263ffffffff1660e01b8152600401613c51919061477d565b6020604051808303816000875af1158015612ec3573d6000803e3d6000fd5b6000613c7a611579565b6001600160a01b03166317bfdfbc306040518263ffffffff1660e01b8152600401613c51919061477d565b6000806000613cb2612d7c565b905083811415613cc85750600093849350915050565b838111613ce857613ce1613cdc8286614cee565b6141b5565b6000613cfc565b6000613cfc613cf78684614cee565b614254565b909590945092505050565b600081613d1657506000919050565b60d05460d154610a7c9184916001600160a01b0391821691166121bd565b613d3c611579565b6001600160a01b031663c5ebeaec826040518263ffffffff1660e01b81526004016137c991815260200190565b6000613d8f613d7661128d565b84613d7f610d68565b6001600160a01b03169190611733565b613da3613d9a61128d565b83613d7f610a63565b613dab61128d565b6001600160a01b0316636a627842306040518263ffffffff1660e01b8152600401613dd6919061477d565b6020604051808303816000875af1158015613df5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f59190614d89565b6101725461017654604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891613e4e918590600401614b32565b600060405180830381600087803b158015613e6857600080fd5b505af1158015611cce573d6000803e3d6000fd5b6000806000613e89612308565b5090506000613e96613b86565b9050600082613ea58784614c37565b613eaf9190614c56565b90506000613ebd8284614cee565b9050613ec8816142f8565b613ed18161432d565b9550955050505050915091565b600080613eea836124a8565b90506000613ef6612308565b5090506000613f03612e71565b9050600080613f1a613f158686614cee565b613e7c565b90925090508080841015613f6557613f55613f3361128d565b613f3d8685614cee565b60d15460d0546001600160a01b039182169116610911565b613f5f9084614da2565b92508390505b613f6e8161380c565b6000613f7d613cf7858b614cee565b905061215e8185614da2565b6000818310613f9857816121f5565b5090919050565b611f57846323b872dd60e01b85858560405160240161175293929190614ec6565b6000613fcb826124a8565b60d05460d154919250600091613fef9184916001600160a01b0391821691166121bd565b9050614003613ffe8385614cee565b613794565b61400c81613d34565b60006140188383613d69565b9050611f5781613e19565b600061402d6111ef565b6001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040161405a91815260200190565b6020604051808303816000875af1158015614079573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190614d89565b6060613b7e8484600085614413565b600054610100900460ff166140d35760405162461bcd60e51b81526004016109039061510a565b6001606555565b600054610100900460ff16610de45760405162461bcd60e51b81526004016109039061510a565b600054610100900460ff166141285760405162461bcd60e51b81526004016109039061510a565b610de43361216b565b61017254610176546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b906044016040805180830381865afa15801561418a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ae9190615155565b5092915050565b6000806141c0610d68565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016141eb919061477d565b602060405180830381865afa158015614208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422c9190614d89565b905082811161423b578061423d565b825b9150811561424e5761424e82613794565b50919050565b600080614267614262612e71565b6121fc565b90506000614273612d7c565b90506000605f614281613254565b61429385670de0b6b3a7640000614c37565b61429e906064614c37565b6142a89190614c56565b6142b29190614c56565b9050818111156142c757506000949350505050565b60006142d38284614cee565b90508581116142e257806142e4565b855b94506142ef85614023565b50505050919050565b6101725461017654604051630441a3e760e41b81526001600160a01b039092169163441a3e7091613e4e918590600401614b32565b60008061434461433b61128d565b84613d7f61128d565b600061435e614351610d68565b614359610a63565b611650565b50905060008061436c61128d565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401614397919061477d565b60408051808303816000875af11580156143b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d99190615155565b915091506143e5610d68565b6001600160a01b0316836001600160a01b031614614404578082614407565b81815b94509450505050915091565b6060824710156144745760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610903565b843b6144c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610903565b600080866001600160a01b031685876040516144de9190615179565b60006040518083038185875af1925050503d806000811461451b576040519150601f19603f3d011682016040523d82523d6000602084013e614520565b606091505b509150915061453082828661453b565b979650505050505050565b6060831561454a5750816121f5565b82511561455a5782518084602001fd5b8160405162461bcd60e51b815260040161090391906146d9565b82805461458090614b5d565b90600052602060002090601f0160209004810192826145a257600085556145e8565b82601f106145bb5782800160ff198235161785556145e8565b828001600101855582156145e8579182015b828111156145e85782358255916020019190600101906145cd565b506145f492915061466c565b5090565b82805461460490614b5d565b90600052602060002090601f01602090048101928261462657600085556145e8565b82601f1061463f57805160ff19168380011785556145e8565b828001600101855582156145e8579182015b828111156145e8578251825591602001919060010190614651565b5b808211156145f4576000815560010161466d565b60005b8381101561469c578181015183820152602001614684565b83811115611f575750506000910152565b600081518084526146c5816020860160208601614681565b601f01601f19169290920160200192915050565b6020815260006121f560208301846146ad565b6000602082840312156146fe57600080fd5b5035919050565b6001600160a01b038116811461153b57600080fd5b803561472581614705565b919050565b6000806000806080858703121561474057600080fd5b843561474b81614705565b935060208501359250604085013561476281614705565b9150606085013561477281614705565b939692955090935050565b6001600160a01b0391909116815260200190565b6000602082840312156147a357600080fd5b81356121f581614705565b60008083601f8401126147c057600080fd5b5081356001600160401b038111156147d757600080fd5b60208301915083602082850101111561172c57600080fd5b6000806000806040858703121561480557600080fd5b84356001600160401b038082111561481c57600080fd5b614828888389016147ae565b9096509450602087013591508082111561484157600080fd5b5061484e878288016147ae565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b60405161022081016001600160401b03811182821017156148935761489361485a565b60405290565b604051601f8201601f191681016001600160401b03811182821017156148c1576148c161485a565b604052919050565b600082601f8301126148da57600080fd5b81356001600160401b038111156148f3576148f361485a565b614906601f8201601f1916602001614899565b81815284602083860101111561491b57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561494a57600080fd5b81356001600160401b038082111561496157600080fd5b90830190610220828603121561497657600080fd5b61497e614870565b6149878361471a565b81526149956020840161471a565b60208201526149a66040840161471a565b60408201526149b76060840161471a565b60608201526149c86080840161471a565b60808201526149d960a0840161471a565b60a08201526149ea60c0840161471a565b60c08201526149fb60e0840161471a565b60e08201526101008381013590820152610120614a1981850161471a565b90820152610140614a2b84820161471a565b90820152610160614a3d84820161471a565b90820152610180614a4f84820161471a565b908201526101a083810135908201526101c0614a6c81850161471a565b908201526101e08381013583811115614a8457600080fd5b614a90888287016148c9565b8284015250506102008084013583811115614aaa57600080fd5b614ab6888287016148c9565b918301919091525095945050505050565b801515811461153b57600080fd5b60008060408385031215614ae857600080fd5b8235614af381614705565b91506020830135614b0381614ac7565b809150509250929050565b600060208284031215614b2057600080fd5b813561ffff811681146121f557600080fd5b918252602082015260400190565b600060208284031215614b5257600080fd5b81516121f581614705565b600181811c90821680614b7157607f821691505b6020821081141561424e57634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b84815283602082015260018060a01b0383166040820152608060608201526000614bf460808301846146ad565b9695505050505050565b600060208284031215614c1057600080fd5b815160ff811681146121f557600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614c5157614c51614c21565b500290565b600082614c7357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600e908201526d0a6e8e4c2e874409c9ebe82aaa8960931b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015614d0057614d00614c21565b500390565b6020808252601e908201527f4865646765644c503a2053484f52545f50524943455f4d49534d415443480000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b9283526020830191909152604082015260600190565b600060208284031215614d9b57600080fd5b5051919050565b60008219821115614db557614db5614c21565b500190565b6001600160a01b03929092168252602082015260400190565b600181815b80851115614e0e578160001904821115614df457614df4614c21565b80851615614e0157918102915b93841c9390800290614dd8565b509250929050565b600082614e2557506001610a7c565b81614e3257506000610a7c565b8160018114614e485760028114614e5257614e6e565b6001915050610a7c565b60ff841115614e6357614e63614c21565b50506001821b610a7c565b5060208310610133831016604e8410600b8410161715614e91575081810a610a7c565b614e9b8383614dd3565b8060001904821115614eaf57614eaf614c21565b029392505050565b60006121f560ff841683614e16565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215614efc57600080fd5b81516121f581614ac7565b600080600060608486031215614f1c57600080fd5b8351614f2781614ac7565b602085015160408601519194509250614f3f81614ac7565b809150509250925092565b80516001600160701b038116811461472557600080fd5b600080600060608486031215614f7657600080fd5b614f7f84614f4a565b9250614f8d60208501614f4a565b9150604084015163ffffffff81168114614f3f57600080fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561500a578551851683529483019491830191600101614fec565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156150595783516001600160a01b031683529284019291840191600101615034565b50909695505050505050565b6000602080838503121561507857600080fd5b82516001600160401b038082111561508f57600080fd5b818501915085601f8301126150a357600080fd5b8151818111156150b5576150b561485a565b8060051b91506150c6848301614899565b81815291830184019184810190888411156150e057600080fd5b938501935b838510156150fe578451825293850193908501906150e5565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000806040838503121561516857600080fd5b505080516020909101519092909150565b6000825161518b818460208701614681565b919091019291505056fea2646970667358221220f6397d1dc85cce70b828edc72b113fc6e8b2782f674db5792da86f49b213b0f764736f6c634300080a0033",
  "libraries": {
    "UniUtils": "0x92dBEa6fa85A1cd839b604D1F2852ABfb7Fa2897"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPricePerShare()": {
        "notice": "Returns the share price of the strategy in `want` units, multiplied  by 1e18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 135,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1454,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 213,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 256,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15273,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "lastHarvest",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 15275,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_vault",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 15277,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_shares",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 15279,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 15281,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 15285,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_managers",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15287,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "BASE_UNIT",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 15565,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15598,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_maxPriceMismatch",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 15655,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_underlying",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(IERC20)3568"
      },
      {
        "astId": 15658,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_short",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(IERC20)3568"
      },
      {
        "astId": 15660,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_minLendHarvest",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 15662,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "rebalanceThreshold",
        "offset": 0,
        "slot": "211",
        "type": "t_uint16"
      },
      {
        "astId": 16923,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_gap",
        "offset": 0,
        "slot": "212",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17803,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_cTokenLend",
        "offset": 0,
        "slot": "262",
        "type": "t_contract(ICTokenErc20)12715"
      },
      {
        "astId": 17806,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_cTokenBorrow",
        "offset": 0,
        "slot": "263",
        "type": "t_contract(ICTokenErc20)12715"
      },
      {
        "astId": 17809,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_comptroller",
        "offset": 0,
        "slot": "264",
        "type": "t_contract(IComptroller)12957"
      },
      {
        "astId": 17812,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_oracle",
        "offset": 0,
        "slot": "265",
        "type": "t_contract(ICompPriceOracle)12738"
      },
      {
        "astId": 17814,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_safeCollateralRatio",
        "offset": 0,
        "slot": "266",
        "type": "t_uint256"
      },
      {
        "astId": 17950,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_gap",
        "offset": 0,
        "slot": "267",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17970,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_harvestTo",
        "offset": 0,
        "slot": "317",
        "type": "t_address"
      },
      {
        "astId": 17973,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_farmToken",
        "offset": 0,
        "slot": "318",
        "type": "t_contract(IERC20)3568"
      },
      {
        "astId": 17976,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_farmPair",
        "offset": 0,
        "slot": "319",
        "type": "t_contract(IUniswapV2Pair)13541"
      },
      {
        "astId": 18116,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_gap",
        "offset": 0,
        "slot": "320",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18143,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_farm",
        "offset": 0,
        "slot": "370",
        "type": "t_contract(IMasterChef)13221"
      },
      {
        "astId": 18146,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_farmPair",
        "offset": 0,
        "slot": "371",
        "type": "t_contract(IUniswapV2Pair)13541"
      },
      {
        "astId": 18149,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_farmToken",
        "offset": 0,
        "slot": "372",
        "type": "t_contract(IERC20)3568"
      },
      {
        "astId": 18152,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_pair",
        "offset": 0,
        "slot": "373",
        "type": "t_contract(IUniswapV2Pair)13541"
      },
      {
        "astId": 18154,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_farmId",
        "offset": 0,
        "slot": "374",
        "type": "t_uint256"
      },
      {
        "astId": 18156,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_harvestTo",
        "offset": 0,
        "slot": "375",
        "type": "t_address"
      },
      {
        "astId": 18394,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_gap",
        "offset": 0,
        "slot": "376",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17241,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "_gap",
        "offset": 0,
        "slot": "425",
        "type": "t_array(t_uint256)200_storage"
      },
      {
        "astId": 17366,
        "contract": "src/strategies/impl/USDCftmSPIRITscream.sol:USDCftmSPIRITscream",
        "label": "version",
        "offset": 0,
        "slot": "625",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)200_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[200]",
        "numberOfBytes": "6400"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICTokenErc20)12715": {
        "encoding": "inplace",
        "label": "contract ICTokenErc20",
        "numberOfBytes": "20"
      },
      "t_contract(ICompPriceOracle)12738": {
        "encoding": "inplace",
        "label": "contract ICompPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IComptroller)12957": {
        "encoding": "inplace",
        "label": "contract IComptroller",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3568": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef)13221": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)13541": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}