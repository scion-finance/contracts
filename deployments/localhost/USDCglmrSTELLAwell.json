{
  "address": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "short",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenLend",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenBorrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniPair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniFarm",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "farmId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "farmRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxTvl",
              "type": "uint256"
            }
          ],
          "internalType": "struct Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvested",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "HarvestedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "ManagerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvlBeforeRebalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startLoanHealth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedLoanHealth",
          "type": "uint256"
        }
      ],
      "name": "RebalanceLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetMaxPriceMismatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetMaxTvl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetRebalanceThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "SetSafeCollateralRaio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "setMinLoanHealth",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenBorrow",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenLend",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underlyingBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingShortReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct HarvestSwapParms[]",
          "name": "uniParams",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct HarvestSwapParms[]",
          "name": "lendingParams",
          "type": "tuple[]"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "farmHarvest",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "lendHarvest",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCEther",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendFarmRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceMismatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLoanHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ICompPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceThreshold",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmnt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmnt",
          "type": "uint256"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "removeLp",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPriceMismatch_",
          "type": "uint256"
        }
      ],
      "name": "setMaxPriceMismatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTvl_",
          "type": "uint256"
        }
      ],
      "name": "setMaxTvl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLoanHealth_",
          "type": "uint256"
        }
      ],
      "name": "setMinLoanHeath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rebalanceThreshold_",
          "type": "uint16"
        }
      ],
      "name": "setRebalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "safeCollateralRatio_",
          "type": "uint256"
        }
      ],
      "name": "setSafeCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "short",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFromFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
  "receipt": {
    "to": null,
    "from": "0x57B94588ad3E09d213A5977599A8295aA962fc99",
    "contractAddress": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
    "transactionIndex": 0,
    "gasUsed": "5415905",
    "logsBloom": "0x
    "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d",
    "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0x8E00D5e02E65A19337Cdba98bbA9F84d4186a180",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x00000000000000000000000002e9081dfadd37a852f9a73c4d7d69e615e61334000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
        "logIndex": 1,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0x8E00D5e02E65A19337Cdba98bbA9F84d4186a180",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x000000000000000000000000091608f4e4a15335145be0a279483c0f8e4c7955000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
        "logIndex": 2,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0x511aB53F793683763E5a8829738301368a2411E3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
          "0x00000000000000000000000070085a09d30d6f8c4ecf6ee10120d1847383bb57"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
          "0x000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
        "topics": [
          "0x13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a12"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
        "topics": [
          "0x5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000ff59ee833b30000",
        "logIndex": 6,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
        "topics": [
          "0x3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 7,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
        "topics": [
          "0x36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000190",
        "logIndex": 8,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0xFFD86C66cBbB27671984932180988E2f1a93B8fE",
        "topics": [
          "0x4812bd1abd1ad4ea905335e3af941ec67d6d51ecb36ab58f23af0af081aac57b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000001f40",
        "logIndex": 9,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
          "0x00000000000000000000000002e9081dfadd37a852f9a73c4d7d69e615e61334"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0xAcc15dC74880C9944775448304B263D191c6077F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
          "0x000000000000000000000000091608f4e4a15335145be0a279483c0f8e4c7955"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0x9bFcf685e641206115dadc0C9ab17181e1d4975c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
          "0x000000000000000000000000f3a5454496e26ac57da879bf3285fa85debf0388"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1467422,
        "transactionHash": "0x8895a8e43ee277991d4bbb2ce26c12b51947a91c49cfb1bbb6788da251090757",
        "address": "0x0E358838ce72d5e61E0018a2ffaC4bEC5F4c88d2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ffd86c66cbbb27671984932180988e2f1a93b8fe",
          "0x00000000000000000000000070085a09d30d6f8c4ecf6ee10120d1847383bb57"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 13,
        "blockHash": "0xd80909320420325f427fc26e7843969510fb98002cacfcac5cc40844984a163d"
      }
    ],
    "blockNumber": 1467422,
    "cumulativeGasUsed": "5415905",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9",
      "0xAcc15dC74880C9944775448304B263D191c6077F",
      "0x02e9081DfadD37A852F9a73C4d7d69e615E61334",
      "0x091608f4e4a15335145be0A279483C0f8E4c7955",
      "0x9bFcf685e641206115dadc0C9ab17181e1d4975c",
      "0xF3a5454496E26ac57da879bf3285Fa85DEBF0388",
      "0x0E358838ce72d5e61E0018a2ffaC4bEC5F4c88d2",
      12,
      "0x70085a09D30D6f8C4ecF6eE10120d1847383BB57",
      "0x8E00D5e02E65A19337Cdba98bbA9F84d4186a180",
      "0x70085a09D30D6f8C4ecF6eE10120d1847383BB57",
      "0x511aB53F793683763E5a8829738301368a2411E3",
      "0x493b0cc1027d40e4Abc3a6a5aC9D60d62c053396",
      "USDCglmrSTELLAwell",
      "USDC GLMR STELLA Moonwell",
      "115792089237316195423570985008687907853269984665640564039457584007913129639935"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "840d0470c3757998b83f67edf2c60b6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"short\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"farmRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTvl\",\"type\":\"uint256\"}],\"internalType\":\"struct Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"ManagerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvlBeforeRebalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startLoanHealth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedLoanHealth\",\"type\":\"uint256\"}],\"name\":\"RebalanceLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetMaxPriceMismatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetMaxTvl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetRebalanceThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"}],\"name\":\"SetSafeCollateralRaio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"setMinLoanHealth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenBorrow\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenLend\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingShortReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct HarvestSwapParms[]\",\"name\":\"uniParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct HarvestSwapParms[]\",\"name\":\"lendingParams\",\"type\":\"tuple[]\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"farmHarvest\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lendHarvest\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendFarmRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceMismatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLoanHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ICompPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmnt\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeLp\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceMismatch_\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceMismatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTvl_\",\"type\":\"uint256\"}],\"name\":\"setMaxTvl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLoanHealth_\",\"type\":\"uint256\"}],\"name\":\"setMinLoanHeath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rebalanceThreshold_\",\"type\":\"uint16\"}],\"name\":\"setRebalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safeCollateralRatio_\",\"type\":\"uint256\"}],\"name\":\"setSafeCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"short\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMaxTvl()\":{\"returns\":{\"_0\":\"MaxTvl\"}},\"isCEther()\":{\"details\":\"Only present in Fuse cTokens, not Compound cTokens.\",\"returns\":{\"_0\":\"True if the strategy accepts ETH, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeemUnderlying(uint256)\":{\"params\":{\"amount\":\"The amount of underlying tokens to withdraw.\"},\"returns\":{\"errCode\":\"An error code, or 0 if the withdrawal was successful.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address,address[])\":{\"notice\":\"Withdraws any ERC20 tokens back to recipient.\"},\"getMaxTvl()\":{\"notice\":\"Returns max deposits a strategy can take.\"},\"getPricePerShare()\":{\"notice\":\"Returns the share price of the strategy in `underlying` units, multiplied  by 1e18\"},\"isCEther()\":{\"notice\":\"Returns whether the strategy accepts ETH or an ERC20.\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Withdraws a specific amount of underlying tokens from the strategy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategies/implementations/USDCglmrSTELLAwell.sol\":\"USDCglmrSTELLAwell\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/interfaces/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// this import is used in tests\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\n/// @dev Like cTokens, strategies must be transferrable ERC20s.\\nabstract contract Strategy {\\n    /// @notice Returns whether the strategy accepts ETH or an ERC20.\\n    /// @return True if the strategy accepts ETH, false otherwise.\\n    /// @dev Only present in Fuse cTokens, not Compound cTokens.\\n    function isCEther() external view virtual returns (bool);\\n\\n    /// @notice Withdraws a specific amount of underlying tokens from the strategy.\\n    /// @param amount The amount of underlying tokens to withdraw.\\n    /// @return An error code, or 0 if the withdrawal was successful.\\n    function redeemUnderlying(uint256 amount)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Returns a user's strategy balance in underlying tokens.\\n    /// @param user The user to get the underlying balance of.\\n    /// @return The user's strategy balance in underlying tokens.\\n    /// @dev May mutate the state of the strategy by accruing interest.\\n    function balanceOfUnderlying(address user)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Returns max deposits a strategy can take.\\n    /// @return MaxTvl\\n    function getMaxTvl() external virtual returns (uint256);\\n\\n    /// @notice Withdraws any ERC20 tokens back to recipient.\\n    function emergencyWithdraw(address recipient, IERC20[] memory tokens)\\n        external\\n        virtual;\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ERC20s.\\n/// @dev Designed for out of the box compatibility with Fuse cERC20s.\\nabstract contract ERC20Strategy is Strategy {\\n    /// @notice Returns the underlying ERC20 token the strategy accepts.\\n    /// @return The underlying ERC20 token the strategy accepts.\\n    function underlying() external view virtual returns (IERC20);\\n\\n    /// @notice Deposit a specific amount of underlying tokens into the strategy.\\n    /// @param amount The amount of underlying tokens to deposit.\\n    /// @return An error code, or 0 if the deposit was successful.\\n    function mint(uint256 amount) external virtual returns (uint256);\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ETH.\\n/// @dev Designed for out of the box compatibility with Fuse cEther.\\nabstract contract ETHStrategy is Strategy {\\n    /// @notice Deposit a specific amount of ETH into the strategy.\\n    /// @dev The amount of ETH is specified via msg.value. Reverts on error.\\n    function mint() external payable virtual;\\n}\\n\",\"keccak256\":\"0x694f3b225c82b2f7856ddd3eae5a162b459fcb6c5c701eafe4a505cb9d5bdfb1\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/compound/ICTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ninterface ICTokenStorage {\\n\\t/**\\n\\t * @dev Container for borrow balance information\\n\\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n\\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n\\t */\\n\\tstruct BorrowSnapshot {\\n\\t\\tuint256 principal;\\n\\t\\tuint256 interestIndex;\\n\\t}\\n}\\n\\ninterface ICToken is ICTokenStorage {\\n\\t/*** Market Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when interest is accrued\\n\\t */\\n\\tevent AccrueInterest(\\n\\t\\tuint256 cashPrior,\\n\\t\\tuint256 interestAccumulated,\\n\\t\\tuint256 borrowIndex,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are minted\\n\\t */\\n\\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are redeemed\\n\\t */\\n\\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when underlying is borrowed\\n\\t */\\n\\tevent Borrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is repaid\\n\\t */\\n\\tevent RepayBorrow(\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is liquidated\\n\\t */\\n\\tevent LiquidateBorrow(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 seizeTokens\\n\\t);\\n\\n\\t/*** Admin Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is changed\\n\\t */\\n\\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\\n\\t */\\n\\tevent NewAdmin(address oldAdmin, address newAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when comptroller is changed\\n\\t */\\n\\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\\n\\n\\t/**\\n\\t * @dev Event emitted when interestRateModel is changed\\n\\t */\\n\\tevent NewMarketInterestRateModel(\\n\\t\\tInterestRateModel oldInterestRateModel,\\n\\t\\tInterestRateModel newInterestRateModel\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserve factor is changed\\n\\t */\\n\\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are added\\n\\t */\\n\\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are reduced\\n\\t */\\n\\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev EIP20 Transfer event\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev EIP20 Approval event\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Failure event\\n\\t */\\n\\tevent Failure(uint256 error, uint256 info, uint256 detail);\\n\\n\\t/*** User Interface ***/\\n\\tfunction totalBorrows() external view returns (uint256);\\n\\n\\tfunction totalReserves() external view returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction transfer(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction balanceOfUnderlying(address owner) external returns (uint256);\\n\\n\\tfunction getAccountSnapshot(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction borrowRatePerBlock() external view returns (uint256);\\n\\n\\tfunction supplyRatePerBlock() external view returns (uint256);\\n\\n\\tfunction totalBorrowsCurrent() external returns (uint256);\\n\\n\\tfunction borrowBalanceCurrent(address account) external returns (uint256);\\n\\n\\tfunction borrowBalanceStored(address account) external view returns (uint256);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction exchangeRateStored() external view returns (uint256);\\n\\n\\tfunction getCash() external view returns (uint256);\\n\\n\\tfunction accrueInterest() external returns (uint256);\\n\\n\\tfunction seize(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n\\tfunction _acceptAdmin() external returns (uint256);\\n\\n\\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n\\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n\\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n\\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n}\\n\\ninterface ICTokenErc20 is ICToken {\\n\\t/*** User Interface ***/\\n\\n\\tfunction mint(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeem(uint256 redeemTokens) external returns (uint256);\\n\\n\\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n\\tfunction borrow(uint256 borrowAmount) external returns (uint256);\\n\\n\\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n\\tfunction liquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tICToken cTokenCollateral\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ninterface ICTokenBase is ICToken {\\n\\tfunction repayBorrow() external payable;\\n}\\n\",\"keccak256\":\"0x5d52d672a981f9079cbf11da004d6a2acfd02e0ddaebed7bdb0229b0751a0f2c\",\"license\":\"MIT\"},\"src/interfaces/compound/IClaimReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract IClaimReward {\\n\\tfunction claimReward(uint8 rewardType, address payable holder) external virtual;\\n}\\n\",\"keccak256\":\"0x472a25a459f59f908263c67723a215d9e9a87daead77fb2197499e05951b31a7\",\"license\":\"MIT\"},\"src/interfaces/compound/ICompPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface ICompPriceOracle {\\n\\tfunction isPriceOracle() external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Get the underlying price of a cToken asset\\n\\t * @param cToken The cToken to get the underlying price of\\n\\t * @return The underlying asset price mantissa (scaled by 1e18).\\n\\t *  Zero means the price is unavailable.\\n\\t */\\n\\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8a2ba59e821b1e38feb0752c3948a9fb224975135e2751a829e43af0a34ceb2\",\"license\":\"MIT\"},\"src/interfaces/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface IComptroller {\\n\\t/*** Assets You Are In ***/\\n\\n\\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n\\tfunction exitMarket(address cToken) external returns (uint256);\\n\\n\\t/*** Policy Hooks ***/\\n\\n\\tfunction mintAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction mintVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount,\\n\\t\\tuint256 mintTokens\\n\\t) external;\\n\\n\\tfunction redeemAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction redeemVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemAmount,\\n\\t\\tuint256 redeemTokens\\n\\t) external;\\n\\n\\tfunction borrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction borrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external;\\n\\n\\tfunction repayBorrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction repayBorrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 borrowerIndex\\n\\t) external;\\n\\n\\tfunction liquidateBorrowAllowed(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction liquidateBorrowVerify(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction seizeAllowed(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction seizeVerify(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction transferAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction transferVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external;\\n\\n\\tfunction claimComp(address holder) external;\\n\\n\\tfunction claimComp(address holder, ICTokenErc20[] memory cTokens) external;\\n\\n\\t/*** Liquidity/Liquidation Calculations ***/\\n\\n\\tfunction liquidateCalculateSeizeTokens(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 repayAmount\\n\\t) external view returns (uint256, uint256);\\n}\\n\\ninterface UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Administrator for this contract\\n\\t */\\n\\t// address external admin;\\n\\tfunction admin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending administrator for this contract\\n\\t */\\n\\t// address external pendingAdmin;\\n\\tfunction pendingAdmin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Active brains of Unitroller\\n\\t */\\n\\t// address external comptrollerImplementation;\\n\\tfunction comptrollerImplementation() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending brains of Unitroller\\n\\t */\\n\\t// address external pendingComptrollerImplementation;\\n\\tfunction pendingComptrollerImplementation() external view returns (address);\\n}\\n\\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Oracle which gives the price of any given asset\\n\\t */\\n\\t// PriceOracle external oracle;\\n\\tfunction oracle() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n\\t */\\n\\t// uint external closeFactorMantissa;\\n\\tfunction closeFactorMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Multiplier representing the discount on collateral that a liquidator receives\\n\\t */\\n\\t// uint external liquidationIncentiveMantissa;\\n\\tfunction liquidationIncentiveMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n\\t */\\n\\t// uint external maxAssets;\\n\\tfunction maxAssets() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n\\t */\\n\\t// mapping(address => CToken[]) external accountAssets;\\n\\t// function accountAssets(address) external view returns (CToken[]);\\n}\\n\\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\\n\\tenum Version {\\n\\t\\tVANILLA,\\n\\t\\tCOLLATERALCAP,\\n\\t\\tWRAPPEDNATIVE\\n\\t}\\n\\n\\tstruct Market {\\n\\t\\tbool isListed;\\n\\t\\tuint256 collateralFactorMantissa;\\n\\t\\tmapping(address => bool) accountMembership;\\n\\t\\tbool isComped;\\n\\t\\t// Version version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Official mapping of cTokens -> Market metadata\\n\\t * @dev Used e.g. to determine if a market is supported\\n\\t */\\n\\tmapping(address => Market) public markets;\\n\\n\\t/**\\n\\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n\\t *  Actions which allow users to remove their own assets cannot be paused.\\n\\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n\\t */\\n\\t// address external pauseGuardian;\\n\\t// bool external _mintGuardianPaused;\\n\\t// bool external _borrowGuardianPaused;\\n\\t// bool external transferGuardianPaused;\\n\\t// bool external seizeGuardianPaused;\\n\\t// mapping(address => bool) external mintGuardianPaused;\\n\\t// mapping(address => bool) external borrowGuardianPaused;\\n}\\n\\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\\n\\t// struct CompMarketState {\\n\\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n\\t//     uint224 index;\\n\\t//     /// @notice The block number the index was last updated at\\n\\t//     uint32 block;\\n\\t// }\\n\\t// /// @notice A list of all markets\\n\\t// CToken[] external allMarkets;\\n\\t// /// @notice The rate at which the flywheel distributes COMP, per block\\n\\t// uint external compRate;\\n\\t// /// @notice The portion of compRate that each market currently receives\\n\\t// mapping(address => uint) external compSpeeds;\\n\\t// /// @notice The COMP market supply state for each market\\n\\t// mapping(address => CompMarketState) external compSupplyState;\\n\\t// /// @notice The COMP market borrow state for each market\\n\\t// mapping(address => CompMarketState) external compBorrowState;\\n\\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\\n\\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\\n\\t// /// @notice The COMP accrued but not yet transferred to each user\\n\\t// mapping(address => uint) external compAccrued;\\n}\\n\\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\\n\\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n\\t// address external borrowCapGuardian;\\n\\tfunction borrowCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n\\t// mapping(address => uint) external borrowCaps;\\n\\tfunction borrowCaps(address) external view virtual returns (uint256);\\n}\\n\\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\\n\\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n\\t// address external supplyCapGuardian;\\n\\tfunction supplyCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n\\t// mapping(address => uint) external supplyCaps;\\n\\tfunction supplyCaps(address) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb75b9cbb3528305eb369b2f899445e408caf8ff39740a597e1855b45307bca9b\",\"license\":\"MIT\"},\"src/interfaces/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ninterface InterestRateModel {\\n\\t/**\\n\\t * @dev Calculates the current borrow interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getBorrowRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Calculates the current supply interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @param reserveFactorMantissa The current reserve factor the market has\\n\\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getSupplyRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves,\\n\\t\\tuint256 reserveFactorMantissa\\n\\t) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3f76c6b4f915caae38ac10503a24a0d1340e5c11c231f2ec3ddee1467abf2b7\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingRewards is IERC20 {\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction lastTimeRewardApplicable() external view returns (uint256);\\n\\n\\tfunction rewardPerToken() external view returns (uint256);\\n\\n\\tfunction earned(address account) external view returns (uint256);\\n\\n\\tfunction getRewardForDuration() external view returns (uint256);\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction getReward() external;\\n\\n\\tfunction exit() external;\\n}\\n\\n// some farms use sushi interface\\ninterface IMasterChef {\\n\\t// depositing 0 amount will withdraw the rewards (harvest)\\n\\tfunction deposit(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n\\tfunction emergencyWithdraw(uint256 _pid) external;\\n\\n\\tfunction pendingTokens(uint256 _pid, address _user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\\ninterface IMiniChefV2 {\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount;\\n\\t\\tint256 rewardDebt;\\n\\t}\\n\\n\\tstruct PoolInfo {\\n\\t\\tuint128 accSushiPerShare;\\n\\t\\tuint64 lastRewardTime;\\n\\t\\tuint64 allocPoint;\\n\\t}\\n\\n\\tfunction poolLength() external view returns (uint256);\\n\\n\\tfunction updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, int256);\\n\\n\\tfunction deposit(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction harvest(uint256 pid, address to) external;\\n\\n\\tfunction withdrawAndHarvest(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\",\"keccak256\":\"0xb3af591d4edcb774b34747a5e934c9c601ec902cf51511a64a0a3689dcb1d5c3\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n\\tfunction allPairs(uint256) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint256);\\n\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x48a3839730f960481776a854d55dc88fa552449d9315666a7cfde761bc82b690\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint256 amount0In,\\n\\t\\tuint256 amount1In,\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x470c1baab8c55bd27a70973466fab6749f87142276c9918e92c78b52a7d6489f\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountA,\\n\\t\\t\\tuint256 amountB,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountToken,\\n\\t\\t\\tuint256 amountETH,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xd24bbe40b021ae665a6e40cca7d268485ee30619caaf5752626ebf6cd445f838\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction balanceOf(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617dcb6501c8c2ad665f925a2a469ffb6c82b78a73083503b009d5a4f95f0cb\",\"license\":\"MIT\"},\"src/libraries/SafeETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nlibrary SafeETH {\\n\\tfunction safeTransferETH(address to, uint256 amount) internal {\\n\\t\\tbool callStatus;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// Transfer the ETH and store if it succeeded or not.\\n\\t\\t\\tcallStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n\\t\\t}\\n\\n\\t\\trequire(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9ea4cc64007cea62165410b6e0fa91f59b375c7e04e934a40dca7e6553acd02\",\"license\":\"AGPL-3.0-only\"},\"src/libraries/UniUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router01.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary UniUtils {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction _getPairTokens(IUniswapV2Pair pair) internal view returns (address, address) {\\n\\t\\treturn (pair.token0(), pair.token1());\\n\\t}\\n\\n\\tfunction _getPairReserves(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(address token0, ) = _sortTokens(tokenA, tokenB);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\t\\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\\n\\tfunction _quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) internal pure returns (uint256 amountB) {\\n\\t\\trequire(amountA > 0, \\\"UniUtils: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(reserveA > 0 && reserveB > 0, \\\"UniUtils: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tamountB = (amountA * reserveB) / reserveA;\\n\\t}\\n\\n\\tfunction _sortTokens(address tokenA, address tokenB)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (address token0, address token1)\\n\\t{\\n\\t\\trequire(tokenA != tokenB, \\\"UniUtils: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"UniUtils: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\tfunction _getAmountOut(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"UniUtils: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 amountInWithFee = amountIn * 997;\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\tfunction _getAmountIn(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 numerator = reserveIn * amountOut * 1000;\\n\\t\\tuint256 denominator = (reserveOut - amountOut) * 997;\\n\\t\\tamountIn = (numerator / denominator) + 1;\\n\\t}\\n\\n\\tfunction _swapExactTokensForTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 amountOut = _getAmountOut(pair, amountIn, inToken, outToken);\\n\\t\\t(address token0, ) = _sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\tfunction _swapTokensForExactTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 amountIn = _getAmountIn(pair, amountOut, inToken, outToken);\\n\\t\\t(address token0, ) = _sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountIn;\\n\\t}\\n\\n\\tfunction _swapTokensForExactTokensFlash(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken,\\n\\t\\tbytes memory data\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 amountIn = _getAmountIn(pair, amountOut, inToken, outToken);\\n\\t\\t(address token0, ) = _sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\t// IERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), data);\\n\\t\\treturn amountIn;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0e8ba74bdc3c6e08bc1031ccf24a53b52efc1b6d6592569ab04c024a77841e7e\",\"license\":\"MIT\"},\"src/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/Strategy.sol\\\";\\nimport \\\"../libraries/SafeETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseStrategy is Strategy, Ownable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tmodifier onlyVault() {\\n\\t\\trequire(msg.sender == vault(), \\\"Strat: ONLY_VAULT\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAuth() {\\n\\t\\trequire(msg.sender == owner() || _managers[msg.sender] == true, \\\"Strat: NO_AUTH\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tuint256 constant BPS_ADJUST = 10000;\\n\\tuint256 public lastHarvest; // block.timestamp;\\n\\taddress private _vault;\\n\\tuint256 private _shares;\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\n\\tmapping(address => bool) private _managers;\\n\\n\\tuint256 public BASE_UNIT; // 10 ** decimals\\n\\n\\tevent Harvest(uint256 harvested); // this is actual the tvl before harvest\\n\\tevent Deposit(address sender, uint256 amount);\\n\\tevent Withdraw(address sender, uint256 amount);\\n\\tevent Rebalance(uint256 shortPrice, uint256 tvlBeforeRebalance, uint256 positionOffset);\\n\\tevent EmergencyWithdraw(address indexed recipient, IERC20[] tokens);\\n\\tevent ManagerUpdate(address indexed account, bool isManager);\\n\\tevent VaultUpdate(address indexed vault);\\n\\n\\tconstructor(\\n\\t\\taddress vault_,\\n\\t\\tstring memory symbol_,\\n\\t\\tstring memory name_\\n\\t) Ownable() ReentrancyGuard() {\\n\\t\\t_vault = vault_;\\n\\t\\tsymbol = symbol_;\\n\\t\\tname = name_;\\n\\t}\\n\\n\\t// VIEW\\n\\tfunction vault() public view returns (address) {\\n\\t\\treturn _vault;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _shares;\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Returns the share price of the strategy in `underlying` units, multiplied\\n\\t *  by 1e18\\n\\t */\\n\\tfunction getPricePerShare() public view returns (uint256) {\\n\\t\\tuint256 bal = balanceOfUnderlying();\\n\\t\\tif (_shares == 0) return BASE_UNIT;\\n\\t\\treturn (bal * BASE_UNIT) / _shares;\\n\\t}\\n\\n\\tfunction balanceOfUnderlying(address) public view virtual override returns (uint256) {\\n\\t\\treturn balanceOfUnderlying();\\n\\t}\\n\\n\\tfunction balanceOfUnderlying() public view virtual returns (uint256);\\n\\n\\t// PUBLIC METHODS\\n\\tfunction mint(uint256 amount) external onlyVault returns (uint256 errCode) {\\n\\t\\tuint256 newShares = _deposit(amount);\\n\\t\\t_shares += newShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\tfunction redeemUnderlying(uint256 amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyVault\\n\\t\\treturns (uint256 errCode)\\n\\t{\\n\\t\\tuint256 burnShares = _withdraw(amount);\\n\\t\\t_shares -= burnShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\t// GOVERNANCE - MANAGER\\n\\tfunction isManager(address user) public view returns (bool) {\\n\\t\\treturn _managers[user];\\n\\t}\\n\\n\\tfunction setManager(address user, bool _isManager) external onlyOwner {\\n\\t\\t_managers[user] = _isManager;\\n\\t\\temit ManagerUpdate(user, _isManager);\\n\\t}\\n\\n\\tfunction setVault(address vault_) external onlyOwner {\\n\\t\\t_vault = vault_;\\n\\t\\temit VaultUpdate(vault_);\\n\\t}\\n\\n\\t// emergency only\\n\\t// closePosition should be attempted first, if after some tokens are stuck,\\n\\t// send them to a designated address\\n\\tfunction emergencyWithdraw(address recipient, IERC20[] calldata tokens)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyVault\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < tokens.length; i++) {\\n\\t\\t\\tIERC20 token = tokens[i];\\n\\t\\t\\tuint256 balance = token.balanceOf(address(this));\\n\\t\\t\\tif (balance != 0) token.safeTransfer(recipient, balance);\\n\\t\\t}\\n\\t\\t// send ETH to vault (no reason it should go to recipient / owner)\\n\\t\\tif (address(this).balance > 0) SafeETH.safeTransferETH(vault(), address(this).balance);\\n\\t\\temit EmergencyWithdraw(recipient, tokens);\\n\\t}\\n\\n\\tfunction _deposit(uint256 amount) internal virtual returns (uint256 newShares);\\n\\n\\tfunction _withdraw(uint256 amount) internal virtual returns (uint256 burnShares);\\n\\n\\tfunction isCEther() public pure override returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x9041672d8fb7478dddcf538197dfa602bb6b0dbe6d684183dea987ead6f88ce3\",\"license\":\"MIT\"},\"src/strategies/HedgedLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./mixins/IBase.sol\\\";\\nimport \\\"./mixins/ILending.sol\\\";\\nimport \\\"./mixins/IFarmableLp.sol\\\";\\nimport \\\"./mixins/IUniLp.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n// @custom: alphabetize dependencies to avoid linearization conflicts\\nabstract contract HedgedLP is IBase, BaseStrategy, ILending, IFarmableLp, IUniLp {\\n\\tusing UniUtils for IUniswapV2Pair;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tevent RebalanceLoan(address indexed sender, uint256 startLoanHealth, uint256 updatedLoanHealth);\\n\\tevent setMinLoanHealth(uint256 loanHealth);\\n\\tevent SetMaxPriceMismatch(uint256 loanHealth);\\n\\tevent SetRebalanceThreshold(uint256 loanHealth);\\n\\tevent SetMaxTvl(uint256 loanHealth);\\n\\tevent SetSafeCollateralRaio(uint256 collateralRatio);\\n\\n\\tuint256 constant MINIMUM_LIQUIDITY = 1000;\\n\\n\\tIERC20 private _underlying;\\n\\tIERC20 private _short;\\n\\n\\tuint256 public maxPriceMismatch = 100; // 1%\\n\\tuint256 constant maxAllowedMismatch = 300; // manager cannot make price mismatch more than 3%\\n\\tuint256 public minLoanHealth = 1.15e18; // how close to liquidation we get\\n\\n\\tuint16 public rebalanceThreshold = 400; // 4% of lp\\n\\n\\tuint256 private _maxTvl;\\n\\tuint256 private _safeCollateralRatio = 8000; // 80%\\n\\n\\tuint256 public constant version = 1;\\n\\n\\tmodifier checkPrice(uint256 maxSlippage) {\\n\\t\\tif (maxSlippage == 0) maxSlippage = maxPriceMismatch;\\n\\t\\trequire(getPriceOffset() <= maxSlippage, \\\"HLP: PRICE_MISMATCH\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction __HedgedLP_init_(\\n\\t\\taddress underlying_,\\n\\t\\taddress short_,\\n\\t\\tuint256 maxTvl_\\n\\t) internal initializer {\\n\\t\\t_underlying = IERC20(underlying_);\\n\\t\\t_short = IERC20(short_);\\n\\n\\t\\t_underlying.safeApprove(address(this), type(uint256).max);\\n\\n\\t\\tBASE_UNIT = 10**decimals();\\n\\n\\t\\t// init params\\n\\t\\tsetMaxTvl(maxTvl_);\\n\\n\\t\\t// emit default settings events\\n\\t\\temit setMinLoanHealth(minLoanHealth);\\n\\t\\temit SetMaxPriceMismatch(maxPriceMismatch);\\n\\t\\temit SetRebalanceThreshold(rebalanceThreshold);\\n\\t\\temit SetSafeCollateralRaio(_safeCollateralRatio);\\n\\n\\t\\t// TODO should we add a revoke aprovals methods?\\n\\t\\t_addLendingApprovals();\\n\\t\\t_addFarmApprovals();\\n\\n\\t\\tisInitialized = true;\\n\\t}\\n\\n\\tfunction safeCollateralRatio() public view override returns (uint256) {\\n\\t\\treturn _safeCollateralRatio;\\n\\t}\\n\\n\\tfunction setSafeCollateralRatio(uint256 safeCollateralRatio_) public onlyOwner {\\n\\t\\t_safeCollateralRatio = safeCollateralRatio_;\\n\\t\\temit SetSafeCollateralRaio(safeCollateralRatio_);\\n\\t}\\n\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn IERC20Metadata(address(_underlying)).decimals();\\n\\t}\\n\\n\\t// OWNER CONFIG\\n\\tfunction setMinLoanHeath(uint256 minLoanHealth_) public onlyOwner {\\n\\t\\tminLoanHealth = minLoanHealth_;\\n\\t\\temit setMinLoanHealth(minLoanHealth_);\\n\\t}\\n\\n\\t// manager can adjust max price if needed\\n\\tfunction setMaxPriceMismatch(uint256 maxPriceMismatch_) public onlyAuth {\\n\\t\\trequire(msg.sender == owner() || maxAllowedMismatch >= maxPriceMismatch_, \\\"HLP: TOO LARGE\\\");\\n\\t\\tmaxPriceMismatch = maxPriceMismatch_;\\n\\t\\temit SetMaxPriceMismatch(maxPriceMismatch_);\\n\\t}\\n\\n\\tfunction setRebalanceThreshold(uint16 rebalanceThreshold_) public onlyOwner {\\n\\t\\trebalanceThreshold = rebalanceThreshold_;\\n\\t\\temit SetRebalanceThreshold(rebalanceThreshold_);\\n\\t}\\n\\n\\tfunction setMaxTvl(uint256 maxTvl_) public onlyAuth {\\n\\t\\t_maxTvl = maxTvl_;\\n\\t\\temit SetMaxTvl(maxTvl_);\\n\\t}\\n\\n\\t// PUBLIC METHODS\\n\\n\\tfunction short() public view override returns (IERC20) {\\n\\t\\treturn _short;\\n\\t}\\n\\n\\tfunction underlying() public view override returns (IERC20) {\\n\\t\\treturn _underlying;\\n\\t}\\n\\n\\t// public method that anyone can call to prevent an immenent loan liquidation\\n\\t// this is an emergency measure in case rebalance() is not called in time\\n\\t// price check is not necessary here because we are only removing LP and\\n\\t// if swap price differs it is to our benefit\\n\\tfunction rebalanceLoan() public nonReentrant {\\n\\t\\tuint256 _loanHealth = loanHealth();\\n\\t\\trequire(_loanHealth <= minLoanHealth, \\\"HLP: SAFE\\\");\\n\\t\\t_rebalanceLoan(_loanHealth);\\n\\t}\\n\\n\\tfunction _rebalanceLoan(uint256 _loanHealth) internal {\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 collateral = _getCollateralBalance();\\n\\n\\t\\t// get back to our target _safeCollateralRatio\\n\\t\\tuint256 targetHealth = (10000 * 1e18) / _safeCollateralRatio;\\n\\t\\tuint256 addCollateral = (1e18 * ((collateral * targetHealth) / _loanHealth - collateral)) /\\n\\t\\t\\t((targetHealth * 1e18) / _getCollateralFactor() + 1e18);\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 underlyingBalance, uint256 shortBalance) = _decreaseLpTo(\\n\\t\\t\\tunderlyingLp - addCollateral\\n\\t\\t);\\n\\n\\t\\t_repay(shortBalance);\\n\\t\\t_lend(underlyingBalance);\\n\\t\\temit RebalanceLoan(msg.sender, _loanHealth, loanHealth());\\n\\t}\\n\\n\\tfunction _deposit(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice(0)\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 newShares)\\n\\t{\\n\\t\\tif (amount <= 0) return 0; // cannot deposit 0\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\trequire(amount + tvl <= getMaxTvl(), \\\"HLP: OVER_MAX_TVL\\\");\\n\\t\\tnewShares = totalSupply() == 0 ? amount : (totalSupply() * amount) / tvl;\\n\\t\\t_underlying.safeTransferFrom(vault(), address(this), amount);\\n\\t\\t_increasePosition(amount);\\n\\t\\temit Deposit(msg.sender, amount);\\n\\t}\\n\\n\\tfunction _withdraw(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice(0)\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 burnShares)\\n\\t{\\n\\t\\tif (amount == 0) return 0;\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tif (tvl == 0) return 0;\\n\\n\\t\\tuint256 reserves = _underlying.balanceOf(address(this));\\n\\n\\t\\t// if we can not withdraw straight out of reserves\\n\\t\\tif (amount > reserves) {\\n\\t\\t\\t// decrease current position\\n\\t\\t\\treserves = _decreasePosition(amount - reserves, reserves, tvl);\\n\\n\\t\\t\\t// use the minimum of underlying balance and requested amount\\n\\t\\t\\tamount = min(reserves, amount);\\n\\t\\t}\\n\\n\\t\\t// grab current tvl to account for fees and slippage\\n\\t\\t(tvl, , , , , ) = getTVL();\\n\\n\\t\\t// round up to keep price precision and leave less dust\\n\\t\\tburnShares = min(((amount + 1) * totalSupply()) / tvl, totalSupply());\\n\\n\\t\\t_underlying.safeTransferFrom(address(this), vault(), amount);\\n\\n\\t\\temit Withdraw(msg.sender, amount);\\n\\t}\\n\\n\\t// decreases position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\t// ** may return slighly less than desired amount\\n\\t// ** make sure to update lending positions before calling this\\n\\t// we use the inflated amntWithBuffer to withdraw lp\\n\\t// and the smaller withdrawAmnt to withdraw collateral, so that we\\n\\t// err on the side of adding more collateral\\n\\tfunction _decreasePosition(\\n\\t\\tuint256 withdrawAmnt,\\n\\t\\tuint256 reserves,\\n\\t\\tuint256 tvl\\n\\t) internal returns (uint256) {\\n\\t\\t// add .5% to withdraw to boost collateral just in case its low\\n\\t\\tuint256 amntWithBuffer = (withdrawAmnt * 1005) / 1000;\\n\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 removeLpAmnt = (amntWithBuffer * underlyingLp) / (tvl);\\n\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\t\\tuint256 removeShortLp = _underlyingToShort(removeLpAmnt);\\n\\n\\t\\tif (removeLpAmnt >= underlyingLp || removeShortLp >= shortPosition) return _closePosition();\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 availableUnderlying, uint256 shortBalance) = _decreaseLpTo(\\n\\t\\t\\tunderlyingLp - removeLpAmnt\\n\\t\\t);\\n\\n\\t\\t_repay(shortBalance);\\n\\n\\t\\t// this might remove less collateral than desired if we hit the loan health limit\\n\\t\\t// this can happen when we are close to closing the position\\n\\t\\tif (withdrawAmnt > availableUnderlying)\\n\\t\\t\\tavailableUnderlying += _removeCollateral(withdrawAmnt - availableUnderlying);\\n\\n\\t\\t// ensure we don't fall below loan health limit (this should not normally happen)\\n\\t\\tuint256 _loanHealth = loanHealth();\\n\\t\\tif (_loanHealth <= minLoanHealth) _rebalanceLoan(_loanHealth);\\n\\t\\treturn availableUnderlying + reserves;\\n\\t}\\n\\n\\t// increases the position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\tfunction _increasePosition(uint256 amount) internal {\\n\\t\\tif (amount < MINIMUM_LIQUIDITY) return; // avoid imprecision\\n\\t\\tuint256 amntUnderlying = _totalToLp(amount);\\n\\t\\tuint256 amntShort = _underlyingToShort(amntUnderlying);\\n\\t\\t_lend(amount - amntUnderlying);\\n\\t\\t_borrow(amntShort);\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\t// use the return of the function to estimate pending harvest via staticCall\\n\\tfunction harvest(\\n\\t\\tHarvestSwapParms[] calldata uniParams,\\n\\t\\tHarvestSwapParms[] calldata lendingParams\\n\\t)\\n\\t\\texternal\\n\\t\\tonlyAuth\\n\\t\\tcheckPrice(0)\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256[] memory farmHarvest, uint256[] memory lendHarvest)\\n\\t{\\n\\t\\t(uint256 startTvl, , , , , ) = getTVL();\\n\\t\\tif (uniParams.length != 0) farmHarvest = _harvestFarm(uniParams);\\n\\t\\tif (lendingParams.length != 0) lendHarvest = _harvestLending(lendingParams);\\n\\n\\t\\t// compound our lp position\\n\\t\\t_increasePosition(underlying().balanceOf(address(this)));\\n\\t\\temit Harvest(startTvl);\\n\\t}\\n\\n\\tfunction rebalance(uint256 maxSlippage) external onlyAuth checkPrice(maxSlippage) nonReentrant {\\n\\t\\t// call this first to ensure we use an updated borrowBalance when computing offset\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 positionOffset = getPositionOffset();\\n\\n\\t\\t// don't rebalance unless we exceeded the threshold\\n\\t\\trequire(positionOffset > rebalanceThreshold, \\\"HLP: REB-THRESH\\\"); // maybe next time...\\n\\n\\t\\tif (tvl == 0) return;\\n\\t\\tuint256 targetUnderlyingLP = _totalToLp(tvl);\\n\\n\\t\\t// add .1% room for fees\\n\\t\\t_rebalancePosition((targetUnderlyingLP * 999) / 1000, tvl - targetUnderlyingLP);\\n\\t\\temit Rebalance(_shortToUnderlying(1e18), positionOffset, tvl);\\n\\t}\\n\\n\\t// note: one should call harvest immediately before close position\\n\\tfunction closePosition(uint256 maxSlippage) public checkPrice(maxSlippage) onlyAuth {\\n\\t\\t_closePosition();\\n\\t}\\n\\n\\t// in case of emergency - withdraw lp tokens from farm\\n\\tfunction withdrawFromFarm() public onlyAuth {\\n\\t\\t_withdrawFromFarm(_getFarmLp());\\n\\t}\\n\\n\\t// in case of emergency - withdraw stuck collateral\\n\\tfunction redeemCollateral(uint256 repayAmnt, uint256 withdrawAmnt) public onlyAuth {\\n\\t\\t_repay(repayAmnt);\\n\\t\\t_redeem(withdrawAmnt);\\n\\t}\\n\\n\\t// in case of emergency - remove LP\\n\\tfunction removeLiquidity(uint256 removeLp) public onlyAuth {\\n\\t\\t_removeLiquidity(removeLp);\\n\\t}\\n\\n\\tfunction _closePosition() internal returns (uint256) {\\n\\t\\t_decreaseLpTo(0);\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\t\\tif (shortPosition > shortBalance) {\\n\\t\\t\\tpair()._swapTokensForExactTokens(\\n\\t\\t\\t\\tshortPosition - shortBalance,\\n\\t\\t\\t\\taddress(_underlying),\\n\\t\\t\\t\\taddress(_short)\\n\\t\\t\\t);\\n\\t\\t} else if (shortBalance > shortPosition) {\\n\\t\\t\\tpair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tshortBalance - shortPosition,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_underlying)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_repay(_short.balanceOf(address(this)));\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\t_redeem(collateralBalance);\\n\\t\\treturn _underlying.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction _decreaseLpTo(uint256 targetUnderlyingLP)\\n\\t\\tinternal\\n\\t\\treturns (uint256 underlyingRemove, uint256 shortRemove)\\n\\t{\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tif (targetUnderlyingLP >= underlyingLp) return (0, 0); // nothing to withdraw\\n\\t\\tuint256 liquidity = _getLiquidity();\\n\\t\\tuint256 targetLiquidity = (liquidity * targetUnderlyingLP) / underlyingLp;\\n\\t\\tuint256 removeLp = liquidity - targetLiquidity;\\n\\t\\tuint256 liquidityBalance = pair().balanceOf(address(this));\\n\\t\\tif (removeLp > liquidityBalance) _withdrawFromFarm(removeLp - liquidityBalance);\\n\\t\\treturn removeLp == 0 ? (0, 0) : _removeLiquidity(removeLp);\\n\\t}\\n\\n\\tfunction _rebalancePosition(uint256 targetUnderlyingLP, uint256 targetCollateral) internal {\\n\\t\\tuint256 targetBorrow = _underlyingToShort(targetUnderlyingLP);\\n\\t\\t// we already updated tvl\\n\\t\\tuint256 currentBorrow = _getBorrowBalance();\\n\\n\\t\\t// borrow funds or repay loan\\n\\t\\tif (targetBorrow > currentBorrow) {\\n\\t\\t\\t// remove extra lp (we may need to remove more in order to add more collateral)\\n\\t\\t\\t_decreaseLpTo(\\n\\t\\t\\t\\t_needUnderlying(targetUnderlyingLP, targetCollateral) > 0 ? 0 : targetUnderlyingLP\\n\\t\\t\\t);\\n\\t\\t\\t// add collateral\\n\\t\\t\\t_adjustCollateral(targetCollateral);\\n\\t\\t\\t_borrow(targetBorrow - currentBorrow);\\n\\t\\t} else if (targetBorrow < currentBorrow) {\\n\\t\\t\\t// remove all of lp so we can repay loan\\n\\t\\t\\t_decreaseLpTo(0);\\n\\t\\t\\tuint256 repayAmnt = min(_short.balanceOf(address(this)), currentBorrow - targetBorrow);\\n\\t\\t\\tif (repayAmnt > 0) _repay(repayAmnt);\\n\\t\\t\\t// remove extra collateral\\n\\t\\t\\t_adjustCollateral(targetCollateral);\\n\\t\\t}\\n\\t\\t_increaseLpPosition(targetBorrow);\\n\\t}\\n\\n\\t///////////////////////////\\n\\t//// INCREASE LP POSITION\\n\\t///////////////////////\\n\\tfunction _increaseLpPosition(uint256 targetBorrow) internal {\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\n\\t\\t// here we make sure we don't add extra lp\\n\\t\\t(, uint256 shortLP) = _getLPBalances();\\n\\n\\t\\tif (targetBorrow < shortLP) return;\\n\\n\\t\\tuint256 addShort = min(\\n\\t\\t\\t(shortBalance + _underlyingToShort(underlyingBalance)) / 2,\\n\\t\\t\\ttargetBorrow - shortLP\\n\\t\\t);\\n\\n\\t\\tuint256 addUnderlying = _shortToUnderlying(addShort);\\n\\n\\t\\t// buy or sell underlying\\n\\t\\tif (addUnderlying < underlyingBalance) {\\n\\t\\t\\tshortBalance += pair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tunderlyingBalance - addUnderlying,\\n\\t\\t\\t\\taddress(_underlying),\\n\\t\\t\\t\\taddress(_short)\\n\\t\\t\\t);\\n\\t\\t\\tunderlyingBalance = addUnderlying;\\n\\t\\t} else if (shortBalance > addShort) {\\n\\t\\t\\t// swap extra tokens back (this may end up using more gas)\\n\\t\\t\\tunderlyingBalance += pair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tshortBalance - addShort,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_underlying)\\n\\t\\t\\t);\\n\\t\\t\\tshortBalance = addShort;\\n\\t\\t}\\n\\n\\t\\t// compute final lp amounts\\n\\t\\tuint256 amntShort = shortBalance;\\n\\t\\tuint256 amntUnderlying = _shortToUnderlying(amntShort);\\n\\t\\tif (underlyingBalance < amntUnderlying) {\\n\\t\\t\\tamntUnderlying = underlyingBalance;\\n\\t\\t\\tamntShort = _underlyingToShort(amntUnderlying);\\n\\t\\t}\\n\\n\\t\\tif (amntUnderlying == 0) return;\\n\\n\\t\\t// add liquidity\\n\\t\\t// don't need to use min with underlying and short because we did oracle check\\n\\t\\t// amounts are exact because we used swap price above\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\tfunction _needUnderlying(uint256 tragetUnderlying, uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (targetCollateral < collateralBalance) return 0;\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 uBalance = tragetUnderlying > underlyingLp ? tragetUnderlying - underlyingLp : 0;\\n\\t\\tuint256 addCollateral = targetCollateral - collateralBalance;\\n\\t\\tif (uBalance >= addCollateral) return 0;\\n\\t\\treturn addCollateral - uBalance;\\n\\t}\\n\\n\\t// TVL\\n\\n\\tfunction getMaxTvl() public view override returns (uint256) {\\n\\t\\t// _borrowToTotal(_maxBorrow) would give us the precise max,\\n\\t\\t// but we want to stay at least a getCollateralRatio away from max borrow\\n\\t\\treturn min(_maxTvl, _oraclePriceOfShort(_maxBorrow() + _getBorrowBalance()));\\n\\t}\\n\\n\\t// TODO should we compute pending farm & lending rewards here?\\n\\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 borrowBalance = _shortToUnderlying(shortPosition);\\n\\t\\tuint256 shortP = _short.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = shortP == 0 ? 0 : _shortToUnderlying(shortP);\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\ttvl =\\n\\t\\t\\tcollateralBalance +\\n\\t\\t\\tunderlyingLp *\\n\\t\\t\\t2 -\\n\\t\\t\\tborrowBalance +\\n\\t\\t\\tunderlyingBalance +\\n\\t\\t\\tshortBalance;\\n\\t}\\n\\n\\t// We can include a checkPrice(0) here for extra security\\n\\t// but it's not necessary with latestvault updates\\n\\tfunction balanceOfUnderlying() public view override returns (uint256 assets) {\\n\\t\\t(assets, , , , , ) = getTVL();\\n\\t}\\n\\n\\tfunction getTotalTVL() public view returns (uint256 tvl) {\\n\\t\\t(tvl, , , , , ) = getTVL();\\n\\t}\\n\\n\\tfunction getTVL()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 tvl,\\n\\t\\t\\tuint256 collateralBalance,\\n\\t\\t\\tuint256 borrowPosition,\\n\\t\\t\\tuint256 borrowBalance,\\n\\t\\t\\tuint256 lpBalance,\\n\\t\\t\\tuint256 underlyingBalance\\n\\t\\t)\\n\\t{\\n\\t\\tcollateralBalance = _getCollateralBalance();\\n\\t\\tborrowPosition = _getBorrowBalance();\\n\\t\\tborrowBalance = _shortToUnderlying(borrowPosition);\\n\\n\\t\\tuint256 shortPosition = _short.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = shortPosition == 0 ? 0 : _shortToUnderlying(shortPosition);\\n\\n\\t\\t(uint256 underlyingLp, uint256 shortLp) = _getLPBalances();\\n\\t\\tlpBalance = underlyingLp + _shortToUnderlying(shortLp);\\n\\n\\t\\tunderlyingBalance = _underlying.balanceOf(address(this));\\n\\n\\t\\ttvl = collateralBalance + lpBalance - borrowBalance + underlyingBalance + shortBalance;\\n\\t}\\n\\n\\tfunction getPositionOffset() public view returns (uint256 positionOffset) {\\n\\t\\t(, uint256 shortLp) = _getLPBalances();\\n\\t\\tuint256 borrowBalance = _getBorrowBalance();\\n\\t\\tuint256 shortBalance = shortLp + _short.balanceOf(address(this));\\n\\n\\t\\tif (shortBalance == borrowBalance) return 0;\\n\\t\\t// if short lp > 0 and borrowBalance is 0 we are off by inf, returning 100% should be enough\\n\\t\\tif (borrowBalance == 0) return 10000;\\n\\n\\t\\t// this is the % by which our position has moved from beeing balanced\\n\\t\\tpositionOffset = shortBalance > borrowBalance\\n\\t\\t\\t? ((shortBalance - borrowBalance) * BPS_ADJUST) / borrowBalance\\n\\t\\t\\t: ((borrowBalance - shortBalance) * BPS_ADJUST) / borrowBalance;\\n\\t}\\n\\n\\tfunction getPriceOffset() public view returns (uint256 offset) {\\n\\t\\tuint256 minPrice = _shortToUnderlying(1e18);\\n\\t\\tuint256 maxPrice = _oraclePriceOfShort(1e18);\\n\\t\\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\\n\\t\\toffset = ((maxPrice - minPrice) * BPS_ADJUST) / maxPrice;\\n\\t}\\n\\n\\t// UTILS\\n\\n\\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\\n\\t}\\n\\n\\tfunction _borrowToTotal(uint256 amount) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (amount * (BPS_ADJUST + cRatio)) / cRatio;\\n\\t}\\n\\n\\t// this is the current uniswap price\\n\\tfunction _shortToUnderlying(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount == 0 ? 0 : _quote(amount, address(_short), address(_underlying));\\n\\t}\\n\\n\\t// this is the current uniswap price\\n\\tfunction _underlyingToShort(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount == 0 ? 0 : _quote(amount, address(_underlying), address(_short));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the smallest of two numbers.\\n\\t */\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd1cfd5f51648f4e8c30af6270910a3ff1cae723458098c3c8b5559e67fc24541\",\"license\":\"MIT\"},\"src/strategies/adapters/CompMultiFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/compound/IClaimReward.sol\\\";\\nimport \\\"./CompoundFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract CompMultiFarm is CompoundFarm {\\n\\t// BenQi has two two token rewards\\n\\t// pid 0 is Qi token and pid 1 is AVAX (not wrapped)\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t// farm token on id 0\\n\\t\\tIClaimReward(address(comptroller())).claimReward(0, payable(address(this)));\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\n\\t\\tif (harvested[0] > 0) {\\n\\t\\t\\t_swap(lendFarmRouter(), swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\t\\t}\\n\\n\\t\\t// base token rewards on id 1\\n\\t\\tIClaimReward(address(comptroller())).claimReward(1, payable(address(this)));\\n\\n\\t\\tuint256 avaxBalance = address(this).balance;\\n\\t\\tif (avaxBalance > 0) {\\n\\t\\t\\tIWETH(address(short())).deposit{ value: avaxBalance }();\\n\\t\\t\\temit HarvestedToken(address(short()), avaxBalance);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xb9868019c74dda9a887eb999a616878886b33f16f08faf3d9b4e1b8beacb8b7a\",\"license\":\"MIT\"},\"src/strategies/adapters/Compound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../mixins/ICompound.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract Compound is ICompound {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tICTokenErc20 private _cTokenLend;\\n\\tICTokenErc20 private _cTokenBorrow;\\n\\n\\tIComptroller private _comptroller;\\n\\tICompPriceOracle private _oracle;\\n\\n\\tfunction __Compound_init_(\\n\\t\\taddress comptroller_,\\n\\t\\taddress cTokenLend_,\\n\\t\\taddress cTokenBorrow_\\n\\t) internal {\\n\\t\\t_cTokenLend = ICTokenErc20(cTokenLend_);\\n\\t\\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\\n\\t\\t_comptroller = IComptroller(comptroller_);\\n\\t\\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\\n\\t\\t_enterMarket();\\n\\t}\\n\\n\\tfunction _addLendingApprovals() internal override {\\n\\t\\t// ensure USDC approval - assume we trust USDC\\n\\t\\tunderlying().safeApprove(address(_cTokenLend), type(uint256).max);\\n\\t\\tshort().safeApprove(address(_cTokenBorrow), type(uint256).max);\\n\\t}\\n\\n\\tfunction cTokenLend() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenLend;\\n\\t}\\n\\n\\tfunction cTokenBorrow() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenBorrow;\\n\\t}\\n\\n\\tfunction oracle() public view override returns (ICompPriceOracle) {\\n\\t\\treturn _oracle;\\n\\t}\\n\\n\\tfunction comptroller() public view override returns (IComptroller) {\\n\\t\\treturn _comptroller;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1b51eb195f2f132b509e25a13c76d12fb68c520235955ba8bfd9e89c5a8e687a\",\"license\":\"MIT\"},\"src/strategies/adapters/CompoundFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../mixins/ICompound.sol\\\";\\nimport \\\"../mixins/IFarmable.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract CompoundFarm is ICompound, IFarmable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIUniswapV2Router01 private _router; // use router here\\n\\tIERC20 _farmToken;\\n\\n\\tfunction __CompoundFarm_init_(address router_, address token_) internal initializer {\\n\\t\\t_farmToken = IERC20(token_);\\n\\t\\t_router = IUniswapV2Router01(router_);\\n\\t\\t_farmToken.safeApprove(address(_router), type(uint256).max);\\n\\t}\\n\\n\\tfunction lendFarmRouter() public view override returns (IUniswapV2Router01) {\\n\\t\\treturn _router;\\n\\t}\\n\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t// comp token rewards\\n\\t\\tICTokenErc20[] memory cTokens = new ICTokenErc20[](2);\\n\\t\\tcTokens[0] = cTokenLend();\\n\\t\\tcTokens[1] = cTokenBorrow();\\n\\t\\tcomptroller().claimComp(address(this), cTokens);\\n\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\t\\tif (harvested[0] == 0) return harvested;\\n\\n\\t\\tif (address(_router) != address(0))\\n\\t\\t\\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe94cf9a54154a345ec31ef68cebd07df0604f025a4e965efc30fb95c62c646fe\",\"license\":\"MIT\"},\"src/strategies/adapters/MasterChefFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IMasterChef } from \\\"../../interfaces/uniswap/IStakingRewards.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"../mixins/IFarmableLp.sol\\\";\\nimport \\\"../mixins/IUniLp.sol\\\";\\nimport \\\"../../interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract MasterChefFarm is IFarmableLp, IUniLp {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIMasterChef private _farm;\\n\\tIUniswapV2Router01 private _router;\\n\\tIERC20 private _farmToken;\\n\\tIUniswapV2Pair private _pair;\\n\\tuint256 private _farmId;\\n\\n\\tfunction __MasterChefFarm_init_(\\n\\t\\taddress pair_,\\n\\t\\taddress farm_,\\n\\t\\taddress router_,\\n\\t\\taddress farmToken_,\\n\\t\\tuint256 farmPid_\\n\\t) internal initializer {\\n\\t\\t_farm = IMasterChef(farm_);\\n\\t\\t_router = IUniswapV2Router01(router_);\\n\\t\\t_farmToken = IERC20(farmToken_);\\n\\t\\t_pair = IUniswapV2Pair(pair_);\\n\\t\\t_farmId = farmPid_;\\n\\t}\\n\\n\\t// assumption that _router and _farm are trusted\\n\\tfunction _addFarmApprovals() internal override {\\n\\t\\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\\n\\t\\tif (_farmToken.allowance(address(this), address(_router)) == 0)\\n\\t\\t\\t_farmToken.safeApprove(address(_router), type(uint256).max);\\n\\t}\\n\\n\\tfunction farmRouter() public view override returns (IUniswapV2Router01) {\\n\\t\\treturn _router;\\n\\t}\\n\\n\\tfunction pair() public view override returns (IUniswapV2Pair) {\\n\\t\\treturn _pair;\\n\\t}\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal override {\\n\\t\\t_farm.withdraw(_farmId, amount);\\n\\t}\\n\\n\\tfunction _depositIntoFarm(uint256 amount) internal override {\\n\\t\\t_farm.deposit(_farmId, amount);\\n\\t}\\n\\n\\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\taddress[] memory addresses;\\n\\t\\tuint256[] memory amounts;\\n\\n\\t\\t_farm.deposit(_farmId, 0);\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\t\\tif (harvested[0] == 0) return harvested;\\n\\n\\t\\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\n\\t\\t// additional chain token rewards\\n\\t\\tuint256 ethBalance = address(this).balance;\\n\\t\\tif (ethBalance > 0) {\\n\\t\\t\\tIWETH(address(short())).deposit{ value: ethBalance }();\\n\\t\\t\\temit HarvestedToken(address(short()), ethBalance);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getFarmLp() internal view override returns (uint256) {\\n\\t\\t(uint256 lp, ) = _farm.userInfo(_farmId, address(this));\\n\\t\\treturn lp;\\n\\t}\\n\\n\\tfunction _getLiquidity() internal view override returns (uint256) {\\n\\t\\tuint256 farmLp = _getFarmLp();\\n\\t\\tuint256 poolLp = _pair.balanceOf(address(this));\\n\\t\\treturn farmLp + poolLp;\\n\\t}\\n}\\n\",\"keccak256\":\"0xbb68c44067e1a6e662bcb63462645019e8b1efd989f2350e69650f59a68e0a87\",\"license\":\"MIT\"},\"src/strategies/implementations/USDCglmrSTELLAwell.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../HedgedLP.sol\\\";\\nimport \\\"../adapters/Compound.sol\\\";\\nimport \\\"../adapters/MasterChefFarm.sol\\\";\\nimport \\\"../adapters/CompMultiFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract USDCglmrSTELLAwell is HedgedLP, Compound, CompMultiFarm, MasterChefFarm {\\n\\t// HedgedLP should allways be intialized last\\n\\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\\n\\t\\t__MasterChefFarm_init_(\\n\\t\\t\\tconfig.uniPair,\\n\\t\\t\\tconfig.uniFarm,\\n\\t\\t\\tconfig.farmRouter,\\n\\t\\t\\tconfig.farmToken,\\n\\t\\t\\tconfig.farmId\\n\\t\\t);\\n\\n\\t\\t__Compound_init_(config.comptroller, config.cTokenLend, config.cTokenBorrow);\\n\\n\\t\\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\\n\\n\\t\\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\\n\\t}\\n\\n\\t// if borrow token is treated as ETH\\n\\tfunction _isBase(uint8) internal pure override(ICompound) returns (bool) {\\n\\t\\treturn true;\\n\\t}\\n}\\n\",\"keccak256\":\"0x8a4d266d8c1ace23efb1d825ce2bd9aae4d9aaa8f32445dc5ddf404ce696f92e\",\"license\":\"MIT\"},\"src/strategies/mixins/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct IMXConfig {\\n\\taddress underlying;\\n\\taddress short;\\n\\taddress uniPair;\\n\\taddress poolToken;\\n\\taddress farmToken;\\n\\tuint256 farmId;\\n\\taddress farmRouter;\\n\\taddress vault;\\n\\tstring symbol;\\n\\tstring name;\\n\\tuint256 maxTvl;\\n}\\n\\nstruct Config {\\n\\taddress underlying;\\n\\taddress short;\\n\\taddress cTokenLend;\\n\\taddress cTokenBorrow;\\n\\taddress uniPair;\\n\\taddress uniFarm;\\n\\taddress farmToken;\\n\\tuint256 farmId;\\n\\taddress farmRouter;\\n\\taddress comptroller;\\n\\taddress lendRewardRouter;\\n\\taddress lendRewardToken;\\n\\taddress vault;\\n\\tstring symbol;\\n\\tstring name;\\n\\tuint256 maxTvl;\\n}\\n\\n// all interfaces need to inherit from base\\nabstract contract IBase {\\n\\tbool public isInitialized;\\n\\n\\tmodifier initializer() {\\n\\t\\trequire(isInitialized == false, \\\"INITIALIZED\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction short() public view virtual returns (IERC20);\\n\\n\\tfunction underlying() public view virtual returns (IERC20);\\n}\\n\",\"keccak256\":\"0xcf057df9930c1148a8a5c67edbc7cb167d5223339609e8ec0b24ffdca6c45f3d\",\"license\":\"MIT\"},\"src/strategies/mixins/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../../interfaces/uniswap/IWETH.sol\\\";\\n\\nimport \\\"./ILending.sol\\\";\\nimport \\\"./IBase.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ICompound is ILending {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction cTokenLend() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction cTokenBorrow() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction oracle() public view virtual returns (ICompPriceOracle);\\n\\n\\tfunction comptroller() public view virtual returns (IComptroller);\\n\\n\\tfunction _enterMarket() internal {\\n\\t\\taddress[] memory cTokens = new address[](2);\\n\\t\\tcTokens[0] = address(cTokenLend());\\n\\t\\tcTokens[1] = address(cTokenBorrow());\\n\\t\\tcomptroller().enterMarkets(cTokens);\\n\\t}\\n\\n\\tfunction _getCollateralFactor() internal view override returns (uint256) {\\n\\t\\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(comptroller()))\\n\\t\\t\\t.markets(address(cTokenLend()));\\n\\t\\treturn collateralFactorMantissa;\\n\\t}\\n\\n\\t// TODO handle error\\n\\tfunction _redeem(uint256 amount) internal override {\\n\\t\\tuint256 err = cTokenLend().redeemUnderlying(amount);\\n\\t\\t// require(err == 0, \\\"Compund: error redeeming underlying\\\");\\n\\t}\\n\\n\\tfunction _borrow(uint256 amount) internal override {\\n\\t\\tcTokenBorrow().borrow(amount);\\n\\n\\t\\t// in case we need to wrap the tokens\\n\\t\\tif (_isBase(1)) IWETH(address(short())).deposit{ value: amount }();\\n\\t}\\n\\n\\tfunction _lend(uint256 amount) internal override {\\n\\t\\tcTokenLend().mint(amount);\\n\\t}\\n\\n\\tfunction _repay(uint256 amount) internal override {\\n\\t\\tif (_isBase(1)) {\\n\\t\\t\\t// need to convert to base first\\n\\t\\t\\tIWETH(address(short())).withdraw(amount);\\n\\n\\t\\t\\t// then repay in the base\\n\\t\\t\\t_repayBase(amount);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tcTokenBorrow().repayBorrow(amount);\\n\\t}\\n\\n\\tfunction _repayBase(uint256 amount) internal {\\n\\t\\tICTokenBase(address(cTokenBorrow())).repayBorrow{ value: amount }();\\n\\t}\\n\\n\\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenLend().balanceOfUnderlying(address(this));\\n\\t}\\n\\n\\tfunction _getCollateralBalance() internal view override returns (uint256) {\\n\\t\\tuint256 b = cTokenLend().balanceOf(address(this));\\n\\t\\treturn (b * cTokenLend().exchangeRateStored()) / 1e18;\\n\\t}\\n\\n\\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenBorrow().borrowBalanceCurrent(address(this));\\n\\t}\\n\\n\\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\\n\\t\\tshortBorrow = cTokenBorrow().borrowBalanceStored(address(this));\\n\\t}\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenBorrow()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenLend()));\\n\\t}\\n\\n\\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenLend()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenBorrow()));\\n\\t}\\n\\n\\tfunction _maxBorrow() internal view virtual override returns (uint256) {\\n\\t\\treturn cTokenBorrow().getCash();\\n\\t}\\n\\n\\t// returns true if either of the CTokens is cEth\\n\\t// index 0 = cTokenLend index 1 = cTokenBorrow\\n\\tfunction _isBase(uint8 index) internal virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0x2f3dcbd7344117e0e62158e80e66eb6b96c15dddc67462f984aefc73adc8190d\",\"license\":\"MIT\"},\"src/strategies/mixins/IFarmable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/uniswap/IUniswapV2Router01.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IBase.sol\\\";\\n\\nstruct HarvestSwapParms {\\n\\taddress[] path; //path that the token takes\\n\\tuint256 min; // min price of in token * 1e18 (computed externally based on spot * slippage + fees)\\n\\tuint256 deadline;\\n}\\n\\nabstract contract IFarmable is IBase {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tevent HarvestedToken(address indexed token, uint256 amount);\\n\\n\\tfunction _swap(\\n\\t\\tIUniswapV2Router01 router,\\n\\t\\tHarvestSwapParms calldata swapParams,\\n\\t\\taddress from,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\taddress out = swapParams.path[swapParams.path.length - 1];\\n\\t\\t// ensure malicious harvester is not trading with wrong tokens\\n\\t\\t// TODO should we add more validation to prevent malicious path?\\n\\t\\trequire(\\n\\t\\t\\t((swapParams.path[0] == address(from) && (out == address(short()))) ||\\n\\t\\t\\t\\tout == address(underlying())),\\n\\t\\t\\t\\\"IFarmable: WRONG_PATH\\\"\\n\\t\\t);\\n\\t\\trouter.swapExactTokensForTokens(\\n\\t\\t\\tamount,\\n\\t\\t\\tswapParams.min,\\n\\t\\t\\tswapParams.path, // optimal route determined externally\\n\\t\\t\\taddress(this),\\n\\t\\t\\tswapParams.deadline\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb89c15fd0c2311f85edad2747052a49218617e9ab87e4d15c1ee3ab8dee079b4\",\"license\":\"MIT\"},\"src/strategies/mixins/IFarmableLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IFarmable.sol\\\";\\n\\nabstract contract IFarmableLp is IFarmable {\\n\\tfunction _depositIntoFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory);\\n\\n\\tfunction _getFarmLp() internal view virtual returns (uint256);\\n\\n\\tfunction _addFarmApprovals() internal virtual;\\n\\n\\tfunction farmRouter() public view virtual returns (IUniswapV2Router01);\\n}\\n\",\"keccak256\":\"0xfcc5d307b381543cf70c4a03807e67ab2a8d89f8b16276dbe9fd4e0135e1abff\",\"license\":\"MIT\"},\"src/strategies/mixins/ILending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./IFarmable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ILending is IBase {\\n\\tfunction _addLendingApprovals() internal virtual;\\n\\n\\tfunction _getCollateralBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _getBorrowBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\\n\\n\\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\\n\\n\\tfunction _getCollateralFactor() internal view virtual returns (uint256);\\n\\n\\tfunction safeCollateralRatio() public view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _lend(uint256 amount) internal virtual;\\n\\n\\tfunction _redeem(uint256 amount) internal virtual;\\n\\n\\tfunction _borrow(uint256 amount) internal virtual;\\n\\n\\tfunction _repay(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory);\\n\\n\\tfunction lendFarmRouter() public view virtual returns (IUniswapV2Router01);\\n\\n\\tfunction getCollateralRatio() public view virtual returns (uint256) {\\n\\t\\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\\n\\t}\\n\\n\\t// returns loan health value which is collateralBalance / minCollateral\\n\\tfunction loanHealth() public view returns (uint256) {\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\tif (borrowValue == 0) return 100e18;\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tuint256 minCollateral = (borrowValue * 1e18) / _getCollateralFactor();\\n\\t\\treturn (1e18 * collateralBalance) / minCollateral;\\n\\t}\\n\\n\\tfunction _adjustCollateral(uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\treturns (uint256 added, uint256 removed)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (collateralBalance == targetCollateral) return (0, 0);\\n\\t\\t(added, removed) = collateralBalance > targetCollateral\\n\\t\\t\\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\\n\\t\\t\\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\\n\\t}\\n\\n\\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\\n\\t\\tuint256 maxRemove = _freeCollateral();\\n\\t\\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\\n\\t\\tif (removed > 0) _redeem(removed);\\n\\t}\\n\\n\\tfunction _freeCollateral() internal view returns (uint256) {\\n\\t\\tuint256 collateral = _getCollateralBalance();\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\t// stay within 1% of the liquidation threshold (this is allways temporary)\\n\\t\\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 99;\\n\\t\\tif (minCollateral > collateral) return 0;\\n\\t\\treturn collateral - minCollateral;\\n\\t}\\n\\n\\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\\n\\t\\tuint256 underlyingBalance = underlying().balanceOf(address(this));\\n\\t\\tadded = underlyingBalance > amountToAdd ? amountToAdd : underlyingBalance;\\n\\t\\tif (added != 0) _lend(added);\\n\\t}\\n\\n\\tfunction _maxBorrow() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xdd1cfc7cd9c0d98eaead8b01ed13b83e7f549d453ff0f779af7f2f5ce7bc193b\",\"license\":\"MIT\"},\"src/strategies/mixins/ILp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ILp {\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual returns (uint256 price);\\n\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 liquidity);\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256 underlyingBalance, uint256 shortBalance);\\n}\\n\",\"keccak256\":\"0x7417631b3f68397ad3f5cf464048adb071c35c0771c29d7c2637fe3ff192f180\",\"license\":\"MIT\"},\"src/strategies/mixins/IUniLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../../libraries/UniUtils.sol\\\";\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./ILp.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract IUniLp is IBase, ILp {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing UniUtils for IUniswapV2Pair;\\n\\n\\tfunction pair() public view virtual returns (IUniswapV2Pair);\\n\\n\\tfunction _getLiquidity() internal view virtual returns (uint256);\\n\\n\\t// should only be called after oracle or user-input swap price check\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256 liquidity)\\n\\t{\\n\\t\\tunderlying().safeTransfer(address(pair()), amountToken0);\\n\\t\\tshort().safeTransfer(address(pair()), amountToken1);\\n\\t\\tliquidity = pair().mint(address(this));\\n\\t}\\n\\n\\tfunction _removeLiquidity(uint256 liquidity)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256, uint256)\\n\\t{\\n\\t\\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\\n\\t\\t(address tokenA, ) = UniUtils._sortTokens(address(underlying()), address(short()));\\n\\t\\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\\n\\t\\treturn\\n\\t\\t\\ttokenA == address(underlying())\\n\\t\\t\\t\\t? (amountToken0, amountToken1)\\n\\t\\t\\t\\t: (amountToken1, amountToken0);\\n\\t}\\n\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual override returns (uint256 price) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t(uint256 reserve0, uint256 reserve1) = pair()._getPairReserves(token0, token1);\\n\\t\\tprice = UniUtils._quote(amount, reserve0, reserve1);\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a uniswap pair\\n\\tfunction getUnderlyingShortReserves() public view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(reserveA, reserveB) = pair()._getPairReserves(address(underlying()), address(short()));\\n\\t}\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256 underlyingBalance, uint256 shortBalance)\\n\\t{\\n\\t\\tuint256 totalLp = _getLiquidity();\\n\\t\\t(uint256 totalUnderlyingBalance, uint256 totalShortBalance) = getUnderlyingShortReserves();\\n\\t\\tuint256 total = pair().totalSupply();\\n\\t\\tunderlyingBalance = (totalUnderlyingBalance * totalLp) / total;\\n\\t\\tshortBalance = (totalShortBalance * totalLp) / total;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe7269497cc34c49ae8b50f33bb48aeb0c8462dee999d120db050b842ab4b1f60\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526064600c55670ff59ee833b30000600d55600e805461ffff1916610190179055611f406010553480156200003757600080fd5b50604051620062a9380380620062a98339810160408190526200005a9162000e0a565b6101808101516101a08201516101c0830151620000773362000147565b60018055600480546001600160a01b0319166001600160a01b0385161790558151620000ab90600790602085019062000c2b565b508051620000c190600690602084019062000c2b565b505050608082015160a083015161010084015160c085015160e0860151620000ea955062000197565b6200010a816101200151826040015183606001516200021c60201b60201c565b62000126816101400151826101600151620002e860201b60201c565b805160208201516101e0830151620001409291906200035d565b5062001337565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff1615620001c65760405162461bcd60e51b8152600401620001bd9062000fac565b60405180910390fd5b601780546001600160a01b03199081166001600160a01b03968716179091556018805482169486169490941790935560198054841692851692909217909155601a80549092169390921692909217909155601b55565b601180546001600160a01b038085166001600160a01b03199283161790925560128054848416908316179055601380549286169290911682179055604080516307dc0d1d60e41b81529051637dc0d1d0916004808201926020929091908290030181865afa15801562000293573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b9919062000fd1565b601480546001600160a01b0319166001600160a01b0392909216919091179055620002e362000509565b505050565b60025460ff16156200030e5760405162461bcd60e51b8152600401620001bd9062000fac565b601680546001600160a01b03199081166001600160a01b0384811691821790935560158054909216928516928317909155620003599160001962000605602090811b62001b2617901c565b5050565b60025460ff1615620003835760405162461bcd60e51b8152600401620001bd9062000fac565b600a80546001600160a01b038086166001600160a01b03199283168117909355600b805491861691909216179055620003cf903060001962001b2662000605602090811b91909117901c565b620003d962000750565b620003e690600a62001104565b600955620003f481620007c6565b7f5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f9600d546040516200042891815260200190565b60405180910390a17f3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb600c546040516200046491815260200190565b60405180910390a1600e5460405161ffff90911681527f36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b9060200160405180910390a17f4812bd1abd1ad4ea905335e3af941ec67d6d51ecb36ab58f23af0af081aac57b601054604051620004db91815260200190565b60405180910390a1620004ed6200086e565b620004f7620008dc565b50506002805460ff1916600117905550565b6040805160028082526060820183526000926020830190803683375050601154919250506001600160a01b0316816000815181106200054c576200054c62001115565b6001600160a01b03928316602091820292909201015260125416816001815181106200057c576200057c62001115565b6001600160a01b039283166020918202929092010152601354604051631853304760e31b815291169063c299823890620005bb9084906004016200112b565b6000604051808303816000875af1158015620005db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200035991908101906200117a565b801580620006845750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906200063e90309086906004016200122a565b602060405180830381865afa1580156200065c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000682919062001244565b155b620006f85760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401620001bd565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620002e3918591620009b816565b600a546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa1580156200079b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007c191906200125e565b905090565b6000546001600160a01b0316331480620007f457503360009081526008602052604090205460ff1615156001145b620008335760405162461bcd60e51b815260206004820152600e60248201526d0a6e8e4c2e874409c9ebe82aaa8960931b6044820152606401620001bd565b600f8190556040518181527f13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a129060200160405180910390a150565b601154620008b3906001600160a01b031660001962000895600a546001600160a01b031690565b6001600160a01b03166200060560201b62001b26179092919060201c565b601254620008da906001600160a01b031660001962000895600b546001600160a01b031690565b565b601754601a5462000909916001600160a01b03918216911660001962000605602090811b62001b2617901c565b601954601854604051636eb1769f60e11b81526001600160a01b039283169263dd62ed3e9262000942923092909116906004016200122a565b602060405180830381865afa15801562000960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000986919062001244565b620008da57601854601954620008da916001600160a01b03918216911660001962000605602090811b62001b2617901c565b600062000a14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662000a9660201b62001c61179092919060201c565b805190915015620002e3578080602001905181019062000a35919062001283565b620002e35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620001bd565b606062000aa7848460008562000ab1565b90505b9392505050565b60608247101562000b145760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620001bd565b6001600160a01b0385163b62000b6d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620001bd565b600080866001600160a01b0316858760405162000b8b9190620012a7565b60006040518083038185875af1925050503d806000811462000bca576040519150601f19603f3d011682016040523d82523d6000602084013e62000bcf565b606091505b50909250905062000be282828662000bed565b979650505050505050565b6060831562000bfe57508162000aaa565b82511562000c0f5782518084602001fd5b8160405162461bcd60e51b8152600401620001bd9190620012c5565b82805462000c3990620012fa565b90600052602060002090601f01602090048101928262000c5d576000855562000ca8565b82601f1062000c7857805160ff191683800117855562000ca8565b8280016001018555821562000ca8579182015b8281111562000ca857825182559160200191906001019062000c8b565b5062000cb692915062000cba565b5090565b5b8082111562000cb6576000815560010162000cbb565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b038111828210171562000d0d5762000d0d62000cd1565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000d3e5762000d3e62000cd1565b604052919050565b80516001600160a01b038116811462000d5e57600080fd5b919050565b60005b8381101562000d8057818101518382015260200162000d66565b8381111562000d90576000848401525b50505050565b600082601f83011262000da857600080fd5b81516001600160401b0381111562000dc45762000dc462000cd1565b62000dd9601f8201601f191660200162000d13565b81815284602083860101111562000def57600080fd5b62000e0282602083016020870162000d63565b949350505050565b60006020828403121562000e1d57600080fd5b81516001600160401b038082111562000e3557600080fd5b90830190610200828603121562000e4b57600080fd5b62000e5562000ce7565b62000e608362000d46565b815262000e706020840162000d46565b602082015262000e836040840162000d46565b604082015262000e966060840162000d46565b606082015262000ea96080840162000d46565b608082015262000ebc60a0840162000d46565b60a082015262000ecf60c0840162000d46565b60c082015260e083015160e082015261010062000eee81850162000d46565b9082015261012062000f0284820162000d46565b9082015261014062000f1684820162000d46565b9082015261016062000f2a84820162000d46565b9082015261018062000f3e84820162000d46565b908201526101a0838101518381111562000f5757600080fd5b62000f658882870162000d96565b8284015250506101c0808401518381111562000f8057600080fd5b62000f8e8882870162000d96565b91830191909152506101e09283015192810192909252509392505050565b6020808252600b908201526a125392551250531256915160aa1b604082015260600190565b60006020828403121562000fe457600080fd5b62000aaa8262000d46565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620010465781600019048211156200102a576200102a62000fef565b808516156200103857918102915b93841c93908002906200100a565b509250929050565b6000826200105f57506001620010fe565b816200106e57506000620010fe565b81600181146200108757600281146200109257620010b2565b6001915050620010fe565b60ff841115620010a657620010a662000fef565b50506001821b620010fe565b5060208310610133831016604e8410600b8410161715620010d7575081810a620010fe565b620010e3838362001005565b8060001904821115620010fa57620010fa62000fef565b0290505b92915050565b600062000aaa60ff8416836200104e565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b818110156200116e5783516001600160a01b03168352928401929184019160010162001147565b50909695505050505050565b600060208083850312156200118e57600080fd5b82516001600160401b0380821115620011a657600080fd5b818501915085601f830112620011bb57600080fd5b815181811115620011d057620011d062000cd1565b8060051b9150620011e384830162000d13565b8181529183018401918481019088841115620011fe57600080fd5b938501935b838510156200121e5784518252938501939085019062001203565b98975050505050505050565b6001600160a01b0392831681529116602082015260400190565b6000602082840312156200125757600080fd5b5051919050565b6000602082840312156200127157600080fd5b815160ff8116811462000aaa57600080fd5b6000602082840312156200129657600080fd5b8151801515811462000aaa57600080fd5b60008251620012bb81846020870162000d63565b9190910192915050565b6020815260008251806020840152620012e681604085016020870162000d63565b601f01601f19169190910160400192915050565b600181811c908216806200130f57607f821691505b602082108114156200133157634e487b7160e01b600052602260045260246000fd5b50919050565b614f6280620013476000396000f3fe6080604052600436106102745760003560e01c806304d45c4f1461028057806306fdde03146102a25780630c021ae5146102cd5780630d55046c146102f05780630e962f001461031757806314b0750b1461032d5780631585e0b61461034d57806318160ddd1461036d5780631f64066714610382578063313ce56714610397578063358d6a04146103be57806338bea4cb146103d3578063392e53cd146103e85780633af9e669146104125780633bf295cc146104325780633d68175c146104475780633dcf13421461045c5780633dfe9f6a1461047c5780634880f951146102cd57806354fd4d50146104aa5780635fe3b567146104bf57806366be952d146104d45780636817031b146104ea5780636f307dc31461050a578063711326ce1461051f578063715018a61461053f5780637dc0d1d0146105545780637ffe28e314610569578063852a12e31461057e57806386aceac71461059e5780638da5cb5b146105b457806395d89b41146105c957806397b3fcaa146105de5780639c8f9f2314610620578063a0712d6814610640578063a126d60114610660578063a52602b914610680578063a5e90eee14610695578063a8aa1b31146106b5578063ac784ddc146106ca578063b580a128146106de578063c2946e24146106f3578063cb50087f14610708578063cd377c5314610728578063d539fe4b1461073d578063de747e5a14610752578063f1a392da14610772578063f20aea0f14610788578063f2fde38b146107b6578063f3ae2415146107d6578063f49930181461080f578063f9e40ac41461082f578063fbfa77cf14610852578063fd6bac7014610867578063fec18b3a1461087c57600080fd5b3661027b57005b600080fd5b34801561028c57600080fd5b506102a061029b3660046146d1565b610891565b005b3480156102ae57600080fd5b506102b7610907565b6040516102c4919061474b565b60405180910390f35b3480156102d957600080fd5b506102e2610995565b6040519081526020016102c4565b3480156102fc57600080fd5b506018546001600160a01b03165b6040516102c4919061475e565b34801561032357600080fd5b506102e260095481565b34801561033957600080fd5b506102a0610348366004614772565b6109aa565b34801561035957600080fd5b506102a0610368366004614772565b610a15565b34801561037957600080fd5b506005546102e2565b34801561038e57600080fd5b506102a0610a7f565b3480156103a357600080fd5b506103ac610ae8565b60405160ff90911681526020016102c4565b3480156103ca57600080fd5b506102e2610b5b565b3480156103df57600080fd5b5061030a610b8a565b3480156103f457600080fd5b506002546104029060ff1681565b60405190151581526020016102c4565b34801561041e57600080fd5b506102e261042d3660046147a0565b610b99565b34801561043e57600080fd5b506102e2610ba9565b34801561045357600080fd5b506102e2610c27565b34801561046857600080fd5b506102a0610477366004614801565b610c67565b34801561048857600080fd5b50600e546104979061ffff1681565b60405161ffff90911681526020016102c4565b3480156104b657600080fd5b506102e2600181565b3480156104cb57600080fd5b5061030a610dd5565b3480156104e057600080fd5b506102e2600c5481565b3480156104f657600080fd5b506102a06105053660046147a0565b610de4565b34801561051657600080fd5b5061030a610e5d565b34801561052b57600080fd5b506102a061053a366004614772565b610e6c565b34801561054b57600080fd5b506102a0610f5e565b34801561056057600080fd5b5061030a610f97565b34801561057557600080fd5b506102a0610fa6565b34801561058a57600080fd5b506102e2610599366004614772565b611028565b3480156105aa57600080fd5b506102e2600d5481565b3480156105c057600080fd5b5061030a61108f565b3480156105d557600080fd5b506102b761109e565b3480156105ea57600080fd5b506105f36110ab565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016102c4565b34801561062c57600080fd5b506102a061063b366004614772565b611234565b34801561064c57600080fd5b506102e261065b366004614772565b611299565b34801561066c57600080fd5b506102a061067b366004614772565b6112f2565b34801561068c57600080fd5b5061030a611383565b3480156106a157600080fd5b506102a06106b0366004614863565b611392565b3480156106c157600080fd5b5061030a611420565b3480156106d657600080fd5b506000610402565b3480156106ea57600080fd5b506102e261142f565b3480156106ff57600080fd5b506102e2611532565b34801561071457600080fd5b506102a0610723366004614772565b61159c565b34801561073457600080fd5b506102e2611628565b34801561074957600080fd5b506010546102e2565b34801561075e57600080fd5b506102a061076d36600461489c565b611658565b34801561077e57600080fd5b506102e260035481565b34801561079457600080fd5b506107a86107a33660046148c0565b6116cb565b6040516102c4929190614966565b3480156107c257600080fd5b506102a06107d13660046147a0565b611871565b3480156107e257600080fd5b506104026107f13660046147a0565b6001600160a01b031660009081526008602052604090205460ff1690565b34801561081b57600080fd5b506102a061082a366004614772565b611911565b34801561083b57600080fd5b50610844611ac2565b6040516102c4929190614994565b34801561085e57600080fd5b5061030a611af9565b34801561087357600080fd5b5061030a611b08565b34801561088857600080fd5b5061030a611b17565b61089961108f565b6001600160a01b0316336001600160a01b031614806108cc57503360009081526008602052604090205460ff1615156001145b6108f15760405162461bcd60e51b81526004016108e8906149a2565b60405180910390fd5b6108fa82611c7a565b61090381611d2d565b5050565b60068054610914906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610940906149ca565b801561098d5780601f106109625761010080835404028352916020019161098d565b820191906000526020600020905b81548152906001019060200180831161097057829003601f168201915b505050505081565b600061099f6110ab565b509395945050505050565b336109b361108f565b6001600160a01b0316146109d95760405162461bcd60e51b81526004016108e8906149ff565b60108190556040518181527f4812bd1abd1ad4ea905335e3af941ec67d6d51ecb36ab58f23af0af081aac57b906020015b60405180910390a150565b33610a1e61108f565b6001600160a01b031614610a445760405162461bcd60e51b81526004016108e8906149ff565b600d8190556040518181527f5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f990602001610a0a565b60055490565b610a8761108f565b6001600160a01b0316336001600160a01b03161480610aba57503360009081526008602052604090205460ff1615156001145b610ad65760405162461bcd60e51b81526004016108e8906149a2565b610ae6610ae1611da7565b611e29565b565b600a546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190614a34565b905090565b6000610b56600f54610b85610b6e611e91565b610b76611f07565b610b809190614a6d565b611f4e565b61205a565b600b546001600160a01b031690565b6000610ba3610995565b92915050565b600080610bb7610b80611e91565b905080610bce5768056bc75e2d6310000091505090565b6000610bd8612070565b90506000610be4612165565b610bf684670de0b6b3a7640000614a85565b610c009190614aa4565b905080610c1583670de0b6b3a7640000614a85565b610c1f9190614aa4565b935050505090565b600080610c32610995565b905060055460001415610c4757505060095490565b600554600954610c579083614a85565b610c619190614aa4565b91505090565b610c6f611af9565b6001600160a01b0316336001600160a01b031614610c9f5760405162461bcd60e51b81526004016108e890614ac6565b60005b81811015610d75576000838383818110610cbe57610cbe614af1565b9050602002016020810190610cd391906147a0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d03919061475e565b602060405180830381865afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d449190614b07565b90508015610d6057610d606001600160a01b03831687836121eb565b50508080610d6d90614b20565b915050610ca2565b504715610d8d57610d8d610d87611af9565b4761220a565b826001600160a01b03167f2b06144d62a3a5785ec284ed392b3d106610ae2ce7af270417c4ca38277571048383604051610dc8929190614b3b565b60405180910390a2505050565b6013546001600160a01b031690565b33610ded61108f565b6001600160a01b031614610e135760405162461bcd60e51b81526004016108e8906149ff565b600480546001600160a01b0319166001600160a01b0383169081179091556040517fdabed91cf547ed2ee836d5787bae42fc3bca488166c65791051105490fbcf7ca90600090a250565b600a546001600160a01b031690565b610e7461108f565b6001600160a01b0316336001600160a01b03161480610ea757503360009081526008602052604090205460ff1615156001145b610ec35760405162461bcd60e51b81526004016108e8906149a2565b610ecb61108f565b6001600160a01b0316336001600160a01b03161480610eec57508061012c10155b610f295760405162461bcd60e51b815260206004820152600e60248201526d484c503a20544f4f204c4152474560901b60448201526064016108e8565b600c8190556040518181527f3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb90602001610a0a565b33610f6761108f565b6001600160a01b031614610f8d5760405162461bcd60e51b81526004016108e8906149ff565b610ae6600061225b565b6014546001600160a01b031690565b60026001541415610fc95760405162461bcd60e51b81526004016108e890614b89565b60026001556000610fd8610ba9565b9050600d548111156110185760405162461bcd60e51b8152602060048201526009602482015268484c503a205341464560b81b60448201526064016108e8565b611021816122ab565b5060018055565b6000611032611af9565b6001600160a01b0316336001600160a01b0316146110625760405162461bcd60e51b81526004016108e890614ac6565b600061106d836123cb565b905080600560008282546110819190614bc0565b909155506000949350505050565b6000546001600160a01b031690565b60078054610914906149ca565b6000806000806000806110bc612070565b94506110c6611e91565b93506110d184612596565b600b546040516370a0823160e01b81529194506000916001600160a01b03909116906370a082319061110790309060040161475e565b602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190614b07565b9050600081156111605761115b82612596565b611163565b60005b90506000806111706125c9565b9150915061117d81612596565b6111879083614a6d565b600a546040516370a0823160e01b81529197506001600160a01b0316906370a08231906111b890309060040161475e565b602060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190614b07565b9450828588611208898d614a6d565b6112129190614bc0565b61121c9190614a6d565b6112269190614a6d565b995050505050909192939495565b61123c61108f565b6001600160a01b0316336001600160a01b0316148061126f57503360009081526008602052604090205460ff1615156001145b61128b5760405162461bcd60e51b81526004016108e8906149a2565b6112948161268a565b505050565b60006112a3611af9565b6001600160a01b0316336001600160a01b0316146112d35760405162461bcd60e51b81526004016108e890614ac6565b60006112de83612780565b905080600560008282546110819190614a6d565b80806112fd5750600c545b80611306611532565b11156113245760405162461bcd60e51b81526004016108e890614bd7565b61132c61108f565b6001600160a01b0316336001600160a01b0316148061135f57503360009081526008602052604090205460ff1615156001145b61137b5760405162461bcd60e51b81526004016108e8906149a2565b6112946128de565b6011546001600160a01b031690565b3361139b61108f565b6001600160a01b0316146113c15760405162461bcd60e51b81526004016108e8906149ff565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f2458f684567d238b66deaa0126265bf3becabda0caaab7ebdda6b1794614a2d3910160405180910390a25050565b601a546001600160a01b031690565b60008061143a6125c9565b9150506000611447611e91565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061147d90309060040161475e565b602060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190614b07565b6114c89084614a6d565b9050818114156114dc576000935050505090565b816114ec57612710935050505090565b81811161151a57816127106115018383614bc0565b61150b9190614a85565b6115159190614aa4565b610c1f565b816127106115288284614bc0565b610c159190614a85565b600080611546670de0b6b3a7640000612596565b9050600061155b670de0b6b3a7640000611f4e565b905081811161156b57808261156e565b81815b9092509050806127106115818483614bc0565b61158b9190614a85565b6115959190614aa4565b9250505090565b6115a461108f565b6001600160a01b0316336001600160a01b031614806115d757503360009081526008602052604090205460ff1615156001145b6115f35760405162461bcd60e51b81526004016108e8906149a2565b600f8190556040518181527f13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a1290602001610a0a565b6000670de0b6b3a764000061163c60105490565b611644612165565b61164e9190614a85565b610b569190614aa4565b3361166161108f565b6001600160a01b0316146116875760405162461bcd60e51b81526004016108e8906149ff565b600e805461ffff191661ffff83169081179091556040519081527f36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b90602001610a0a565b6060806116d661108f565b6001600160a01b0316336001600160a01b0316148061170957503360009081526008602052604090205460ff1615156001145b6117255760405162461bcd60e51b81526004016108e8906149a2565b600c5480611731611532565b111561174f5760405162461bcd60e51b81526004016108e890614bd7565b600260015414156117725760405162461bcd60e51b81526004016108e890614b89565b600260015560006117816110ab565b50939450508915925061179e9150505761179b8888612af7565b93505b84156117b1576117ae8686612da9565b92505b61182d6117bc610e5d565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117e7919061475e565b602060405180830381865afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190614b07565b6130a9565b6040518181527f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d589060200160405180910390a1505060018055909590945092505050565b3361187a61108f565b6001600160a01b0316146118a05760405162461bcd60e51b81526004016108e8906149ff565b6001600160a01b0381166119055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108e8565b61190e8161225b565b50565b61191961108f565b6001600160a01b0316336001600160a01b0316148061194c57503360009081526008602052604090205460ff1615156001145b6119685760405162461bcd60e51b81526004016108e8906149a2565b80806119735750600c545b8061197c611532565b111561199a5760405162461bcd60e51b81526004016108e890614bd7565b600260015414156119bd5760405162461bcd60e51b81526004016108e890614b89565b600260015560006119cc613108565b905060006119d861142f565b600e5490915061ffff168111611a225760405162461bcd60e51b815260206004820152600f60248201526e09098a07440a48a845aa890a48aa69608b1b60448201526064016108e8565b81611a2e575050611aba565b6000611a3983613286565b9050611a666103e8611a4d836103e7614a85565b611a579190614aa4565b611a618386614bc0565b6132b3565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b611a98670de0b6b3a7640000612596565b6040805191825260208201859052810185905260600160405180910390a15050505b505060018055565b600080611af0611ad0610e5d565b611ad8610b8a565b611ae0611420565b6001600160a01b031691906133d7565b90939092509050565b6004546001600160a01b031690565b6012546001600160a01b031690565b6015546001600160a01b031690565b801580611ba05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9e9190614b07565b155b611c0b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108e8565b6112948363095ea7b360e01b8484604051602401611c2a929190614c04565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613497565b6060611c708484600085613569565b90505b9392505050565b611c82610b8a565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b8152600401611caf91815260200190565b600060405180830381600087803b158015611cc957600080fd5b505af1158015611cdd573d6000803e3d6000fd5b5050505061190e8161369a565b6020604051808303816000875af1158015611d09573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190614b07565b6000611d37611383565b6001600160a01b031663852a12e3836040518263ffffffff1660e01b8152600401611d6491815260200190565b6020604051808303816000875af1158015611d83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112949190614b07565b601754601b546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b906044016040805180830381865afa158015611dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e229190614c1d565b5092915050565b601754601b54604051630441a3e760e41b81526001600160a01b039092169163441a3e7091611e5c918590600401614994565b600060405180830381600087803b158015611e7657600080fd5b505af1158015611e8a573d6000803e3d6000fd5b5050505050565b6000611e9b611b08565b6001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401611ec6919061475e565b602060405180830381865afa158015611ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190614b07565b6000611f11611b08565b6001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ee3573d6000803e3d6000fd5b6000611f58610f97565b6001600160a01b031663fc57d4df611f6e611383565b6040518263ffffffff1660e01b8152600401611f8a919061475e565b602060405180830381865afa158015611fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcb9190614b07565b611fd3610f97565b6001600160a01b031663fc57d4df611fe9611b08565b6040518263ffffffff1660e01b8152600401612005919061475e565b602060405180830381865afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120469190614b07565b6120509084614a85565b610ba39190614aa4565b60008183106120695781611c73565b5090919050565b60008061207b611383565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120a6919061475e565b602060405180830381865afa1580156120c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e79190614b07565b9050670de0b6b3a76400006120fa611383565b6001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b9190614b07565b610c579083614a85565b600080612170610dd5565b6001600160a01b0316638e8f294b612186611383565b6040518263ffffffff1660e01b81526004016121a2919061475e565b606060405180830381865afa1580156121bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e39190614c41565b509392505050565b6112948363a9059cbb60e01b8484604051602401611c2a929190614c04565b600080600080600085875af19050806112945760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016108e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006122b56125c9565b50905060006122c2612070565b9050600060105469021e19e0c9bab24000006122de9190614aa4565b905060006122ea612165565b6122fc83670de0b6b3a7640000614a85565b6123069190614aa4565b61231890670de0b6b3a7640000614a6d565b83866123248583614a85565b61232e9190614aa4565b6123389190614bc0565b61234a90670de0b6b3a7640000614a85565b6123549190614aa4565b905060008061236b6123668488614bc0565b6136f8565b9150915061237881611c7a565b61238182613801565b337fdacd0a02d11128b25d6c3de23e91f71aa9dd5620c6f5c69f35a18d15e1168468886123ac610ba9565b6040516123ba929190614994565b60405180910390a250505050505050565b6000600c54806123d9611532565b11156123f75760405162461bcd60e51b81526004016108e890614bd7565b6002600154141561241a5760405162461bcd60e51b81526004016108e890614b89565b60026001558261242d576000915061258c565b6000612437613108565b90508061244857600092505061258c565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a082319061247990309060040161475e565b602060405180830381865afa158015612496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ba9190614b07565b9050808511156124e7576124d86124d18287614bc0565b8284613836565b90506124e4818661205a565b94505b6124ef6110ab565b5093955061252e93508592506125079150610a799050565b612512886001614a6d565b61251c9190614a85565b6125269190614aa4565b60055461205a565b93506125503061253c611af9565b600a546001600160a01b0316919088613937565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643386604051612581929190614c04565b60405180910390a150505b5060018055919050565b600081156125c157600b54600a546125bc9184916001600160a01b03918216911661396f565b610ba3565b600092915050565b60008060006125d66139a7565b90506000806125e3611ac2565b9150915060006125f1611420565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561262e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126529190614b07565b90508061265f8585614a85565b6126699190614aa4565b9550806126768584614a85565b6126809190614aa4565b9450505050509091565b6000806126b1612698611420565b846126a1611420565b6001600160a01b031691906121eb565b60006126cb6126be610e5d565b6126c6610b8a565b613a35565b5090506000806126d9611420565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401612704919061475e565b60408051808303816000875af1158015612722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127469190614c1d565b91509150612752610e5d565b6001600160a01b0316836001600160a01b031614612771578082612774565b81815b94509450505050915091565b6000600c548061278e611532565b11156127ac5760405162461bcd60e51b81526004016108e890614bd7565b600260015414156127cf5760405162461bcd60e51b81526004016108e890614b89565b6002600155826127e2576000915061258c565b60006127ec613108565b90506127f6610b5b565b6128008286614a6d565b11156128425760405162461bcd60e51b81526020600482015260116024820152701213140e8813d5915497d3505617d51593607a1b60448201526064016108e8565b6005541561286e57808461285560055490565b61285f9190614a85565b6128699190614aa4565b612870565b835b925061289161287d611af9565b600a546001600160a01b0316903087613937565b61289a846130a9565b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c33856040516128cb929190614c04565b60405180910390a1505060018055919050565b60006128ea60006136f8565b505060006128f6613b18565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061292c90309060040161475e565b602060405180830381865afa158015612949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296d9190614b07565b9050808211156129b6576129b06129848284614bc0565b600a54600b546001600160a01b03918216911661299f611420565b6001600160a01b0316929190613b6c565b506129f9565b818111156129f9576129f76129cb8383614bc0565b600b54600a546001600160a01b0391821691166129e6611420565b6001600160a01b0316929190613c4b565b505b600b546040516370a0823160e01b8152612a71916001600160a01b0316906370a0823190612a2b90309060040161475e565b602060405180830381865afa158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190614b07565b611c7a565b6000612a7b613cac565b9050612a8681611d2d565b600a546040516370a0823160e01b81526001600160a01b03909116906370a0823190612ab690309060040161475e565b602060405180830381865afa158015612ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f9190614b07565b601754601b54604051631c57762b60e31b8152606092839283926001600160a01b039092169163e2bbb15891612b3291600090600401614994565b600060405180830381600087803b158015612b4c57600080fd5b505af1158015612b60573d6000803e3d6000fd5b5060019250612b6d915050565b604051908082528060200260200182016040528015612b96578160200160208202803683370190505b506019546040516370a0823160e01b81529194506001600160a01b0316906370a0823190612bc890309060040161475e565b602060405180830381865afa158015612be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c099190614b07565b83600081518110612c1c57612c1c614af1565b60200260200101818152505082600081518110612c3b57612c3b614af1565b602002602001015160001415612c52575050610ba3565b601854612cb4906001600160a01b03168686600081612c7357612c73614af1565b9050602002810190612c859190614c9a565b60195486516001600160a01b03909116908790600090612ca757612ca7614af1565b6020026020010151613ce1565b60195483516001600160a01b0390911690600080516020614f0d833981519152908590600090612ce657612ce6614af1565b6020026020010151604051612cfd91815260200190565b60405180910390a2478015612da057612d14610b8a565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612d4e57600080fd5b505af1158015612d62573d6000803e3d6000fd5b5050505050612d6f610b8a565b6001600160a01b0316600080516020614f0d83398151915282604051612d9791815260200190565b60405180910390a25b50505092915050565b6060612db3610dd5565b6001600160a01b0316630952c5636000306040518363ffffffff1660e01b8152600401612de1929190614cba565b600060405180830381600087803b158015612dfb57600080fd5b505af1158015612e0f573d6000803e3d6000fd5b5060019250612e1c915050565b604051908082528060200260200182016040528015612e45578160200160208202803683370190505b506016546040516370a0823160e01b81529192506001600160a01b0316906370a0823190612e7790309060040161475e565b602060405180830381865afa158015612e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb89190614b07565b81600081518110612ecb57612ecb614af1565b602002602001018181525050600081600081518110612eec57612eec614af1565b60200260200101511115612f9e57612f4c612f05611b17565b84846000818110612f1857612f18614af1565b9050602002810190612f2a9190614c9a565b60165484516001600160a01b03909116908590600090612ca757612ca7614af1565b60165481516001600160a01b0390911690600080516020614f0d833981519152908390600090612f7e57612f7e614af1565b6020026020010151604051612f9591815260200190565b60405180910390a25b612fa6610dd5565b6001600160a01b0316630952c5636001306040518363ffffffff1660e01b8152600401612fd4929190614cba565b600060405180830381600087803b158015612fee57600080fd5b505af1158015613002573d6000803e3d6000fd5b504792505081159050611e2257613017610b8a565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561305157600080fd5b505af1158015613065573d6000803e3d6000fd5b5050505050613072610b8a565b6001600160a01b0316600080516020614f0d8339815191528260405161309a91815260200190565b60405180910390a25092915050565b6103e88110156130b65750565b60006130c182613286565b905060006130ce82613e86565b90506130e26130dd8385614bc0565b613801565b6130eb81613eac565b60006130f78383613f67565b905061310281614007565b50505050565b600080613113613cac565b9050600061311f613b18565b9050600061312c82612596565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061316290309060040161475e565b602060405180830381865afa15801561317f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a39190614b07565b9050600081156131bb576131b682612596565b6131be565b60005b905060006131ca6125c9565b50600a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061320190309060040161475e565b602060405180830381865afa15801561321e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132429190614b07565b9050828186613252856002614a85565b61325c908b614a6d565b6132669190614bc0565b6132709190614a6d565b61327a9190614a6d565b97505050505050505090565b600080613291611628565b905061329f81612710614a6d565b6132a98285614a85565b611c739190614aa4565b60006132be83613e86565b905060006132ca611e91565b90508082111561331a576132f560006132e3868661403a565b116132ee57846136f8565b60006136f8565b5050613300836140ae565b5061331590506133108284614bc0565b613eac565b6133ce565b808210156133ce5761332c60006136f8565b5050600b546040516370a0823160e01b81526000916133b0916001600160a01b03909116906370a082319061336590309060040161475e565b602060405180830381865afa158015613382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a69190614b07565b610b858585614bc0565b905080156133c1576133c181611c7a565b6133ca846140ae565b5050505b6131028261410b565b60008060006133e68585613a35565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561342a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344e9190614cf2565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613485578082613488565b81815b90999098509650505050505050565b60006134ec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c619092919063ffffffff16565b805190915015611294578080602001905181019061350a9190614d37565b6112945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108e8565b6060824710156135ca5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108e8565b6001600160a01b0385163b6136215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108e8565b600080866001600160a01b0316858760405161363d9190614d54565b60006040518083038185875af1925050503d806000811461367a576040519150601f19603f3d011682016040523d82523d6000602084013e61367f565b606091505b509150915061368f82828661430c565b979650505050505050565b6136a2611b08565b6001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156136dc57600080fd5b505af11580156136f0573d6000803e3d6000fd5b505050505050565b60008060006137056125c9565b50905080841061371b5750600093849350915050565b60006137256139a7565b90506000826137348784614a85565b61373e9190614aa4565b9050600061374c8284614bc0565b90506000613758611420565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613783919061475e565b602060405180830381865afa1580156137a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c49190614b07565b9050808211156137db576137db610ae18284614bc0565b81156137ef576137ea8261268a565b6137f3565b6000805b965096505050505050915091565b613809611383565b6001600160a01b031663a0712d68826040518263ffffffff1660e01b8152600401611cea91815260200190565b6000806103e8613848866103ed614a85565b6138529190614aa4565b9050600061385e6125c9565b50905060008461386e8385614a85565b6138789190614aa4565b90506000613884611e91565b9050600061389183613e86565b905083831015806138a25750818110155b156138bb576138af6128de565b95505050505050611c73565b6000806138cb6123668688614bc0565b915091506138d881611c7a565b818b11156138ff576138f26138ed838d614bc0565b614345565b6138fc9083614a6d565b91505b6000613909610ba9565b9050600d54811161391d5761391d816122ab565b6139278b84614a6d565b9c9b505050505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526131029085906323b872dd60e01b90608401611c2a565b60008361397e57506000611c73565b60008061398e8585611ae0611420565b9150915061399d868383614378565b9695505050505050565b6000806139b2611da7565b601a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906139e890309060040161475e565b602060405180830381865afa158015613a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a299190614b07565b90506115958183614a6d565b600080826001600160a01b0316846001600160a01b03161415613a9a5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f41444452455353455300000060448201526064016108e8565b826001600160a01b0316846001600160a01b031610613aba578284613abd565b83835b90925090506001600160a01b038216613b115760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b60448201526064016108e8565b9250929050565b6000613b22611b08565b6001600160a01b03166317bfdfbc306040518263ffffffff1660e01b8152600401613b4d919061475e565b6020604051808303816000875af1158015611ee3573d6000803e3d6000fd5b600080613b7b8686868661443a565b90506000613b898486613a35565b509050600080826001600160a01b0316876001600160a01b031614613bb057876000613bb4565b6000885b9092509050613bcd6001600160a01b0388168a866121eb565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f90613c0c9085908590309060248101614d66565b600060405180830381600087803b158015613c2657600080fd5b505af1158015613c3a573d6000803e3d6000fd5b50959b9a5050505050505050505050565b600080613c5a86868686614500565b90506000613c688486613a35565b509050600080826001600160a01b0316876001600160a01b031614613c8f57836000613c93565b6000845b9092509050613bcd6001600160a01b0388168a8a6121eb565b6000613cb6611383565b6001600160a01b0316633af9e669306040518263ffffffff1660e01b8152600401613b4d919061475e565b6000613ced8480614d93565b6001613cf98780614d93565b613d04929150614bc0565b818110613d1357613d13614af1565b9050602002016020810190613d2891906147a0565b90506001600160a01b038316613d3e8580614d93565b6000818110613d4f57613d4f614af1565b9050602002016020810190613d6491906147a0565b6001600160a01b0316148015613d925750613d7d610b8a565b6001600160a01b0316816001600160a01b0316145b80613db55750613da0610e5d565b6001600160a01b0316816001600160a01b0316145b613df95760405162461bcd60e51b81526020600482015260156024820152740928cc2e4dac2c4d8ca7440aea49e9c8ebea082a89605b1b60448201526064016108e8565b6001600160a01b0385166338ed1739836020870135613e188880614d93565b308a604001356040518763ffffffff1660e01b8152600401613e3f96959493929190614ddc565b6000604051808303816000875af1158015613e5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136f09190810190614e4f565b600081156125c157600a54600b546125bc9184916001600160a01b03918216911661396f565b613eb4611b08565b6001600160a01b031663c5ebeaec826040518263ffffffff1660e01b8152600401613ee191815260200190565b6020604051808303816000875af1158015613f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f249190614b07565b50613f2d610b8a565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156136dc57600080fd5b6000613f7d613f74611420565b846126a1610e5d565b613f91613f88611420565b836126a1610b8a565b613f99611420565b6001600160a01b0316636a627842306040518263ffffffff1660e01b8152600401613fc4919061475e565b6020604051808303816000875af1158015613fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190614b07565b601754601b54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891611e5c918590600401614994565b600080614045612070565b905080831015614059576000915050610ba3565b60006140636125c9565b5090506000818611614076576000614080565b6140808287614bc0565b9050600061408e8487614bc0565b90508082106140a4576000945050505050610ba3565b61368f8282614bc0565b60008060006140bb612070565b9050838114156140d15750600093849350915050565b8381116140f1576140ea6140e58286614bc0565b6145c1565b6000614100565b60006141006138ed8684614bc0565b909590945092505050565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a082319061413c90309060040161475e565b602060405180830381865afa158015614159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061417d9190614b07565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906141b390309060040161475e565b602060405180830381865afa1580156141d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f49190614b07565b905060006142006125c9565b915050808410156142115750505050565b600061423f600261422186613e86565b61422b9086614a6d565b6142359190614aa4565b610b858488614bc0565b9050600061424c82612596565b9050848110156142925761427e6142638287614bc0565b600a54600b546001600160a01b0391821691166129e6611420565b6142889085614a6d565b93508094506142b7565b818411156142b7576142a76129cb8386614bc0565b6142b19086614a6d565b94508193505b8360006142c382612596565b9050808710156142db5750856142d881613e86565b91505b806142ea575050505050505050565b60006142f68284613f67565b905061430181614007565b505050505050505050565b6060831561431b575081611c73565b82511561432b5782518084602001fd5b8160405162461bcd60e51b81526004016108e8919061474b565b60008061435061465a565b905082811161435f5780614361565b825b915081156143725761437282611d2d565b50919050565b60008084116143c95760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e5400000060448201526064016108e8565b6000831180156143d95750600082115b6144255760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c495155494449545960448201526064016108e8565b826144308386614a85565b611c709190614aa4565b60008084116144975760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b60648201526084016108e8565b6000806144a58786866133d7565b909250905060006144b68784614a85565b6144c2906103e8614a85565b905060006144d08884614bc0565b6144dc906103e5614a85565b90506144e88183614aa4565b6144f3906001614a6d565b9998505050505050505050565b600080841161455d5760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b60648201526084016108e8565b60008061456b8786866133d7565b9092509050600061457e876103e5614a85565b9050600061458c8383614a85565b905060008261459d866103e8614a85565b6145a79190614a6d565b90506145b38183614aa4565b9a9950505050505050505050565b6000806145cc610e5d565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016145f7919061475e565b602060405180830381865afa158015614614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146389190614b07565b90508281116146475780614649565b825b915081156143725761437282613801565b600080614665612070565b90506000614674610b80611e91565b905060006063614682612165565b61469484670de0b6b3a7640000614a85565b61469f906064614a85565b6146a99190614aa4565b6146b39190614aa4565b9050828111156146c7576000935050505090565b610c1f8184614bc0565b600080604083850312156146e457600080fd5b50508035926020909101359150565b60005b8381101561470e5781810151838201526020016146f6565b838111156131025750506000910152565b600081518084526147378160208601602086016146f3565b601f01601f19169290920160200192915050565b602081526000611c73602083018461471f565b6001600160a01b0391909116815260200190565b60006020828403121561478457600080fd5b5035919050565b6001600160a01b038116811461190e57600080fd5b6000602082840312156147b257600080fd5b8135611c738161478b565b60008083601f8401126147cf57600080fd5b5081356001600160401b038111156147e657600080fd5b6020830191508360208260051b8501011115613b1157600080fd5b60008060006040848603121561481657600080fd5b83356148218161478b565b925060208401356001600160401b0381111561483c57600080fd5b614848868287016147bd565b9497909650939450505050565b801515811461190e57600080fd5b6000806040838503121561487657600080fd5b82356148818161478b565b9150602083013561489181614855565b809150509250929050565b6000602082840312156148ae57600080fd5b813561ffff81168114611c7357600080fd5b600080600080604085870312156148d657600080fd5b84356001600160401b03808211156148ed57600080fd5b6148f9888389016147bd565b9096509450602087013591508082111561491257600080fd5b5061491f878288016147bd565b95989497509550505050565b600081518084526020808501945080840160005b8381101561495b5781518752958201959082019060010161493f565b509495945050505050565b604081526000614979604083018561492b565b828103602084015261498b818561492b565b95945050505050565b918252602082015260400190565b6020808252600e908201526d0a6e8e4c2e874409c9ebe82aaa8960931b604082015260600190565b600181811c908216806149de57607f821691505b6020821081141561437257634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215614a4657600080fd5b815160ff81168114611c7357600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614a8057614a80614a57565b500190565b6000816000190483118215151615614a9f57614a9f614a57565b500290565b600082614ac157634e487b7160e01b600052601260045260246000fd5b500490565b60208082526011908201527014dd1c985d0e8813d3931657d590555315607a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614b1957600080fd5b5051919050565b6000600019821415614b3457614b34614a57565b5060010190565b60208082528181018390526000908460408401835b86811015614b7e578235614b638161478b565b6001600160a01b031682529183019190830190600101614b50565b509695505050505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082821015614bd257614bd2614a57565b500390565b60208082526013908201527209098a07440a0a492868abe9a92a69a82a8869606b1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60008060408385031215614c3057600080fd5b505080516020909101519092909150565b600080600060608486031215614c5657600080fd5b8351614c6181614855565b602085015160408601519194509250614c7981614855565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60008235605e19833603018112614cb057600080fd5b9190910192915050565b60ff9290921682526001600160a01b0316602082015260400190565b80516001600160701b0381168114614ced57600080fd5b919050565b600080600060608486031215614d0757600080fd5b614d1084614cd6565b9250614d1e60208501614cd6565b9150604084015163ffffffff81168114614c7957600080fd5b600060208284031215614d4957600080fd5b8151611c7381614855565b60008251614cb08184602087016146f3565b84815283602082015260018060a01b038316604082015260806060820152600061399d608083018461471f565b6000808335601e19843603018112614daa57600080fd5b8301803591506001600160401b03821115614dc457600080fd5b6020019150600581901b3603821315613b1157600080fd5b868152602080820187905260a0604083018190528201859052600090869060c08401835b88811015614e2e578335614e138161478b565b6001600160a01b031682529282019290820190600101614e00565b506001600160a01b0396909616606085015250505060800152949350505050565b60006020808385031215614e6257600080fd5b82516001600160401b0380821115614e7957600080fd5b818501915085601f830112614e8d57600080fd5b815181811115614e9f57614e9f614c84565b8060051b604051601f19603f83011681018181108582111715614ec457614ec4614c84565b604052918252848201925083810185019188831115614ee257600080fd5b938501935b82851015614f0057845184529385019392850192614ee7565b9897505050505050505056fe3efad319b6afe1e0317f51df66abdc4d7a7c8b1cfda31f03440b4ad255af7245a2646970667358221220606f1090d90ae58064014eed97badf16b226c92201d931bf2a9eb875af9726e464736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102745760003560e01c806304d45c4f1461028057806306fdde03146102a25780630c021ae5146102cd5780630d55046c146102f05780630e962f001461031757806314b0750b1461032d5780631585e0b61461034d57806318160ddd1461036d5780631f64066714610382578063313ce56714610397578063358d6a04146103be57806338bea4cb146103d3578063392e53cd146103e85780633af9e669146104125780633bf295cc146104325780633d68175c146104475780633dcf13421461045c5780633dfe9f6a1461047c5780634880f951146102cd57806354fd4d50146104aa5780635fe3b567146104bf57806366be952d146104d45780636817031b146104ea5780636f307dc31461050a578063711326ce1461051f578063715018a61461053f5780637dc0d1d0146105545780637ffe28e314610569578063852a12e31461057e57806386aceac71461059e5780638da5cb5b146105b457806395d89b41146105c957806397b3fcaa146105de5780639c8f9f2314610620578063a0712d6814610640578063a126d60114610660578063a52602b914610680578063a5e90eee14610695578063a8aa1b31146106b5578063ac784ddc146106ca578063b580a128146106de578063c2946e24146106f3578063cb50087f14610708578063cd377c5314610728578063d539fe4b1461073d578063de747e5a14610752578063f1a392da14610772578063f20aea0f14610788578063f2fde38b146107b6578063f3ae2415146107d6578063f49930181461080f578063f9e40ac41461082f578063fbfa77cf14610852578063fd6bac7014610867578063fec18b3a1461087c57600080fd5b3661027b57005b600080fd5b34801561028c57600080fd5b506102a061029b3660046146d1565b610891565b005b3480156102ae57600080fd5b506102b7610907565b6040516102c4919061474b565b60405180910390f35b3480156102d957600080fd5b506102e2610995565b6040519081526020016102c4565b3480156102fc57600080fd5b506018546001600160a01b03165b6040516102c4919061475e565b34801561032357600080fd5b506102e260095481565b34801561033957600080fd5b506102a0610348366004614772565b6109aa565b34801561035957600080fd5b506102a0610368366004614772565b610a15565b34801561037957600080fd5b506005546102e2565b34801561038e57600080fd5b506102a0610a7f565b3480156103a357600080fd5b506103ac610ae8565b60405160ff90911681526020016102c4565b3480156103ca57600080fd5b506102e2610b5b565b3480156103df57600080fd5b5061030a610b8a565b3480156103f457600080fd5b506002546104029060ff1681565b60405190151581526020016102c4565b34801561041e57600080fd5b506102e261042d3660046147a0565b610b99565b34801561043e57600080fd5b506102e2610ba9565b34801561045357600080fd5b506102e2610c27565b34801561046857600080fd5b506102a0610477366004614801565b610c67565b34801561048857600080fd5b50600e546104979061ffff1681565b60405161ffff90911681526020016102c4565b3480156104b657600080fd5b506102e2600181565b3480156104cb57600080fd5b5061030a610dd5565b3480156104e057600080fd5b506102e2600c5481565b3480156104f657600080fd5b506102a06105053660046147a0565b610de4565b34801561051657600080fd5b5061030a610e5d565b34801561052b57600080fd5b506102a061053a366004614772565b610e6c565b34801561054b57600080fd5b506102a0610f5e565b34801561056057600080fd5b5061030a610f97565b34801561057557600080fd5b506102a0610fa6565b34801561058a57600080fd5b506102e2610599366004614772565b611028565b3480156105aa57600080fd5b506102e2600d5481565b3480156105c057600080fd5b5061030a61108f565b3480156105d557600080fd5b506102b761109e565b3480156105ea57600080fd5b506105f36110ab565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016102c4565b34801561062c57600080fd5b506102a061063b366004614772565b611234565b34801561064c57600080fd5b506102e261065b366004614772565b611299565b34801561066c57600080fd5b506102a061067b366004614772565b6112f2565b34801561068c57600080fd5b5061030a611383565b3480156106a157600080fd5b506102a06106b0366004614863565b611392565b3480156106c157600080fd5b5061030a611420565b3480156106d657600080fd5b506000610402565b3480156106ea57600080fd5b506102e261142f565b3480156106ff57600080fd5b506102e2611532565b34801561071457600080fd5b506102a0610723366004614772565b61159c565b34801561073457600080fd5b506102e2611628565b34801561074957600080fd5b506010546102e2565b34801561075e57600080fd5b506102a061076d36600461489c565b611658565b34801561077e57600080fd5b506102e260035481565b34801561079457600080fd5b506107a86107a33660046148c0565b6116cb565b6040516102c4929190614966565b3480156107c257600080fd5b506102a06107d13660046147a0565b611871565b3480156107e257600080fd5b506104026107f13660046147a0565b6001600160a01b031660009081526008602052604090205460ff1690565b34801561081b57600080fd5b506102a061082a366004614772565b611911565b34801561083b57600080fd5b50610844611ac2565b6040516102c4929190614994565b34801561085e57600080fd5b5061030a611af9565b34801561087357600080fd5b5061030a611b08565b34801561088857600080fd5b5061030a611b17565b61089961108f565b6001600160a01b0316336001600160a01b031614806108cc57503360009081526008602052604090205460ff1615156001145b6108f15760405162461bcd60e51b81526004016108e8906149a2565b60405180910390fd5b6108fa82611c7a565b61090381611d2d565b5050565b60068054610914906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610940906149ca565b801561098d5780601f106109625761010080835404028352916020019161098d565b820191906000526020600020905b81548152906001019060200180831161097057829003601f168201915b505050505081565b600061099f6110ab565b509395945050505050565b336109b361108f565b6001600160a01b0316146109d95760405162461bcd60e51b81526004016108e8906149ff565b60108190556040518181527f4812bd1abd1ad4ea905335e3af941ec67d6d51ecb36ab58f23af0af081aac57b906020015b60405180910390a150565b33610a1e61108f565b6001600160a01b031614610a445760405162461bcd60e51b81526004016108e8906149ff565b600d8190556040518181527f5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f990602001610a0a565b60055490565b610a8761108f565b6001600160a01b0316336001600160a01b03161480610aba57503360009081526008602052604090205460ff1615156001145b610ad65760405162461bcd60e51b81526004016108e8906149a2565b610ae6610ae1611da7565b611e29565b565b600a546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190614a34565b905090565b6000610b56600f54610b85610b6e611e91565b610b76611f07565b610b809190614a6d565b611f4e565b61205a565b600b546001600160a01b031690565b6000610ba3610995565b92915050565b600080610bb7610b80611e91565b905080610bce5768056bc75e2d6310000091505090565b6000610bd8612070565b90506000610be4612165565b610bf684670de0b6b3a7640000614a85565b610c009190614aa4565b905080610c1583670de0b6b3a7640000614a85565b610c1f9190614aa4565b935050505090565b600080610c32610995565b905060055460001415610c4757505060095490565b600554600954610c579083614a85565b610c619190614aa4565b91505090565b610c6f611af9565b6001600160a01b0316336001600160a01b031614610c9f5760405162461bcd60e51b81526004016108e890614ac6565b60005b81811015610d75576000838383818110610cbe57610cbe614af1565b9050602002016020810190610cd391906147a0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d03919061475e565b602060405180830381865afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d449190614b07565b90508015610d6057610d606001600160a01b03831687836121eb565b50508080610d6d90614b20565b915050610ca2565b504715610d8d57610d8d610d87611af9565b4761220a565b826001600160a01b03167f2b06144d62a3a5785ec284ed392b3d106610ae2ce7af270417c4ca38277571048383604051610dc8929190614b3b565b60405180910390a2505050565b6013546001600160a01b031690565b33610ded61108f565b6001600160a01b031614610e135760405162461bcd60e51b81526004016108e8906149ff565b600480546001600160a01b0319166001600160a01b0383169081179091556040517fdabed91cf547ed2ee836d5787bae42fc3bca488166c65791051105490fbcf7ca90600090a250565b600a546001600160a01b031690565b610e7461108f565b6001600160a01b0316336001600160a01b03161480610ea757503360009081526008602052604090205460ff1615156001145b610ec35760405162461bcd60e51b81526004016108e8906149a2565b610ecb61108f565b6001600160a01b0316336001600160a01b03161480610eec57508061012c10155b610f295760405162461bcd60e51b815260206004820152600e60248201526d484c503a20544f4f204c4152474560901b60448201526064016108e8565b600c8190556040518181527f3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb90602001610a0a565b33610f6761108f565b6001600160a01b031614610f8d5760405162461bcd60e51b81526004016108e8906149ff565b610ae6600061225b565b6014546001600160a01b031690565b60026001541415610fc95760405162461bcd60e51b81526004016108e890614b89565b60026001556000610fd8610ba9565b9050600d548111156110185760405162461bcd60e51b8152602060048201526009602482015268484c503a205341464560b81b60448201526064016108e8565b611021816122ab565b5060018055565b6000611032611af9565b6001600160a01b0316336001600160a01b0316146110625760405162461bcd60e51b81526004016108e890614ac6565b600061106d836123cb565b905080600560008282546110819190614bc0565b909155506000949350505050565b6000546001600160a01b031690565b60078054610914906149ca565b6000806000806000806110bc612070565b94506110c6611e91565b93506110d184612596565b600b546040516370a0823160e01b81529194506000916001600160a01b03909116906370a082319061110790309060040161475e565b602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190614b07565b9050600081156111605761115b82612596565b611163565b60005b90506000806111706125c9565b9150915061117d81612596565b6111879083614a6d565b600a546040516370a0823160e01b81529197506001600160a01b0316906370a08231906111b890309060040161475e565b602060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190614b07565b9450828588611208898d614a6d565b6112129190614bc0565b61121c9190614a6d565b6112269190614a6d565b995050505050909192939495565b61123c61108f565b6001600160a01b0316336001600160a01b0316148061126f57503360009081526008602052604090205460ff1615156001145b61128b5760405162461bcd60e51b81526004016108e8906149a2565b6112948161268a565b505050565b60006112a3611af9565b6001600160a01b0316336001600160a01b0316146112d35760405162461bcd60e51b81526004016108e890614ac6565b60006112de83612780565b905080600560008282546110819190614a6d565b80806112fd5750600c545b80611306611532565b11156113245760405162461bcd60e51b81526004016108e890614bd7565b61132c61108f565b6001600160a01b0316336001600160a01b0316148061135f57503360009081526008602052604090205460ff1615156001145b61137b5760405162461bcd60e51b81526004016108e8906149a2565b6112946128de565b6011546001600160a01b031690565b3361139b61108f565b6001600160a01b0316146113c15760405162461bcd60e51b81526004016108e8906149ff565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f2458f684567d238b66deaa0126265bf3becabda0caaab7ebdda6b1794614a2d3910160405180910390a25050565b601a546001600160a01b031690565b60008061143a6125c9565b9150506000611447611e91565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061147d90309060040161475e565b602060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190614b07565b6114c89084614a6d565b9050818114156114dc576000935050505090565b816114ec57612710935050505090565b81811161151a57816127106115018383614bc0565b61150b9190614a85565b6115159190614aa4565b610c1f565b816127106115288284614bc0565b610c159190614a85565b600080611546670de0b6b3a7640000612596565b9050600061155b670de0b6b3a7640000611f4e565b905081811161156b57808261156e565b81815b9092509050806127106115818483614bc0565b61158b9190614a85565b6115959190614aa4565b9250505090565b6115a461108f565b6001600160a01b0316336001600160a01b031614806115d757503360009081526008602052604090205460ff1615156001145b6115f35760405162461bcd60e51b81526004016108e8906149a2565b600f8190556040518181527f13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a1290602001610a0a565b6000670de0b6b3a764000061163c60105490565b611644612165565b61164e9190614a85565b610b569190614aa4565b3361166161108f565b6001600160a01b0316146116875760405162461bcd60e51b81526004016108e8906149ff565b600e805461ffff191661ffff83169081179091556040519081527f36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b90602001610a0a565b6060806116d661108f565b6001600160a01b0316336001600160a01b0316148061170957503360009081526008602052604090205460ff1615156001145b6117255760405162461bcd60e51b81526004016108e8906149a2565b600c5480611731611532565b111561174f5760405162461bcd60e51b81526004016108e890614bd7565b600260015414156117725760405162461bcd60e51b81526004016108e890614b89565b600260015560006117816110ab565b50939450508915925061179e9150505761179b8888612af7565b93505b84156117b1576117ae8686612da9565b92505b61182d6117bc610e5d565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117e7919061475e565b602060405180830381865afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190614b07565b6130a9565b6040518181527f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d589060200160405180910390a1505060018055909590945092505050565b3361187a61108f565b6001600160a01b0316146118a05760405162461bcd60e51b81526004016108e8906149ff565b6001600160a01b0381166119055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108e8565b61190e8161225b565b50565b61191961108f565b6001600160a01b0316336001600160a01b0316148061194c57503360009081526008602052604090205460ff1615156001145b6119685760405162461bcd60e51b81526004016108e8906149a2565b80806119735750600c545b8061197c611532565b111561199a5760405162461bcd60e51b81526004016108e890614bd7565b600260015414156119bd5760405162461bcd60e51b81526004016108e890614b89565b600260015560006119cc613108565b905060006119d861142f565b600e5490915061ffff168111611a225760405162461bcd60e51b815260206004820152600f60248201526e09098a07440a48a845aa890a48aa69608b1b60448201526064016108e8565b81611a2e575050611aba565b6000611a3983613286565b9050611a666103e8611a4d836103e7614a85565b611a579190614aa4565b611a618386614bc0565b6132b3565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b611a98670de0b6b3a7640000612596565b6040805191825260208201859052810185905260600160405180910390a15050505b505060018055565b600080611af0611ad0610e5d565b611ad8610b8a565b611ae0611420565b6001600160a01b031691906133d7565b90939092509050565b6004546001600160a01b031690565b6012546001600160a01b031690565b6015546001600160a01b031690565b801580611ba05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9e9190614b07565b155b611c0b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108e8565b6112948363095ea7b360e01b8484604051602401611c2a929190614c04565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613497565b6060611c708484600085613569565b90505b9392505050565b611c82610b8a565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b8152600401611caf91815260200190565b600060405180830381600087803b158015611cc957600080fd5b505af1158015611cdd573d6000803e3d6000fd5b5050505061190e8161369a565b6020604051808303816000875af1158015611d09573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190614b07565b6000611d37611383565b6001600160a01b031663852a12e3836040518263ffffffff1660e01b8152600401611d6491815260200190565b6020604051808303816000875af1158015611d83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112949190614b07565b601754601b546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b906044016040805180830381865afa158015611dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e229190614c1d565b5092915050565b601754601b54604051630441a3e760e41b81526001600160a01b039092169163441a3e7091611e5c918590600401614994565b600060405180830381600087803b158015611e7657600080fd5b505af1158015611e8a573d6000803e3d6000fd5b5050505050565b6000611e9b611b08565b6001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401611ec6919061475e565b602060405180830381865afa158015611ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190614b07565b6000611f11611b08565b6001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ee3573d6000803e3d6000fd5b6000611f58610f97565b6001600160a01b031663fc57d4df611f6e611383565b6040518263ffffffff1660e01b8152600401611f8a919061475e565b602060405180830381865afa158015611fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcb9190614b07565b611fd3610f97565b6001600160a01b031663fc57d4df611fe9611b08565b6040518263ffffffff1660e01b8152600401612005919061475e565b602060405180830381865afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120469190614b07565b6120509084614a85565b610ba39190614aa4565b60008183106120695781611c73565b5090919050565b60008061207b611383565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120a6919061475e565b602060405180830381865afa1580156120c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e79190614b07565b9050670de0b6b3a76400006120fa611383565b6001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b9190614b07565b610c579083614a85565b600080612170610dd5565b6001600160a01b0316638e8f294b612186611383565b6040518263ffffffff1660e01b81526004016121a2919061475e565b606060405180830381865afa1580156121bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e39190614c41565b509392505050565b6112948363a9059cbb60e01b8484604051602401611c2a929190614c04565b600080600080600085875af19050806112945760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016108e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006122b56125c9565b50905060006122c2612070565b9050600060105469021e19e0c9bab24000006122de9190614aa4565b905060006122ea612165565b6122fc83670de0b6b3a7640000614a85565b6123069190614aa4565b61231890670de0b6b3a7640000614a6d565b83866123248583614a85565b61232e9190614aa4565b6123389190614bc0565b61234a90670de0b6b3a7640000614a85565b6123549190614aa4565b905060008061236b6123668488614bc0565b6136f8565b9150915061237881611c7a565b61238182613801565b337fdacd0a02d11128b25d6c3de23e91f71aa9dd5620c6f5c69f35a18d15e1168468886123ac610ba9565b6040516123ba929190614994565b60405180910390a250505050505050565b6000600c54806123d9611532565b11156123f75760405162461bcd60e51b81526004016108e890614bd7565b6002600154141561241a5760405162461bcd60e51b81526004016108e890614b89565b60026001558261242d576000915061258c565b6000612437613108565b90508061244857600092505061258c565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a082319061247990309060040161475e565b602060405180830381865afa158015612496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ba9190614b07565b9050808511156124e7576124d86124d18287614bc0565b8284613836565b90506124e4818661205a565b94505b6124ef6110ab565b5093955061252e93508592506125079150610a799050565b612512886001614a6d565b61251c9190614a85565b6125269190614aa4565b60055461205a565b93506125503061253c611af9565b600a546001600160a01b0316919088613937565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643386604051612581929190614c04565b60405180910390a150505b5060018055919050565b600081156125c157600b54600a546125bc9184916001600160a01b03918216911661396f565b610ba3565b600092915050565b60008060006125d66139a7565b90506000806125e3611ac2565b9150915060006125f1611420565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561262e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126529190614b07565b90508061265f8585614a85565b6126699190614aa4565b9550806126768584614a85565b6126809190614aa4565b9450505050509091565b6000806126b1612698611420565b846126a1611420565b6001600160a01b031691906121eb565b60006126cb6126be610e5d565b6126c6610b8a565b613a35565b5090506000806126d9611420565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401612704919061475e565b60408051808303816000875af1158015612722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127469190614c1d565b91509150612752610e5d565b6001600160a01b0316836001600160a01b031614612771578082612774565b81815b94509450505050915091565b6000600c548061278e611532565b11156127ac5760405162461bcd60e51b81526004016108e890614bd7565b600260015414156127cf5760405162461bcd60e51b81526004016108e890614b89565b6002600155826127e2576000915061258c565b60006127ec613108565b90506127f6610b5b565b6128008286614a6d565b11156128425760405162461bcd60e51b81526020600482015260116024820152701213140e8813d5915497d3505617d51593607a1b60448201526064016108e8565b6005541561286e57808461285560055490565b61285f9190614a85565b6128699190614aa4565b612870565b835b925061289161287d611af9565b600a546001600160a01b0316903087613937565b61289a846130a9565b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c33856040516128cb929190614c04565b60405180910390a1505060018055919050565b60006128ea60006136f8565b505060006128f6613b18565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061292c90309060040161475e565b602060405180830381865afa158015612949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296d9190614b07565b9050808211156129b6576129b06129848284614bc0565b600a54600b546001600160a01b03918216911661299f611420565b6001600160a01b0316929190613b6c565b506129f9565b818111156129f9576129f76129cb8383614bc0565b600b54600a546001600160a01b0391821691166129e6611420565b6001600160a01b0316929190613c4b565b505b600b546040516370a0823160e01b8152612a71916001600160a01b0316906370a0823190612a2b90309060040161475e565b602060405180830381865afa158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190614b07565b611c7a565b6000612a7b613cac565b9050612a8681611d2d565b600a546040516370a0823160e01b81526001600160a01b03909116906370a0823190612ab690309060040161475e565b602060405180830381865afa158015612ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f9190614b07565b601754601b54604051631c57762b60e31b8152606092839283926001600160a01b039092169163e2bbb15891612b3291600090600401614994565b600060405180830381600087803b158015612b4c57600080fd5b505af1158015612b60573d6000803e3d6000fd5b5060019250612b6d915050565b604051908082528060200260200182016040528015612b96578160200160208202803683370190505b506019546040516370a0823160e01b81529194506001600160a01b0316906370a0823190612bc890309060040161475e565b602060405180830381865afa158015612be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c099190614b07565b83600081518110612c1c57612c1c614af1565b60200260200101818152505082600081518110612c3b57612c3b614af1565b602002602001015160001415612c52575050610ba3565b601854612cb4906001600160a01b03168686600081612c7357612c73614af1565b9050602002810190612c859190614c9a565b60195486516001600160a01b03909116908790600090612ca757612ca7614af1565b6020026020010151613ce1565b60195483516001600160a01b0390911690600080516020614f0d833981519152908590600090612ce657612ce6614af1565b6020026020010151604051612cfd91815260200190565b60405180910390a2478015612da057612d14610b8a565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612d4e57600080fd5b505af1158015612d62573d6000803e3d6000fd5b5050505050612d6f610b8a565b6001600160a01b0316600080516020614f0d83398151915282604051612d9791815260200190565b60405180910390a25b50505092915050565b6060612db3610dd5565b6001600160a01b0316630952c5636000306040518363ffffffff1660e01b8152600401612de1929190614cba565b600060405180830381600087803b158015612dfb57600080fd5b505af1158015612e0f573d6000803e3d6000fd5b5060019250612e1c915050565b604051908082528060200260200182016040528015612e45578160200160208202803683370190505b506016546040516370a0823160e01b81529192506001600160a01b0316906370a0823190612e7790309060040161475e565b602060405180830381865afa158015612e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb89190614b07565b81600081518110612ecb57612ecb614af1565b602002602001018181525050600081600081518110612eec57612eec614af1565b60200260200101511115612f9e57612f4c612f05611b17565b84846000818110612f1857612f18614af1565b9050602002810190612f2a9190614c9a565b60165484516001600160a01b03909116908590600090612ca757612ca7614af1565b60165481516001600160a01b0390911690600080516020614f0d833981519152908390600090612f7e57612f7e614af1565b6020026020010151604051612f9591815260200190565b60405180910390a25b612fa6610dd5565b6001600160a01b0316630952c5636001306040518363ffffffff1660e01b8152600401612fd4929190614cba565b600060405180830381600087803b158015612fee57600080fd5b505af1158015613002573d6000803e3d6000fd5b504792505081159050611e2257613017610b8a565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561305157600080fd5b505af1158015613065573d6000803e3d6000fd5b5050505050613072610b8a565b6001600160a01b0316600080516020614f0d8339815191528260405161309a91815260200190565b60405180910390a25092915050565b6103e88110156130b65750565b60006130c182613286565b905060006130ce82613e86565b90506130e26130dd8385614bc0565b613801565b6130eb81613eac565b60006130f78383613f67565b905061310281614007565b50505050565b600080613113613cac565b9050600061311f613b18565b9050600061312c82612596565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061316290309060040161475e565b602060405180830381865afa15801561317f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a39190614b07565b9050600081156131bb576131b682612596565b6131be565b60005b905060006131ca6125c9565b50600a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061320190309060040161475e565b602060405180830381865afa15801561321e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132429190614b07565b9050828186613252856002614a85565b61325c908b614a6d565b6132669190614bc0565b6132709190614a6d565b61327a9190614a6d565b97505050505050505090565b600080613291611628565b905061329f81612710614a6d565b6132a98285614a85565b611c739190614aa4565b60006132be83613e86565b905060006132ca611e91565b90508082111561331a576132f560006132e3868661403a565b116132ee57846136f8565b60006136f8565b5050613300836140ae565b5061331590506133108284614bc0565b613eac565b6133ce565b808210156133ce5761332c60006136f8565b5050600b546040516370a0823160e01b81526000916133b0916001600160a01b03909116906370a082319061336590309060040161475e565b602060405180830381865afa158015613382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a69190614b07565b610b858585614bc0565b905080156133c1576133c181611c7a565b6133ca846140ae565b5050505b6131028261410b565b60008060006133e68585613a35565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561342a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344e9190614cf2565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613485578082613488565b81815b90999098509650505050505050565b60006134ec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c619092919063ffffffff16565b805190915015611294578080602001905181019061350a9190614d37565b6112945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108e8565b6060824710156135ca5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108e8565b6001600160a01b0385163b6136215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108e8565b600080866001600160a01b0316858760405161363d9190614d54565b60006040518083038185875af1925050503d806000811461367a576040519150601f19603f3d011682016040523d82523d6000602084013e61367f565b606091505b509150915061368f82828661430c565b979650505050505050565b6136a2611b08565b6001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156136dc57600080fd5b505af11580156136f0573d6000803e3d6000fd5b505050505050565b60008060006137056125c9565b50905080841061371b5750600093849350915050565b60006137256139a7565b90506000826137348784614a85565b61373e9190614aa4565b9050600061374c8284614bc0565b90506000613758611420565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613783919061475e565b602060405180830381865afa1580156137a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c49190614b07565b9050808211156137db576137db610ae18284614bc0565b81156137ef576137ea8261268a565b6137f3565b6000805b965096505050505050915091565b613809611383565b6001600160a01b031663a0712d68826040518263ffffffff1660e01b8152600401611cea91815260200190565b6000806103e8613848866103ed614a85565b6138529190614aa4565b9050600061385e6125c9565b50905060008461386e8385614a85565b6138789190614aa4565b90506000613884611e91565b9050600061389183613e86565b905083831015806138a25750818110155b156138bb576138af6128de565b95505050505050611c73565b6000806138cb6123668688614bc0565b915091506138d881611c7a565b818b11156138ff576138f26138ed838d614bc0565b614345565b6138fc9083614a6d565b91505b6000613909610ba9565b9050600d54811161391d5761391d816122ab565b6139278b84614a6d565b9c9b505050505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526131029085906323b872dd60e01b90608401611c2a565b60008361397e57506000611c73565b60008061398e8585611ae0611420565b9150915061399d868383614378565b9695505050505050565b6000806139b2611da7565b601a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906139e890309060040161475e565b602060405180830381865afa158015613a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a299190614b07565b90506115958183614a6d565b600080826001600160a01b0316846001600160a01b03161415613a9a5760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f41444452455353455300000060448201526064016108e8565b826001600160a01b0316846001600160a01b031610613aba578284613abd565b83835b90925090506001600160a01b038216613b115760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b60448201526064016108e8565b9250929050565b6000613b22611b08565b6001600160a01b03166317bfdfbc306040518263ffffffff1660e01b8152600401613b4d919061475e565b6020604051808303816000875af1158015611ee3573d6000803e3d6000fd5b600080613b7b8686868661443a565b90506000613b898486613a35565b509050600080826001600160a01b0316876001600160a01b031614613bb057876000613bb4565b6000885b9092509050613bcd6001600160a01b0388168a866121eb565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f90613c0c9085908590309060248101614d66565b600060405180830381600087803b158015613c2657600080fd5b505af1158015613c3a573d6000803e3d6000fd5b50959b9a5050505050505050505050565b600080613c5a86868686614500565b90506000613c688486613a35565b509050600080826001600160a01b0316876001600160a01b031614613c8f57836000613c93565b6000845b9092509050613bcd6001600160a01b0388168a8a6121eb565b6000613cb6611383565b6001600160a01b0316633af9e669306040518263ffffffff1660e01b8152600401613b4d919061475e565b6000613ced8480614d93565b6001613cf98780614d93565b613d04929150614bc0565b818110613d1357613d13614af1565b9050602002016020810190613d2891906147a0565b90506001600160a01b038316613d3e8580614d93565b6000818110613d4f57613d4f614af1565b9050602002016020810190613d6491906147a0565b6001600160a01b0316148015613d925750613d7d610b8a565b6001600160a01b0316816001600160a01b0316145b80613db55750613da0610e5d565b6001600160a01b0316816001600160a01b0316145b613df95760405162461bcd60e51b81526020600482015260156024820152740928cc2e4dac2c4d8ca7440aea49e9c8ebea082a89605b1b60448201526064016108e8565b6001600160a01b0385166338ed1739836020870135613e188880614d93565b308a604001356040518763ffffffff1660e01b8152600401613e3f96959493929190614ddc565b6000604051808303816000875af1158015613e5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136f09190810190614e4f565b600081156125c157600a54600b546125bc9184916001600160a01b03918216911661396f565b613eb4611b08565b6001600160a01b031663c5ebeaec826040518263ffffffff1660e01b8152600401613ee191815260200190565b6020604051808303816000875af1158015613f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f249190614b07565b50613f2d610b8a565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156136dc57600080fd5b6000613f7d613f74611420565b846126a1610e5d565b613f91613f88611420565b836126a1610b8a565b613f99611420565b6001600160a01b0316636a627842306040518263ffffffff1660e01b8152600401613fc4919061475e565b6020604051808303816000875af1158015613fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190614b07565b601754601b54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891611e5c918590600401614994565b600080614045612070565b905080831015614059576000915050610ba3565b60006140636125c9565b5090506000818611614076576000614080565b6140808287614bc0565b9050600061408e8487614bc0565b90508082106140a4576000945050505050610ba3565b61368f8282614bc0565b60008060006140bb612070565b9050838114156140d15750600093849350915050565b8381116140f1576140ea6140e58286614bc0565b6145c1565b6000614100565b60006141006138ed8684614bc0565b909590945092505050565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a082319061413c90309060040161475e565b602060405180830381865afa158015614159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061417d9190614b07565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906141b390309060040161475e565b602060405180830381865afa1580156141d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f49190614b07565b905060006142006125c9565b915050808410156142115750505050565b600061423f600261422186613e86565b61422b9086614a6d565b6142359190614aa4565b610b858488614bc0565b9050600061424c82612596565b9050848110156142925761427e6142638287614bc0565b600a54600b546001600160a01b0391821691166129e6611420565b6142889085614a6d565b93508094506142b7565b818411156142b7576142a76129cb8386614bc0565b6142b19086614a6d565b94508193505b8360006142c382612596565b9050808710156142db5750856142d881613e86565b91505b806142ea575050505050505050565b60006142f68284613f67565b905061430181614007565b505050505050505050565b6060831561431b575081611c73565b82511561432b5782518084602001fd5b8160405162461bcd60e51b81526004016108e8919061474b565b60008061435061465a565b905082811161435f5780614361565b825b915081156143725761437282611d2d565b50919050565b60008084116143c95760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e5400000060448201526064016108e8565b6000831180156143d95750600082115b6144255760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c495155494449545960448201526064016108e8565b826144308386614a85565b611c709190614aa4565b60008084116144975760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b60648201526084016108e8565b6000806144a58786866133d7565b909250905060006144b68784614a85565b6144c2906103e8614a85565b905060006144d08884614bc0565b6144dc906103e5614a85565b90506144e88183614aa4565b6144f3906001614a6d565b9998505050505050505050565b600080841161455d5760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b60648201526084016108e8565b60008061456b8786866133d7565b9092509050600061457e876103e5614a85565b9050600061458c8383614a85565b905060008261459d866103e8614a85565b6145a79190614a6d565b90506145b38183614aa4565b9a9950505050505050505050565b6000806145cc610e5d565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016145f7919061475e565b602060405180830381865afa158015614614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146389190614b07565b90508281116146475780614649565b825b915081156143725761437282613801565b600080614665612070565b90506000614674610b80611e91565b905060006063614682612165565b61469484670de0b6b3a7640000614a85565b61469f906064614a85565b6146a99190614aa4565b6146b39190614aa4565b9050828111156146c7576000935050505090565b610c1f8184614bc0565b600080604083850312156146e457600080fd5b50508035926020909101359150565b60005b8381101561470e5781810151838201526020016146f6565b838111156131025750506000910152565b600081518084526147378160208601602086016146f3565b601f01601f19169290920160200192915050565b602081526000611c73602083018461471f565b6001600160a01b0391909116815260200190565b60006020828403121561478457600080fd5b5035919050565b6001600160a01b038116811461190e57600080fd5b6000602082840312156147b257600080fd5b8135611c738161478b565b60008083601f8401126147cf57600080fd5b5081356001600160401b038111156147e657600080fd5b6020830191508360208260051b8501011115613b1157600080fd5b60008060006040848603121561481657600080fd5b83356148218161478b565b925060208401356001600160401b0381111561483c57600080fd5b614848868287016147bd565b9497909650939450505050565b801515811461190e57600080fd5b6000806040838503121561487657600080fd5b82356148818161478b565b9150602083013561489181614855565b809150509250929050565b6000602082840312156148ae57600080fd5b813561ffff81168114611c7357600080fd5b600080600080604085870312156148d657600080fd5b84356001600160401b03808211156148ed57600080fd5b6148f9888389016147bd565b9096509450602087013591508082111561491257600080fd5b5061491f878288016147bd565b95989497509550505050565b600081518084526020808501945080840160005b8381101561495b5781518752958201959082019060010161493f565b509495945050505050565b604081526000614979604083018561492b565b828103602084015261498b818561492b565b95945050505050565b918252602082015260400190565b6020808252600e908201526d0a6e8e4c2e874409c9ebe82aaa8960931b604082015260600190565b600181811c908216806149de57607f821691505b6020821081141561437257634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215614a4657600080fd5b815160ff81168114611c7357600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614a8057614a80614a57565b500190565b6000816000190483118215151615614a9f57614a9f614a57565b500290565b600082614ac157634e487b7160e01b600052601260045260246000fd5b500490565b60208082526011908201527014dd1c985d0e8813d3931657d590555315607a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614b1957600080fd5b5051919050565b6000600019821415614b3457614b34614a57565b5060010190565b60208082528181018390526000908460408401835b86811015614b7e578235614b638161478b565b6001600160a01b031682529183019190830190600101614b50565b509695505050505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082821015614bd257614bd2614a57565b500390565b60208082526013908201527209098a07440a0a492868abe9a92a69a82a8869606b1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60008060408385031215614c3057600080fd5b505080516020909101519092909150565b600080600060608486031215614c5657600080fd5b8351614c6181614855565b602085015160408601519194509250614c7981614855565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60008235605e19833603018112614cb057600080fd5b9190910192915050565b60ff9290921682526001600160a01b0316602082015260400190565b80516001600160701b0381168114614ced57600080fd5b919050565b600080600060608486031215614d0757600080fd5b614d1084614cd6565b9250614d1e60208501614cd6565b9150604084015163ffffffff81168114614c7957600080fd5b600060208284031215614d4957600080fd5b8151611c7381614855565b60008251614cb08184602087016146f3565b84815283602082015260018060a01b038316604082015260806060820152600061399d608083018461471f565b6000808335601e19843603018112614daa57600080fd5b8301803591506001600160401b03821115614dc457600080fd5b6020019150600581901b3603821315613b1157600080fd5b868152602080820187905260a0604083018190528201859052600090869060c08401835b88811015614e2e578335614e138161478b565b6001600160a01b031682529282019290820190600101614e00565b506001600160a01b0396909616606085015250505060800152949350505050565b60006020808385031215614e6257600080fd5b82516001600160401b0380821115614e7957600080fd5b818501915085601f830112614e8d57600080fd5b815181811115614e9f57614e9f614c84565b8060051b604051601f19603f83011681018181108582111715614ec457614ec4614c84565b604052918252848201925083810185019188831115614ee257600080fd5b938501935b82851015614f0057845184529385019392850192614ee7565b9897505050505050505056fe3efad319b6afe1e0317f51df66abdc4d7a7c8b1cfda31f03440b4ad255af7245a2646970667358221220606f1090d90ae58064014eed97badf16b226c92201d931bf2a9eb875af9726e464736f6c634300080a0033",
  "libraries": {
    "UniUtils": "0x9f2Ef965ec5fF80ceFA14A9Ec2e7a10715dD5B34"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getMaxTvl()": {
        "returns": {
          "_0": "MaxTvl"
        }
      },
      "isCEther()": {
        "details": "Only present in Fuse cTokens, not Compound cTokens.",
        "returns": {
          "_0": "True if the strategy accepts ETH, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeemUnderlying(uint256)": {
        "params": {
          "amount": "The amount of underlying tokens to withdraw."
        },
        "returns": {
          "errCode": "An error code, or 0 if the withdrawal was successful."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address,address[])": {
        "notice": "Withdraws any ERC20 tokens back to recipient."
      },
      "getMaxTvl()": {
        "notice": "Returns max deposits a strategy can take."
      },
      "getPricePerShare()": {
        "notice": "Returns the share price of the strategy in `underlying` units, multiplied  by 1e18"
      },
      "isCEther()": {
        "notice": "Returns whether the strategy accepts ETH or an ERC20."
      },
      "redeemUnderlying(uint256)": {
        "notice": "Withdraws a specific amount of underlying tokens from the strategy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1647,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2302,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 21717,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "isInitialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 15543,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "lastHarvest",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15545,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15547,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_shares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15549,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 15551,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 15555,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_managers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15557,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "BASE_UNIT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 15951,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_underlying",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)2997"
      },
      {
        "astId": 15954,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_short",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)2997"
      },
      {
        "astId": 15957,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "maxPriceMismatch",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 15963,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "minLoanHealth",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 15966,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "rebalanceThreshold",
        "offset": 0,
        "slot": "14",
        "type": "t_uint16"
      },
      {
        "astId": 15968,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_maxTvl",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 15971,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_safeCollateralRatio",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 19131,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_cTokenLend",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ICTokenErc20)13333"
      },
      {
        "astId": 19134,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_cTokenBorrow",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(ICTokenErc20)13333"
      },
      {
        "astId": 19137,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_comptroller",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IComptroller)13585"
      },
      {
        "astId": 19140,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_oracle",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(ICompPriceOracle)13366"
      },
      {
        "astId": 19272,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_router",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IUniswapV2Router01)14706"
      },
      {
        "astId": 19275,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_farmToken",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IERC20)2997"
      },
      {
        "astId": 20479,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_farm",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IMasterChef)14015"
      },
      {
        "astId": 20482,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_router",
        "offset": 0,
        "slot": "24",
        "type": "t_contract(IUniswapV2Router01)14706"
      },
      {
        "astId": 20485,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_farmToken",
        "offset": 0,
        "slot": "25",
        "type": "t_contract(IERC20)2997"
      },
      {
        "astId": 20488,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_pair",
        "offset": 0,
        "slot": "26",
        "type": "t_contract(IUniswapV2Pair)14398"
      },
      {
        "astId": 20490,
        "contract": "src/strategies/implementations/USDCglmrSTELLAwell.sol:USDCglmrSTELLAwell",
        "label": "_farmId",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICTokenErc20)13333": {
        "encoding": "inplace",
        "label": "contract ICTokenErc20",
        "numberOfBytes": "20"
      },
      "t_contract(ICompPriceOracle)13366": {
        "encoding": "inplace",
        "label": "contract ICompPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IComptroller)13585": {
        "encoding": "inplace",
        "label": "contract IComptroller",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2997": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef)14015": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)14398": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router01)14706": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router01",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}