{
  "address": "0x8e3FFE1febd4034bDBB5b233cEcF7981849c583e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "AllowedUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeePercent",
          "type": "uint256"
        }
      ],
      "name": "FeePercentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rvTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract Strategy[]",
          "name": "strategies",
          "type": "address[]"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newHarvestDelay",
          "type": "uint64"
        }
      ],
      "name": "HarvestDelayUpdateScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newHarvestDelay",
          "type": "uint64"
        }
      ],
      "name": "HarvestDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newHarvestWindow",
          "type": "uint128"
        }
      ],
      "name": "HarvestWindowUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "ManagerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTvl",
          "type": "uint256"
        }
      ],
      "name": "MaxTvlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "setPublic",
          "type": "bool"
        }
      ],
      "name": "SetPublic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "StrategyDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyDistrusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategySeized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyTrusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "StrategyWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTargetFloatPercent",
          "type": "uint256"
        }
      ],
      "name": "TargetFloatPercentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newUnderlyingIsWETH",
          "type": "bool"
        }
      ],
      "name": "UnderlyingIsWETHUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "replacedStrategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "replacementStrategy",
          "type": "address"
        }
      ],
      "name": "WithdrawalQueueIndexReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "replacedStrategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "previousTipStrategy",
          "type": "address"
        }
      ],
      "name": "WithdrawalQueueIndexReplacedWithTip",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index2",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "newStrategy1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "newStrategy2",
          "type": "address"
        }
      ],
      "name": "WithdrawalQueueIndexesSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "poppedStrategy",
          "type": "address"
        }
      ],
      "name": "WithdrawalQueuePopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Strategy",
          "name": "pushedStrategy",
          "type": "address"
        }
      ],
      "name": "WithdrawalQueuePushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract Strategy[]",
          "name": "replacedWithdrawalQueue",
          "type": "address[]"
        }
      ],
      "name": "WithdrawalQueueSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDERLYING",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "bulkAllow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rvTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cleanWithdrawalQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "depositIntoStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "distrustStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum VaultUpgradable.PnlLock",
          "name": "lock",
          "type": "uint8"
        }
      ],
      "name": "exchangeRateLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxTvl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getStrategyData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        },
        {
          "internalType": "uint248",
          "name": "balance",
          "type": "uint248"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalQueue",
      "outputs": [
        {
          "internalType": "contract Strategy[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy[]",
          "name": "strategies",
          "type": "address[]"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestDelay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestWindow",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_UNDERLYING",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_harvestDelay",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "_harvestWindow",
          "type": "uint128"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvest",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvestWindowStart",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockedLoss",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockedProfit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "prevStrategy",
          "type": "address"
        },
        {
          "internalType": "contract Strategy",
          "name": "newStrategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "queueIndex",
          "type": "uint256"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextHarvestDelay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "popFromWithdrawalQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "pushToWithdrawalQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "pushToWithdrawalQueueValidated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rvTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "contract Strategy",
          "name": "replacementStrategy",
          "type": "address"
        }
      ],
      "name": "replaceWithdrawalQueueIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "replaceWithdrawalQueueIndexWithTip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "seizeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newHarvestDelay",
          "type": "uint64"
        }
      ],
      "name": "setHarvestDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newHarvestWindow",
          "type": "uint128"
        }
      ],
      "name": "setHarvestWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTvl_",
          "type": "uint256"
        }
      ],
      "name": "setMaxTvl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isPublic_",
          "type": "bool"
        }
      ],
      "name": "setPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTargetFloatPercent",
          "type": "uint256"
        }
      ],
      "name": "setTargetFloatPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newUnderlyingIsWETH",
          "type": "bool"
        }
      ],
      "name": "setUnderlyingIsWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy[]",
          "name": "newQueue",
          "type": "address[]"
        }
      ],
      "name": "setWithdrawalQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index2",
          "type": "uint256"
        }
      ],
      "name": "swapWithdrawalQueueIndexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetFloatPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFloat",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum VaultUpgradable.PnlLock",
          "name": "lock",
          "type": "uint8"
        }
      ],
      "name": "totalHoldingsLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalUnderlyingHeld",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStrategyHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "trustStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingIsWETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStratTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxTvl",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Strategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalQueue",
      "outputs": [
        {
          "internalType": "contract Strategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5b398312cf0bc56cf5c052f4fa38aa452be5c5f083f9accb3b7f9b654272ba32",
  "receipt": {
    "to": null,
    "from": "0xD118c8B1653eA6ca4D62b01d707839196020F0D6",
    "contractAddress": "0x8e3FFE1febd4034bDBB5b233cEcF7981849c583e",
    "transactionIndex": 0,
    "gasUsed": "4958802",
    "logsBloom": "0x
    "blockHash": "0x1c81e605aecc8f53dbeaf72d273f9306f8909c26eeb585f8e00b69b3a033824a",
    "transactionHash": "0x5b398312cf0bc56cf5c052f4fa38aa452be5c5f083f9accb3b7f9b654272ba32",
    "logs": [],
    "blockNumber": 1467413,
    "cumulativeGasUsed": "4958802",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "840d0470c3757998b83f67edf2c60b6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"AllowedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"}],\"name\":\"FeePercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rvTokenAmount\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Strategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newHarvestDelay\",\"type\":\"uint64\"}],\"name\":\"HarvestDelayUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newHarvestDelay\",\"type\":\"uint64\"}],\"name\":\"HarvestDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newHarvestWindow\",\"type\":\"uint128\"}],\"name\":\"HarvestWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"ManagerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTvl\",\"type\":\"uint256\"}],\"name\":\"MaxTvlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setPublic\",\"type\":\"bool\"}],\"name\":\"SetPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyDistrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategySeized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyTrusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTargetFloatPercent\",\"type\":\"uint256\"}],\"name\":\"TargetFloatPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newUnderlyingIsWETH\",\"type\":\"bool\"}],\"name\":\"UnderlyingIsWETHUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"replacedStrategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"replacementStrategy\",\"type\":\"address\"}],\"name\":\"WithdrawalQueueIndexReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"replacedStrategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"previousTipStrategy\",\"type\":\"address\"}],\"name\":\"WithdrawalQueueIndexReplacedWithTip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index2\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"newStrategy1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"newStrategy2\",\"type\":\"address\"}],\"name\":\"WithdrawalQueueIndexesSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"poppedStrategy\",\"type\":\"address\"}],\"name\":\"WithdrawalQueuePopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Strategy\",\"name\":\"pushedStrategy\",\"type\":\"address\"}],\"name\":\"WithdrawalQueuePushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Strategy[]\",\"name\":\"replacedWithdrawalQueue\",\"type\":\"address[]\"}],\"name\":\"WithdrawalQueueSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"bulkAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rvTokenAmount\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanWithdrawalQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"depositIntoStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"distrustStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VaultUpgradable.PnlLock\",\"name\":\"lock\",\"type\":\"uint8\"}],\"name\":\"exchangeRateLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getStrategyData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"internalType\":\"uint248\",\"name\":\"balance\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalQueue\",\"outputs\":[{\"internalType\":\"contract Strategy[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestDelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestWindow\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_UNDERLYING\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_harvestDelay\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_harvestWindow\",\"type\":\"uint128\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestWindowStart\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockedLoss\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockedProfit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"prevStrategy\",\"type\":\"address\"},{\"internalType\":\"contract Strategy\",\"name\":\"newStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"queueIndex\",\"type\":\"uint256\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextHarvestDelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popFromWithdrawalQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"pushToWithdrawalQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"pushToWithdrawalQueueValidated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rvTokenAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"contract Strategy\",\"name\":\"replacementStrategy\",\"type\":\"address\"}],\"name\":\"replaceWithdrawalQueueIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"replaceWithdrawalQueueIndexWithTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"seizeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newHarvestDelay\",\"type\":\"uint64\"}],\"name\":\"setHarvestDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newHarvestWindow\",\"type\":\"uint128\"}],\"name\":\"setHarvestWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTvl_\",\"type\":\"uint256\"}],\"name\":\"setMaxTvl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPublic_\",\"type\":\"bool\"}],\"name\":\"setPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTargetFloatPercent\",\"type\":\"uint256\"}],\"name\":\"setTargetFloatPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newUnderlyingIsWETH\",\"type\":\"bool\"}],\"name\":\"setUnderlyingIsWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy[]\",\"name\":\"newQueue\",\"type\":\"address[]\"}],\"name\":\"setWithdrawalQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index2\",\"type\":\"uint256\"}],\"name\":\"swapWithdrawalQueueIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetFloatPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VaultUpgradable.PnlLock\",\"name\":\"lock\",\"type\":\"uint8\"}],\"name\":\"totalHoldingsLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnderlyingHeld\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStrategyHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"trustStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingIsWETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStratTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTvl\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalQueue\",\"outputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Transmissions11 and JetJadeja\",\"events\":{\"Deposit(address,uint256)\":{\"params\":{\"underlyingAmount\":\"The amount of underlying tokens that were deposited.\",\"user\":\"The address that deposited into the Vault.\"}},\"FeePercentUpdated(address,uint256)\":{\"params\":{\"newFeePercent\":\"The new fee percentage.\",\"user\":\"The authorized user who triggered the update.\"}},\"FeesClaimed(address,uint256)\":{\"params\":{\"rvTokenAmount\":\"The amount of rvTokens that were claimed.\",\"user\":\"The authorized user who claimed the fees.\"}},\"Harvest(address,address[])\":{\"params\":{\"strategies\":\"The trusted strategies that were harvested.\",\"user\":\"The authorized user who triggered the harvest.\"}},\"HarvestDelayUpdateScheduled(address,uint64)\":{\"params\":{\"newHarvestDelay\":\"The scheduled updated harvest delay.\",\"user\":\"The authorized user who triggered the update.\"}},\"HarvestDelayUpdated(address,uint64)\":{\"params\":{\"newHarvestDelay\":\"The new harvest delay.\",\"user\":\"The authorized user who triggered the update.\"}},\"HarvestWindowUpdated(address,uint128)\":{\"params\":{\"newHarvestWindow\":\"The new harvest window.\",\"user\":\"The authorized user who triggered the update.\"}},\"Initialized(address)\":{\"params\":{\"user\":\"The authorized user who triggered the initialization.\"}},\"StrategyDeposit(address,address,uint256)\":{\"params\":{\"strategy\":\"The strategy that was deposited into.\",\"underlyingAmount\":\"The amount of underlying tokens that were deposited.\",\"user\":\"The authorized user who triggered the deposit.\"}},\"StrategyDistrusted(address,address)\":{\"params\":{\"strategy\":\"The strategy that became untrusted.\",\"user\":\"The authorized user who untrusted the strategy.\"}},\"StrategySeized(address,address)\":{\"params\":{\"strategy\":\"The strategy that was seized.\",\"user\":\"The authorized user who triggered the seize.\"}},\"StrategyTrusted(address,address)\":{\"params\":{\"strategy\":\"The strategy that became trusted.\",\"user\":\"The authorized user who trusted the strategy.\"}},\"StrategyWithdrawal(address,address,uint256)\":{\"params\":{\"strategy\":\"The strategy that was withdrawn from.\",\"underlyingAmount\":\"The amount of underlying tokens that were withdrawn.\",\"user\":\"The authorized user who triggered the withdrawal.\"}},\"TargetFloatPercentUpdated(address,uint256)\":{\"params\":{\"newTargetFloatPercent\":\"The new target float percentage.\",\"user\":\"The authorized user who triggered the update.\"}},\"UnderlyingIsWETHUpdated(address,bool)\":{\"params\":{\"newUnderlyingIsWETH\":\"Whether the Vault nows treats the underlying as WETH.\",\"user\":\"The authorized user who triggered the update.\"}},\"Withdraw(address,uint256)\":{\"params\":{\"underlyingAmount\":\"The amount of underlying tokens that were withdrawn.\",\"user\":\"The address that withdrew from the Vault.\"}},\"WithdrawalQueueIndexReplaced(address,uint256,address,address)\":{\"params\":{\"index\":\"The index of the replaced strategy in the withdrawal queue.\",\"replacedStrategy\":\"The strategy in the withdrawal queue that was replaced.\",\"replacementStrategy\":\"The strategy that overrode the replaced strategy at the index.\",\"user\":\"The authorized user who triggered the replacement.\"}},\"WithdrawalQueueIndexReplacedWithTip(address,uint256,address,address)\":{\"params\":{\"index\":\"The index of the replaced strategy in the withdrawal queue.\",\"previousTipStrategy\":\"The previous tip of the queue that replaced the strategy.\",\"replacedStrategy\":\"The strategy in the withdrawal queue replaced by the tip.\",\"user\":\"The authorized user who triggered the replacement.\"}},\"WithdrawalQueueIndexesSwapped(address,uint256,uint256,address,address)\":{\"params\":{\"index1\":\"One index involved in the swap\",\"index2\":\"The other index involved in the swap.\",\"newStrategy1\":\"The strategy (previously at index2) that replaced index1.\",\"newStrategy2\":\"The strategy (previously at index1) that replaced index2.\",\"user\":\"The authorized user who triggered the swap.\"}},\"WithdrawalQueuePopped(address,address)\":{\"params\":{\"poppedStrategy\":\"The strategy popped from the withdrawal queue.\",\"user\":\"The authorized user who triggered the pop.\"}},\"WithdrawalQueuePushed(address,address)\":{\"params\":{\"pushedStrategy\":\"The strategy pushed to the withdrawal queue.\",\"user\":\"The authorized user who triggered the push.\"}},\"WithdrawalQueueSet(address,address[])\":{\"params\":{\"replacedWithdrawalQueue\":\"The new withdrawal queue.\",\"user\":\"The authorized user who triggered the set.\"}}},\"kind\":\"dev\",\"methods\":{\"addStrategy(address)\":{\"params\":{\"strategy\":\"The strategy to add.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceOfUnderlying(address)\":{\"params\":{\"user\":\"The user to get the underlying balance of.\"},\"returns\":{\"_0\":\"The user's Vault balance in underlying tokens.\"}},\"claimFees(uint256)\":{\"details\":\"Accrued fees are measured as rvTokens held by the Vault.\",\"params\":{\"rvTokenAmount\":\"The amount of rvTokens to claim.\"}},\"cleanWithdrawalQueue()\":{\"details\":\"This is a public method to ensure admin cannot fill the queue\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"underlyingAmount\":\"The amount of the underlying token to deposit.\"}},\"depositIntoStrategy(address,uint256)\":{\"params\":{\"strategy\":\"The trusted strategy to deposit into.\",\"underlyingAmount\":\"The amount of underlying tokens in float to deposit.\"}},\"distrustStrategy(address)\":{\"params\":{\"strategy\":\"The strategy to make untrusted.\"}},\"exchangeRate()\":{\"returns\":{\"_0\":\"The amount of underlying tokens an rvToken can be redeemed for.\"}},\"exchangeRateLock(uint8)\":{\"returns\":{\"_0\":\"The amount of underlying tokens an rvToken can be redeemed for.\"}},\"getWithdrawalQueue()\":{\"details\":\"This is provided because Solidity converts public arrays into index getters, but we need a way to allow external contracts and users to access the whole array.\",\"returns\":{\"_0\":\"An ordered array of strategies representing the withdrawal queue.\"}},\"harvest(address[])\":{\"details\":\"Will always revert if called outside of an active harvest window or before the harvest delay has passed.\",\"params\":{\"strategies\":\"The trusted strategies to harvest.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,address,uint256,uint64,uint128)\":{\"params\":{\"_UNDERLYING\":\"The ERC20 compliant token the Vault should accept.\"}},\"lockedProfit()\":{\"returns\":{\"_0\":\"The current amount of locked profit.\"}},\"migrateStrategy(address,address,uint256)\":{\"params\":{\"newStrategy\":\"The strategy to add.\",\"prevStrategy\":\"The strategy to remove.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"popFromWithdrawalQueue()\":{\"details\":\"Be careful, another authorized user could push a different strategy than expected to the queue while a popFromWithdrawalQueue transaction is pending.\"},\"pushToWithdrawalQueue(address)\":{\"details\":\"Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront.\",\"params\":{\"strategy\":\"The strategy to be inserted at the front of the withdrawal queue.\"}},\"pushToWithdrawalQueueValidated(address)\":{\"details\":\"This is a public method to ensure admin cannot prevent withdrawals by emptying the queue\",\"params\":{\"strategy\":\"The strategy to be inserted at the front of the withdrawal queue.\"}},\"redeem(uint256)\":{\"params\":{\"rvTokenAmount\":\"The amount of rvTokens to redeem for underlying tokens.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"replaceWithdrawalQueueIndex(uint256,address)\":{\"details\":\"Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront.\",\"params\":{\"index\":\"The index in the queue to replace.\",\"replacementStrategy\":\"The strategy to override the index with.\"}},\"replaceWithdrawalQueueIndexWithTip(uint256)\":{\"params\":{\"index\":\"The index of the strategy in the withdrawal queue to replace with the tip.\"}},\"seizeStrategy(address,address[])\":{\"details\":\"Intended for use in emergencies or other extraneous situations where the strategy requires interaction outside of the Vault's standard operating procedures.\",\"params\":{\"strategy\":\"The strategy to seize.\"}},\"setFeePercent(uint256)\":{\"params\":{\"newFeePercent\":\"The new fee percentage.\"}},\"setHarvestDelay(uint64)\":{\"details\":\"If the current harvest delay is 0, meaning it has not been set before, it will be updated immediately, otherwise it will be scheduled to take effect after the next harvest.\",\"params\":{\"newHarvestDelay\":\"The new harvest delay to set.\"}},\"setHarvestWindow(uint128)\":{\"details\":\"The Vault's harvestDelay must already be set before calling.\",\"params\":{\"newHarvestWindow\":\"The new harvest window.\"}},\"setTargetFloatPercent(uint256)\":{\"params\":{\"newTargetFloatPercent\":\"The new target float percentage.\"}},\"setUnderlyingIsWETH(bool)\":{\"details\":\"The underlying token must have 18 decimals, to match Ether's decimal scheme.\",\"params\":{\"newUnderlyingIsWETH\":\"Whether the Vault should treat the underlying as WETH.\"}},\"setWithdrawalQueue(address[])\":{\"details\":\"Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront.\",\"params\":{\"newQueue\":\"The new withdrawal queue.\"}},\"swapWithdrawalQueueIndexes(uint256,uint256)\":{\"params\":{\"index1\":\"One index involved in the swap\",\"index2\":\"The other index involved in the swap.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalFloat()\":{\"returns\":{\"_0\":\"The amount of underlying tokens that sit idly in the Vault.\"}},\"totalHoldings()\":{\"returns\":{\"_0\":\"totalUnderlyingHeld The total amount of underlying tokens the Vault holds.\"}},\"totalHoldingsLock(uint8)\":{\"returns\":{\"totalUnderlyingHeld\":\"The total amount of underlying tokens the Vault holds.\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"trustStrategy(address)\":{\"params\":{\"strategy\":\"The strategy to make trusted.\"}},\"withdraw(uint256)\":{\"params\":{\"underlyingAmount\":\"The amount of underlying tokens to withdraw.\"}},\"withdrawFromStrategy(address,uint256)\":{\"details\":\"Withdrawing from a strategy will not remove it from the withdrawal queue.\",\"params\":{\"strategy\":\"The strategy to withdraw from.\",\"underlyingAmount\":\"The amount of underlying tokens to withdraw.\"}}},\"stateVariables\":{\"BASE_UNIT\":{\"details\":\"Equal to 10 ** decimals. Used for fixed point arithmetic.\"},\"MAX_WITHDRAWAL_STACK_SIZE\":{\"details\":\"Needed to prevent denial of service attacks by queue operators.\"},\"feePercent\":{\"details\":\"A fixed point number where 1e18 represents 100% and 0 represents 0%.\"},\"harvestDelay\":{\"details\":\"Cannot be 0 as it opens harvests up to sandwich attacks.\"},\"harvestWindow\":{\"details\":\"Long harvest windows open the Vault up to profit distribution slowdown attacks.\"},\"lastHarvestWindowStart\":{\"details\":\"May be equal to lastHarvest if there was/has only been one harvest in the most last/current window.\"},\"nextHarvestDelay\":{\"details\":\"In the case that the next delay is 0, no update will be applied.\"},\"targetFloatPercent\":{\"details\":\"A fixed point number where 1e18 represents 100% and 0 represents 0%.\"},\"totalStrategyHoldings\":{\"details\":\"Includes maxLockedProfit, must be correctly subtracted to compute available/free holdings.\"},\"underlyingIsWETH\":{\"details\":\"If enabled the Vault will allow trusting strategies that accept Ether.\"},\"withdrawalQueue\":{\"details\":\"The queue is processed in descending order, meaning the last index will be withdrawn from first.Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront, meaning the queue may not reflect the \\\"true\\\" set used for withdrawals.\"}},\"title\":\"Rari Vault (rvToken)\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256)\":{\"notice\":\"Emitted after a successful deposit.\"},\"FeePercentUpdated(address,uint256)\":{\"notice\":\"Emitted when the fee percentage is updated.\"},\"FeesClaimed(address,uint256)\":{\"notice\":\"Emitted after fees are claimed.\"},\"Harvest(address,address[])\":{\"notice\":\"Emitted after a successful harvest.\"},\"HarvestDelayUpdateScheduled(address,uint64)\":{\"notice\":\"Emitted when the harvest delay is scheduled to be updated next harvest.\"},\"HarvestDelayUpdated(address,uint64)\":{\"notice\":\"Emitted when the harvest delay is updated.\"},\"HarvestWindowUpdated(address,uint128)\":{\"notice\":\"Emitted when the harvest window is updated.\"},\"Initialized(address)\":{\"notice\":\"Emitted when the Vault is initialized.\"},\"StrategyDeposit(address,address,uint256)\":{\"notice\":\"Emitted after the Vault deposits into a strategy contract.\"},\"StrategyDistrusted(address,address)\":{\"notice\":\"Emitted when a strategy is set to untrusted.\"},\"StrategySeized(address,address)\":{\"notice\":\"Emitted after a strategy is seized.\"},\"StrategyTrusted(address,address)\":{\"notice\":\"Emitted when a strategy is set to trusted.\"},\"StrategyWithdrawal(address,address,uint256)\":{\"notice\":\"Emitted after the Vault withdraws funds from a strategy contract.\"},\"TargetFloatPercentUpdated(address,uint256)\":{\"notice\":\"Emitted when the target float percentage is updated.\"},\"UnderlyingIsWETHUpdated(address,bool)\":{\"notice\":\"Emitted when whether the Vault should treat the underlying as WETH is updated.\"},\"Withdraw(address,uint256)\":{\"notice\":\"Emitted after a successful withdrawal.\"},\"WithdrawalQueueIndexReplaced(address,uint256,address,address)\":{\"notice\":\"Emitted when an index in the withdrawal queue is replaced.\"},\"WithdrawalQueueIndexReplacedWithTip(address,uint256,address,address)\":{\"notice\":\"Emitted when an index in the withdrawal queue is replaced with the tip.\"},\"WithdrawalQueueIndexesSwapped(address,uint256,uint256,address,address)\":{\"notice\":\"Emitted when the strategies at two indexes are swapped.\"},\"WithdrawalQueuePopped(address,address)\":{\"notice\":\"Emitted when a strategy is popped from the withdrawal queue.\"},\"WithdrawalQueuePushed(address,address)\":{\"notice\":\"Emitted when a strategy is pushed to the withdrawal queue.\"},\"WithdrawalQueueSet(address,address[])\":{\"notice\":\"Emitted when the withdrawal queue is updated.\"}},\"kind\":\"user\",\"methods\":{\"BASE_UNIT()\":{\"notice\":\"The base unit of the underlying token and hence rvToken.\"},\"UNDERLYING()\":{\"notice\":\"The underlying token the Vault accepts.\"},\"addStrategy(address)\":{\"notice\":\"Helper method to add strategy and push it to the que in one tx.\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Returns a user's Vault balance in underlying tokens.\"},\"claimFees(uint256)\":{\"notice\":\"Claims fees accrued from harvests.\"},\"cleanWithdrawalQueue()\":{\"notice\":\"Removes duplicates or untrusted strategies.\"},\"constructor\":{\"notice\":\"security: marks implementation contract as initialized\"},\"deposit(uint256)\":{\"notice\":\"Deposit a specific amount of underlying tokens.\"},\"depositIntoStrategy(address,uint256)\":{\"notice\":\"Deposit a specific amount of float into a trusted strategy.\"},\"distrustStrategy(address)\":{\"notice\":\"Stores a strategy as untrusted, disabling it from being harvested.\"},\"exchangeRate()\":{\"notice\":\"Returns the amount of underlying tokens an rvToken can be redeemed for.\"},\"exchangeRateLock(uint8)\":{\"notice\":\"Returns the amount of underlying tokens an rvToken can be redeemed for.\"},\"feePercent()\":{\"notice\":\"The percentage of profit recognized each harvest to reserve as fees.\"},\"getStrategyData(address)\":{\"notice\":\"Maps strategies to data the Vault holds on them.\"},\"getWithdrawalQueue()\":{\"notice\":\"Gets the full withdrawal queue.\"},\"harvest(address[])\":{\"notice\":\"Harvest a set of trusted strategies.\"},\"harvestDelay()\":{\"notice\":\"The period in seconds over which locked profit is unlocked.\"},\"harvestWindow()\":{\"notice\":\"The period in seconds during which multiple harvests can occur regardless if they are taking place before the harvest delay has elapsed.\"},\"initialize(address,address,address,uint256,uint64,uint128)\":{\"notice\":\"Creates a new Vault that accepts a specific underlying token.\"},\"lastHarvest()\":{\"notice\":\"A timestamp representing when the most recent harvest occurred.\"},\"lastHarvestWindowStart()\":{\"notice\":\"A timestamp representing when the first harvest in the most recent harvest window occurred.\"},\"lockedProfit()\":{\"notice\":\"Calculates the current amount of locked profit.\"},\"maxLockedLoss()\":{\"notice\":\"The amount of locked profit at the end of the last harvest.\"},\"maxLockedProfit()\":{\"notice\":\"The amount of locked profit at the end of the last harvest.\"},\"migrateStrategy(address,address,uint256)\":{\"notice\":\"Helper method to migrate strategy to a new implementation.\"},\"nextHarvestDelay()\":{\"notice\":\"The value that will replace harvestDelay next harvest.\"},\"popFromWithdrawalQueue()\":{\"notice\":\"Removes the strategy at the tip of the withdrawal queue.\"},\"pushToWithdrawalQueue(address)\":{\"notice\":\"Pushes a single strategy to front of the withdrawal queue.\"},\"pushToWithdrawalQueueValidated(address)\":{\"notice\":\"Pushes a single strategy to front of the withdrawal queue with validation.\"},\"redeem(uint256)\":{\"notice\":\"Redeem a specific amount of rvTokens for underlying tokens.\"},\"replaceWithdrawalQueueIndex(uint256,address)\":{\"notice\":\"Replaces an index in the withdrawal queue with another strategy.\"},\"replaceWithdrawalQueueIndexWithTip(uint256)\":{\"notice\":\"Moves the strategy at the tip of the queue to the specified index and pop the tip off the queue.\"},\"seizeStrategy(address,address[])\":{\"notice\":\"Seizes a strategy.\"},\"setFeePercent(uint256)\":{\"notice\":\"Sets a new fee percentage.\"},\"setHarvestDelay(uint64)\":{\"notice\":\"Sets a new harvest delay.\"},\"setHarvestWindow(uint128)\":{\"notice\":\"Sets a new harvest window.\"},\"setTargetFloatPercent(uint256)\":{\"notice\":\"Set a new target float percentage.\"},\"setUnderlyingIsWETH(bool)\":{\"notice\":\"Sets whether the Vault treats the underlying as WETH.\"},\"setWithdrawalQueue(address[])\":{\"notice\":\"Sets a new withdrawal queue.\"},\"swapWithdrawalQueueIndexes(uint256,uint256)\":{\"notice\":\"Swaps two indexes in the withdrawal queue.\"},\"targetFloatPercent()\":{\"notice\":\"The desired percentage of the Vault's holdings to keep as float.\"},\"totalFloat()\":{\"notice\":\"Returns the amount of underlying tokens that idly sit in the Vault.\"},\"totalHoldings()\":{\"notice\":\"Calculates the total amount of underlying tokens the Vault holds.\"},\"totalHoldingsLock(uint8)\":{\"notice\":\"Calculates the total amount of underlying tokens the Vault holds.\"},\"totalStrategyHoldings()\":{\"notice\":\"The total amount of underlying tokens held in strategies at the time of the last harvest.\"},\"trustStrategy(address)\":{\"notice\":\"Stores a strategy as trusted, enabling it to be harvested.\"},\"underlyingIsWETH()\":{\"notice\":\"Whether the Vault should treat the underlying token as WETH compatible.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw a specific amount of underlying tokens.\"},\"withdrawFromStrategy(address,uint256)\":{\"notice\":\"Withdraw a specific amount of underlying tokens from a strategy.\"},\"withdrawalQueue(uint256)\":{\"notice\":\"An ordered array of strategies representing the withdrawal queue.\"}},\"notice\":\"Flexible, minimalist, and gas-optimized yield aggregator for earning interest on any ERC20 token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vault/VaultUpgradable.sol\":\"VaultUpgradable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/interfaces/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// this import is used in tests\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\n/// @dev Like cTokens, strategies must be transferrable ERC20s.\\nabstract contract Strategy {\\n    /// @notice Returns whether the strategy accepts ETH or an ERC20.\\n    /// @return True if the strategy accepts ETH, false otherwise.\\n    /// @dev Only present in Fuse cTokens, not Compound cTokens.\\n    function isCEther() external view virtual returns (bool);\\n\\n    /// @notice Withdraws a specific amount of underlying tokens from the strategy.\\n    /// @param amount The amount of underlying tokens to withdraw.\\n    /// @return An error code, or 0 if the withdrawal was successful.\\n    function redeemUnderlying(uint256 amount)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Returns a user's strategy balance in underlying tokens.\\n    /// @param user The user to get the underlying balance of.\\n    /// @return The user's strategy balance in underlying tokens.\\n    /// @dev May mutate the state of the strategy by accruing interest.\\n    function balanceOfUnderlying(address user)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Returns max deposits a strategy can take.\\n    /// @return MaxTvl\\n    function getMaxTvl() external virtual returns (uint256);\\n\\n    /// @notice Withdraws any ERC20 tokens back to recipient.\\n    function emergencyWithdraw(address recipient, IERC20[] memory tokens)\\n        external\\n        virtual;\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ERC20s.\\n/// @dev Designed for out of the box compatibility with Fuse cERC20s.\\nabstract contract ERC20Strategy is Strategy {\\n    /// @notice Returns the underlying ERC20 token the strategy accepts.\\n    /// @return The underlying ERC20 token the strategy accepts.\\n    function underlying() external view virtual returns (IERC20);\\n\\n    /// @notice Deposit a specific amount of underlying tokens into the strategy.\\n    /// @param amount The amount of underlying tokens to deposit.\\n    /// @return An error code, or 0 if the deposit was successful.\\n    function mint(uint256 amount) external virtual returns (uint256);\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ETH.\\n/// @dev Designed for out of the box compatibility with Fuse cEther.\\nabstract contract ETHStrategy is Strategy {\\n    /// @notice Deposit a specific amount of ETH into the strategy.\\n    /// @dev The amount of ETH is specified via msg.value. Reverts on error.\\n    function mint() external payable virtual;\\n}\\n\",\"keccak256\":\"0x694f3b225c82b2f7856ddd3eae5a162b459fcb6c5c701eafe4a505cb9d5bdfb1\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/uniswap/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction balanceOf(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617dcb6501c8c2ad665f925a2a469ffb6c82b78a73083503b009d5a4f95f0cb\",\"license\":\"MIT\"},\"src/libraries/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n// from Solmate by Rari-Capital https://github.com/Rari-Capital/solmate\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n\\t/*///////////////////////////////////////////////////////////////\\n                            COMMON BASE UNITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tuint256 internal constant YAD = 1e8;\\n\\tuint256 internal constant WAD = 1e18;\\n\\tuint256 internal constant RAY = 1e27;\\n\\tuint256 internal constant RAD = 1e45;\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                         FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction fmul(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 baseUnit\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Store x * y in z for now.\\n\\t\\t\\tz := mul(x, y)\\n\\n\\t\\t\\t// Equivalent to require(x == 0 || (x * y) / x == y)\\n\\t\\t\\tif iszero(or(iszero(x), eq(div(z, x), y))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If baseUnit is zero this will return zero instead of reverting.\\n\\t\\t\\tz := div(z, baseUnit)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fdiv(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 baseUnit\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Store x * baseUnit in z for now.\\n\\t\\t\\tz := mul(x, baseUnit)\\n\\n\\t\\t\\t// Equivalent to require(y != 0 && (x == 0 || (x * baseUnit) / x == baseUnit))\\n\\t\\t\\tif iszero(and(iszero(iszero(y)), or(iszero(x), eq(div(z, x), baseUnit)))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// We ensure y is not zero above, so there is never division by zero here.\\n\\t\\t\\tz := div(z, y)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fpow(\\n\\t\\tuint256 x,\\n\\t\\tuint256 n,\\n\\t\\tuint256 baseUnit\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\tswitch x\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\tswitch n\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// 0 ** 0 = 1\\n\\t\\t\\t\\t\\tz := baseUnit\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// 0 ** n = 0\\n\\t\\t\\t\\t\\tz := 0\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\tswitch mod(n, 2)\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// If n is even, store baseUnit in z for now.\\n\\t\\t\\t\\t\\tz := baseUnit\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// If n is odd, store x in z for now.\\n\\t\\t\\t\\t\\tz := x\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Shifting right by 1 is like dividing by 2.\\n\\t\\t\\t\\tlet half := shr(1, baseUnit)\\n\\n\\t\\t\\t\\tfor {\\n\\t\\t\\t\\t\\t// Shift n right by 1 before looping to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} n {\\n\\t\\t\\t\\t\\t// Shift n right by 1 each iteration to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} {\\n\\t\\t\\t\\t\\t// Revert immediately if x ** 2 would overflow.\\n\\t\\t\\t\\t\\t// Equivalent to iszero(eq(div(xx, x), x)) here.\\n\\t\\t\\t\\t\\tif shr(128, x) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Store x squared.\\n\\t\\t\\t\\t\\tlet xx := mul(x, x)\\n\\n\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\tlet xxRound := add(xx, half)\\n\\n\\t\\t\\t\\t\\t// Revert if xx + half overflowed.\\n\\t\\t\\t\\t\\tif lt(xxRound, xx) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Set x to scaled xxRound.\\n\\t\\t\\t\\t\\tx := div(xxRound, baseUnit)\\n\\n\\t\\t\\t\\t\\t// If n is even:\\n\\t\\t\\t\\t\\tif mod(n, 2) {\\n\\t\\t\\t\\t\\t\\t// Compute z * x.\\n\\t\\t\\t\\t\\t\\tlet zx := mul(z, x)\\n\\n\\t\\t\\t\\t\\t\\t// If z * x overflowed:\\n\\t\\t\\t\\t\\t\\tif iszero(eq(div(zx, x), z)) {\\n\\t\\t\\t\\t\\t\\t\\t// Revert if x is non-zero.\\n\\t\\t\\t\\t\\t\\t\\tif iszero(iszero(x)) {\\n\\t\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\t\\tlet zxRound := add(zx, half)\\n\\n\\t\\t\\t\\t\\t\\t// Revert if zx + half overflowed.\\n\\t\\t\\t\\t\\t\\tif lt(zxRound, zx) {\\n\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Return properly scaled zxRound.\\n\\t\\t\\t\\t\\t\\tz := div(zxRound, baseUnit)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*///////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Start off with z at 1.\\n\\t\\t\\tz := 1\\n\\n\\t\\t\\t// Used below to help find a nearby power of 2.\\n\\t\\t\\tlet y := x\\n\\n\\t\\t\\t// Find the lowest power of 2 that is at least sqrt(x).\\n\\t\\t\\tif iszero(lt(y, 0x100000000000000000000000000000000)) {\\n\\t\\t\\t\\ty := shr(128, y) // Like dividing by 2 ** 128.\\n\\t\\t\\t\\tz := shl(64, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10000000000000000)) {\\n\\t\\t\\t\\ty := shr(64, y) // Like dividing by 2 ** 64.\\n\\t\\t\\t\\tz := shl(32, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x100000000)) {\\n\\t\\t\\t\\ty := shr(32, y) // Like dividing by 2 ** 32.\\n\\t\\t\\t\\tz := shl(16, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10000)) {\\n\\t\\t\\t\\ty := shr(16, y) // Like dividing by 2 ** 16.\\n\\t\\t\\t\\tz := shl(8, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x100)) {\\n\\t\\t\\t\\ty := shr(8, y) // Like dividing by 2 ** 8.\\n\\t\\t\\t\\tz := shl(4, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10)) {\\n\\t\\t\\t\\ty := shr(4, y) // Like dividing by 2 ** 4.\\n\\t\\t\\t\\tz := shl(2, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x8)) {\\n\\t\\t\\t\\t// Equivalent to 2 ** z.\\n\\t\\t\\t\\tz := shl(1, z)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Shifting right by 1 is like dividing by 2.\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\n\\t\\t\\t// Compute a rounded down version of z.\\n\\t\\t\\tlet zRoundDown := div(x, z)\\n\\n\\t\\t\\t// If zRoundDown is smaller, use it.\\n\\t\\t\\tif lt(zRoundDown, z) {\\n\\t\\t\\t\\tz := zRoundDown\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x59fb1112304e83232f67def69c9eef1a1ea9c537b313d3872795afd8d5355be2\",\"license\":\"AGPL-3.0-only\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n// from Solmate by Rari-Capital https://github.com/Rari-Capital/solmate\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeCastLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n\\tfunction safeCastTo248(uint256 x) internal pure returns (uint248 y) {\\n\\t\\trequire(x <= type(uint248).max);\\n\\n\\t\\ty = uint248(x);\\n\\t}\\n\\n\\tfunction safeCastTo128(uint256 x) internal pure returns (uint128 y) {\\n\\t\\trequire(x <= type(uint128).max);\\n\\n\\t\\ty = uint128(x);\\n\\t}\\n\\n\\tfunction safeCastTo96(uint256 x) internal pure returns (uint96 y) {\\n\\t\\trequire(x <= type(uint96).max);\\n\\n\\t\\ty = uint96(x);\\n\\t}\\n\\n\\tfunction safeCastTo64(uint256 x) internal pure returns (uint64 y) {\\n\\t\\trequire(x <= type(uint64).max);\\n\\n\\t\\ty = uint64(x);\\n\\t}\\n\\n\\tfunction safeCastTo32(uint256 x) internal pure returns (uint32 y) {\\n\\t\\trequire(x <= type(uint32).max);\\n\\n\\t\\ty = uint32(x);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5747584a1b4e218df0e71aef1f20f3aadad2c9c66590a95556410fd602841a97\",\"license\":\"AGPL-3.0-only\"},\"src/vault/VaultUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0;\\n\\nimport {SafeCastLib} from \\\"../libraries/SafeCastLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../libraries/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20Upgradeable as ERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport {Strategy, ERC20Strategy, ETHStrategy} from \\\"../interfaces/Strategy.sol\\\";\\n\\n/// @title Rari Vault (rvToken)\\n/// @author Transmissions11 and JetJadeja\\n/// @notice Flexible, minimalist, and gas-optimized yield aggregator for\\n/// earning interest on any ERC20 token.\\ncontract VaultUpgradable is\\n    Initializable,\\n    ERC20,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeCastLib for uint256;\\n    using SafeERC20 for IERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /// security: marks implementation contract as initialized\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice The underlying token the Vault accepts.\\n    IERC20 public UNDERLYING;\\n\\n    /// @notice The base unit of the underlying token and hence rvToken.\\n    /// @dev Equal to 10 ** decimals. Used for fixed point arithmetic.\\n    uint256 public BASE_UNIT;\\n\\n    uint256 private _decimals;\\n\\n    /// @notice Emitted when the Vault is initialized.\\n    /// @param user The authorized user who triggered the initialization.\\n    event Initialized(address indexed user);\\n\\n    /// @notice Creates a new Vault that accepts a specific underlying token.\\n    /// @param _UNDERLYING The ERC20 compliant token the Vault should accept.\\n    function initialize(\\n        IERC20 _UNDERLYING,\\n        address _owner,\\n        address _manager,\\n        uint256 _feePercent,\\n        uint64 _harvestDelay,\\n        uint128 _harvestWindow\\n    ) external initializer {\\n        __ERC20_init(\\n            // ex: Scion USDC.e Vault\\n            string(\\n                abi.encodePacked(\\n                    \\\"Scion \\\",\\n                    ERC20(address(_UNDERLYING)).name(),\\n                    \\\" Vault\\\"\\n                )\\n            ),\\n            // ex: sUSDC.e\\n            string(abi.encodePacked(\\\"sc\\\", ERC20(address(_UNDERLYING)).symbol()))\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n\\n        _decimals = ERC20(address(_UNDERLYING)).decimals();\\n\\n        UNDERLYING = _UNDERLYING;\\n\\n        BASE_UNIT = 10**_decimals;\\n\\n        // configure\\n        setManager(_manager, true);\\n        setFeePercent(_feePercent);\\n\\n        // delay must be set first\\n        setHarvestDelay(_harvestDelay);\\n        setHarvestWindow(_harvestWindow);\\n\\n        emit Initialized(msg.sender);\\n\\n        // must be call after all other inits\\n        _transferOwnership(_owner);\\n\\n        // defaults to open vaults\\n        _maxTvl = type(uint256).max;\\n        _stratMaxTvl = type(uint256).max;\\n\\n        version = 2;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return uint8(_decimals);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The maximum number of elements allowed on the withdrawal stack.\\n    /// @dev Needed to prevent denial of service attacks by queue operators.\\n    uint256 internal constant MAX_WITHDRAWAL_STACK_SIZE = 32;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                AUTH\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ManagerUpdate(address indexed account, bool isManager);\\n    event AllowedUpdate(address indexed account, bool isManager);\\n    event SetPublic(bool setPublic);\\n\\n    modifier requiresAuth() {\\n        require(\\n            msg.sender == owner() || isManager(msg.sender),\\n            \\\"Vault: NO_AUTH\\\"\\n        );\\n        _;\\n    }\\n\\n    mapping(address => bool) private _allowed;\\n\\n    // Allowed (allow list for deposits)\\n\\n    function isAllowed(address user) public view returns (bool) {\\n        return user == owner() || isManager(user) || _allowed[user];\\n    }\\n\\n    function setAllowed(address user, bool _isManager) external requiresAuth {\\n        _allowed[user] = _isManager;\\n        emit AllowedUpdate(user, _isManager);\\n    }\\n\\n    function bulkAllow(address[] memory users) external requiresAuth {\\n        for (uint256 i; i < users.length; i++) {\\n            _allowed[users[i]] = true;\\n            emit AllowedUpdate(users[i], true);\\n        }\\n    }\\n\\n    modifier requireAllow() {\\n        require(_isPublic || isAllowed(msg.sender), \\\"Vault: NOT_ON_ALLOW_LIST\\\");\\n        _;\\n    }\\n\\n    mapping(address => bool) private _managers;\\n\\n    // GOVERNANCE - MANAGER\\n    function isManager(address user) public view returns (bool) {\\n        return _managers[user];\\n    }\\n\\n    function setManager(address user, bool _isManager) public onlyOwner {\\n        _managers[user] = _isManager;\\n        emit ManagerUpdate(user, _isManager);\\n    }\\n\\n    function isPublic() external view returns (bool) {\\n        return _isPublic;\\n    }\\n\\n    function setPublic(bool isPublic_) external requiresAuth {\\n        _isPublic = isPublic_;\\n        emit SetPublic(isPublic_);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           FEE CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The percentage of profit recognized each harvest to reserve as fees.\\n    /// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n    uint256 public feePercent;\\n\\n    /// @notice Emitted when the fee percentage is updated.\\n    /// @param user The authorized user who triggered the update.\\n    /// @param newFeePercent The new fee percentage.\\n    event FeePercentUpdated(address indexed user, uint256 newFeePercent);\\n\\n    /// @notice Sets a new fee percentage.\\n    /// @param newFeePercent The new fee percentage.\\n    function setFeePercent(uint256 newFeePercent) public onlyOwner {\\n        // A fee percentage over 100% doesn't make sense.\\n        require(newFeePercent <= 1e18, \\\"FEE_TOO_HIGH\\\");\\n\\n        // Update the fee percentage.\\n        feePercent = newFeePercent;\\n\\n        emit FeePercentUpdated(msg.sender, newFeePercent);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        HARVEST CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when the harvest window is updated.\\n    /// @param user The authorized user who triggered the update.\\n    /// @param newHarvestWindow The new harvest window.\\n    event HarvestWindowUpdated(address indexed user, uint128 newHarvestWindow);\\n\\n    /// @notice Emitted when the harvest delay is updated.\\n    /// @param user The authorized user who triggered the update.\\n    /// @param newHarvestDelay The new harvest delay.\\n    event HarvestDelayUpdated(address indexed user, uint64 newHarvestDelay);\\n\\n    /// @notice Emitted when the harvest delay is scheduled to be updated next harvest.\\n    /// @param user The authorized user who triggered the update.\\n    /// @param newHarvestDelay The scheduled updated harvest delay.\\n    event HarvestDelayUpdateScheduled(\\n        address indexed user,\\n        uint64 newHarvestDelay\\n    );\\n\\n    /// @notice The period in seconds during which multiple harvests can occur\\n    /// regardless if they are taking place before the harvest delay has elapsed.\\n    /// @dev Long harvest windows open the Vault up to profit distribution slowdown attacks.\\n    uint128 public harvestWindow;\\n\\n    /// @notice The period in seconds over which locked profit is unlocked.\\n    /// @dev Cannot be 0 as it opens harvests up to sandwich attacks.\\n    uint64 public harvestDelay;\\n\\n    /// @notice The value that will replace harvestDelay next harvest.\\n    /// @dev In the case that the next delay is 0, no update will be applied.\\n    uint64 public nextHarvestDelay;\\n\\n    /// @notice Sets a new harvest window.\\n    /// @param newHarvestWindow The new harvest window.\\n    /// @dev The Vault's harvestDelay must already be set before calling.\\n    function setHarvestWindow(uint128 newHarvestWindow) public onlyOwner {\\n        // A harvest window longer than the harvest delay doesn't make sense.\\n        require(newHarvestWindow <= harvestDelay, \\\"WINDOW_TOO_LONG\\\");\\n\\n        // Update the harvest window.\\n        harvestWindow = newHarvestWindow;\\n\\n        emit HarvestWindowUpdated(msg.sender, newHarvestWindow);\\n    }\\n\\n    /// @notice Sets a new harvest delay.\\n    /// @param newHarvestDelay The new harvest delay to set.\\n    /// @dev If the current harvest delay is 0, meaning it has not\\n    /// been set before, it will be updated immediately, otherwise\\n    /// it will be scheduled to take effect after the next harvest.\\n    function setHarvestDelay(uint64 newHarvestDelay) public onlyOwner {\\n        // A harvest delay of 0 makes harvests vulnerable to sandwich attacks.\\n        require(newHarvestDelay != 0, \\\"DELAY_CANNOT_BE_ZERO\\\");\\n\\n        // A harvest delay longer than 1 year doesn't make sense.\\n        require(newHarvestDelay <= 365 days, \\\"DELAY_TOO_LONG\\\");\\n\\n        // If the harvest delay is 0, meaning it has not been set before:\\n        if (harvestDelay == 0) {\\n            // We'll apply the update immediately.\\n            harvestDelay = newHarvestDelay;\\n\\n            emit HarvestDelayUpdated(msg.sender, newHarvestDelay);\\n        } else {\\n            // We'll apply the update next harvest.\\n            nextHarvestDelay = newHarvestDelay;\\n\\n            emit HarvestDelayUpdateScheduled(msg.sender, newHarvestDelay);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       TARGET FLOAT CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The desired percentage of the Vault's holdings to keep as float.\\n    /// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n    uint256 public targetFloatPercent;\\n\\n    /// @notice Emitted when the target float percentage is updated.\\n    /// @param user The authorized user who triggered the update.\\n    /// @param newTargetFloatPercent The new target float percentage.\\n    event TargetFloatPercentUpdated(\\n        address indexed user,\\n        uint256 newTargetFloatPercent\\n    );\\n\\n    /// @notice Set a new target float percentage.\\n    /// @param newTargetFloatPercent The new target float percentage.\\n    function setTargetFloatPercent(uint256 newTargetFloatPercent)\\n        external\\n        onlyOwner\\n    {\\n        // A target float percentage over 100% doesn't make sense.\\n        require(newTargetFloatPercent <= 1e18, \\\"TARGET_TOO_HIGH\\\");\\n\\n        // Update the target float percentage.\\n        targetFloatPercent = newTargetFloatPercent;\\n\\n        emit TargetFloatPercentUpdated(msg.sender, newTargetFloatPercent);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                   UNDERLYING IS WETH CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Whether the Vault should treat the underlying token as WETH compatible.\\n    /// @dev If enabled the Vault will allow trusting strategies that accept Ether.\\n    bool public underlyingIsWETH;\\n\\n    /// @notice Emitted when whether the Vault should treat the underlying as WETH is updated.\\n    /// @param user The authorized user who triggered the update.\\n    /// @param newUnderlyingIsWETH Whether the Vault nows treats the underlying as WETH.\\n    event UnderlyingIsWETHUpdated(\\n        address indexed user,\\n        bool newUnderlyingIsWETH\\n    );\\n\\n    /// @notice Sets whether the Vault treats the underlying as WETH.\\n    /// @param newUnderlyingIsWETH Whether the Vault should treat the underlying as WETH.\\n    /// @dev The underlying token must have 18 decimals, to match Ether's decimal scheme.\\n    function setUnderlyingIsWETH(bool newUnderlyingIsWETH) external onlyOwner {\\n        // Ensure the underlying token's decimals match ETH.\\n        require(\\n            !newUnderlyingIsWETH || ERC20(address(UNDERLYING)).decimals() == 18,\\n            \\\"WRONG_DECIMALS\\\"\\n        );\\n\\n        // Update whether the Vault treats the underlying as WETH.\\n        underlyingIsWETH = newUnderlyingIsWETH;\\n\\n        emit UnderlyingIsWETHUpdated(msg.sender, newUnderlyingIsWETH);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          STRATEGY STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The total amount of underlying tokens held in strategies at the time of the last harvest.\\n    /// @dev Includes maxLockedProfit, must be correctly subtracted to compute available/free holdings.\\n    uint256 public totalStrategyHoldings;\\n\\n    /// @dev Packed struct of strategy data.\\n    /// @param trusted Whether the strategy is trusted.\\n    /// @param balance The amount of underlying tokens held in the strategy.\\n    struct StrategyData {\\n        // Used to determine if the Vault will operate on a strategy.\\n        bool trusted;\\n        // Used to determine profit and loss during harvests of the strategy.\\n        uint248 balance;\\n    }\\n\\n    /// @notice Maps strategies to data the Vault holds on them.\\n    mapping(Strategy => StrategyData) public getStrategyData;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             HARVEST STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice A timestamp representing when the first harvest in the most recent harvest window occurred.\\n    /// @dev May be equal to lastHarvest if there was/has only been one harvest in the most last/current window.\\n    uint64 public lastHarvestWindowStart;\\n\\n    /// @notice A timestamp representing when the most recent harvest occurred.\\n    uint64 public lastHarvest;\\n\\n    /// @notice The amount of locked profit at the end of the last harvest.\\n    uint128 public maxLockedProfit;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        WITHDRAWAL QUEUE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice An ordered array of strategies representing the withdrawal queue.\\n    /// @dev The queue is processed in descending order, meaning the last index will be withdrawn from first.\\n    /// @dev Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at\\n    /// withdrawal time, not validated upfront, meaning the queue may not reflect the \\\"true\\\" set used for withdrawals.\\n    Strategy[] public withdrawalQueue;\\n\\n    /// @notice Gets the full withdrawal queue.\\n    /// @return An ordered array of strategies representing the withdrawal queue.\\n    /// @dev This is provided because Solidity converts public arrays into index getters,\\n    /// but we need a way to allow external contracts and users to access the whole array.\\n    function getWithdrawalQueue() external view returns (Strategy[] memory) {\\n        return withdrawalQueue;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted after a successful deposit.\\n    /// @param user The address that deposited into the Vault.\\n    /// @param underlyingAmount The amount of underlying tokens that were deposited.\\n    event Deposit(address indexed user, uint256 underlyingAmount);\\n\\n    /// @notice Emitted after a successful withdrawal.\\n    /// @param user The address that withdrew from the Vault.\\n    /// @param underlyingAmount The amount of underlying tokens that were withdrawn.\\n    event Withdraw(address indexed user, uint256 underlyingAmount);\\n\\n    /// @notice Deposit a specific amount of underlying tokens.\\n    /// @param underlyingAmount The amount of the underlying token to deposit.\\n    function deposit(uint256 underlyingAmount) external requireAllow {\\n        // you should not be able to deposit funds over the tvl limit\\n        require(\\n            underlyingAmount + totalHoldings() <= getMaxTvl(),\\n            \\\"OVER_MAX_TVL\\\"\\n        );\\n\\n        // Determine the equivalent amount of rvTokens and mint them.\\n        // use deposit lock here (add locked loss to inflate share price)\\n        _mint(\\n            msg.sender,\\n            underlyingAmount.fdiv(exchangeRateLock(PnlLock.Deposit), BASE_UNIT)\\n        );\\n\\n        emit Deposit(msg.sender, underlyingAmount);\\n\\n        // Transfer in underlying tokens from the user.\\n        // This will revert if the user does not have the amount specified.\\n        UNDERLYING.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            underlyingAmount\\n        );\\n    }\\n\\n    /// @notice Withdraw a specific amount of underlying tokens.\\n    /// @param underlyingAmount The amount of underlying tokens to withdraw.\\n    function withdraw(uint256 underlyingAmount) external nonReentrant {\\n        // Determine the equivalent amount of rvTokens and burn them.\\n        // This will revert if the user does not have enough rvTokens.\\n        // use withdraw lock (subtrackt lockedProfits do deflate share price)\\n        _burn(\\n            msg.sender,\\n            underlyingAmount.fdiv(exchangeRateLock(PnlLock.Withdraw), BASE_UNIT)\\n        );\\n\\n        emit Withdraw(msg.sender, underlyingAmount);\\n\\n        // Withdraw from strategies if needed and transfer.\\n        transferUnderlyingTo(msg.sender, underlyingAmount);\\n    }\\n\\n    /// @notice Redeem a specific amount of rvTokens for underlying tokens.\\n    /// @param rvTokenAmount The amount of rvTokens to redeem for underlying tokens.\\n    function redeem(uint256 rvTokenAmount) external nonReentrant {\\n        // Determine the equivalent amount of underlying tokens.\\n        uint256 underlyingAmount = rvTokenAmount.fmul(\\n            exchangeRateLock(PnlLock.Withdraw),\\n            BASE_UNIT\\n        );\\n\\n        // Burn the provided amount of rvTokens.\\n        // This will revert if the user does not have enough rvTokens.\\n        _burn(msg.sender, rvTokenAmount);\\n\\n        emit Withdraw(msg.sender, underlyingAmount);\\n        // Withdraw from strategies if needed and transfer.\\n        transferUnderlyingTo(msg.sender, underlyingAmount);\\n    }\\n\\n    /// @dev Transfers a specific amount of underlying tokens held in strategies and/or float to a recipient.\\n    /// @dev Only withdraws from strategies if needed and maintains the target float percentage if possible.\\n    /// @param recipient The user to transfer the underlying tokens to.\\n    /// @param underlyingAmount The amount of underlying tokens to transfer.\\n    function transferUnderlyingTo(address recipient, uint256 underlyingAmount)\\n        internal\\n    {\\n        // Get the Vault's floating balance.\\n        uint256 float = totalFloat();\\n\\n        // If the amount is greater than the float, withdraw from strategies.\\n        if (underlyingAmount > float) {\\n            // Compute the amount needed to reach our target float percentage.\\n            // use withdraw lock here because we're withdrawing\\n            uint256 floatMissingForTarget = (totalHoldingsLock(\\n                PnlLock.Withdraw\\n            ) - underlyingAmount).fmul(targetFloatPercent, 1e18);\\n\\n            // Compute the bare minimum amount we need for this withdrawal.\\n            uint256 floatMissingForWithdrawal = underlyingAmount - float;\\n\\n            // Pull enough to cover the withdrawal and reach our target float percentage.\\n            pullFromWithdrawalQueue(\\n                floatMissingForWithdrawal + floatMissingForTarget,\\n                float\\n            );\\n        }\\n\\n        // Transfer the provided amount of underlying tokens.\\n        UNDERLYING.safeTransfer(recipient, underlyingAmount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        VAULT ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Returns a user's Vault balance in underlying tokens.\\n    /// @param user The user to get the underlying balance of.\\n    /// @return The user's Vault balance in underlying tokens.\\n    function balanceOfUnderlying(address user) external view returns (uint256) {\\n        return\\n            balanceOf(user).fmul(exchangeRateLock(PnlLock.Withdraw), BASE_UNIT);\\n    }\\n\\n    /// @notice Returns the amount of underlying tokens an rvToken can be redeemed for.\\n    /// @return The amount of underlying tokens an rvToken can be redeemed for.\\n    function exchangeRate() public view returns (uint256) {\\n        return exchangeRateLock(PnlLock.None);\\n    }\\n\\n    /// @notice Returns the amount of underlying tokens an rvToken can be redeemed for.\\n    /// @return The amount of underlying tokens an rvToken can be redeemed for.\\n    function exchangeRateLock(PnlLock lock) public view returns (uint256) {\\n        // Get the total supply of rvTokens.\\n        uint256 rvTokenSupply = totalSupply();\\n\\n        // If there are no rvTokens in circulation, return an exchange rate of 1:1.\\n        if (rvTokenSupply == 0) return BASE_UNIT;\\n\\n        // Calculate the exchange rate by dividing the total holdings by the rvToken supply.\\n        return totalHoldingsLock(lock).fdiv(rvTokenSupply, BASE_UNIT);\\n    }\\n\\n    /// @notice Calculates the total amount of underlying tokens the Vault holds.\\n    /// @return totalUnderlyingHeld The total amount of underlying tokens the Vault holds.\\n    function totalHoldings() public view returns (uint256) {\\n        return totalHoldingsLock(PnlLock.None);\\n    }\\n\\n    /// @notice Calculates the total amount of underlying tokens the Vault holds.\\n    /// @return totalUnderlyingHeld The total amount of underlying tokens the Vault holds.\\n    function totalHoldingsLock(PnlLock lock)\\n        public\\n        view\\n        returns (uint256 totalUnderlyingHeld)\\n    {\\n        unchecked {\\n            // this could overflow - in this case withdraw should not be possible anyway\\n            if (lock == PnlLock.None)\\n                return\\n                    totalStrategyHoldings - lossSinceHarvest() + totalFloat();\\n        }\\n\\n        (uint256 lockedProfit_, uint256 lockedLoss_) = lockedProfit();\\n        // this could overflow - in this case withdraw should not be possible anyway\\n        if (lock == PnlLock.Withdraw)\\n            return\\n                totalStrategyHoldings -\\n                lockedProfit_ -\\n                lossSinceHarvest() +\\n                totalFloat();\\n\\n        unchecked {\\n            // Cannot underflow as locked profit can't exceed total strategy holdings.\\n            // inflate the total holdings by lockedLoss as a saftey measure\\n            if (lock == PnlLock.Deposit)\\n                return totalStrategyHoldings + lockedLoss_ + totalFloat();\\n        }\\n    }\\n\\n    /// @notice Calculates the current amount of locked profit.\\n    /// @return The current amount of locked profit.\\n\\n    /// @notice Calculates the current amount of locked profit.\\n    /// @return The current amount of locked profit.\\n    function lockedProfit() public view returns (uint256, uint256) {\\n        // Get the last harvest and harvest delay.\\n        uint256 previousHarvest = lastHarvest;\\n        uint256 harvestInterval = harvestDelay;\\n\\n        unchecked {\\n            // If the harvest delay has passed, there is no locked profit.\\n            // Cannot overflow on human timescales since harvestInterval is capped.\\n            if (block.timestamp >= previousHarvest + harvestInterval)\\n                return (0, 0);\\n\\n            // Get the maximum amount we could return.\\n            uint256 maximumLockedProfit = maxLockedProfit;\\n            uint256 maximumLockedLoss = maxLockedLoss;\\n\\n            // Compute how much profit remains locked based on the last harvest and harvest delay.\\n            // It's impossible for the previous harvest to be in the future, so this will never underflow.\\n            return (\\n                maximumLockedProfit -\\n                    (maximumLockedProfit *\\n                        (block.timestamp - previousHarvest)) /\\n                    harvestInterval,\\n                maximumLockedLoss -\\n                    (maximumLockedLoss * (block.timestamp - previousHarvest)) /\\n                    harvestInterval\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the amount of underlying tokens that idly sit in the Vault.\\n    /// @return The amount of underlying tokens that sit idly in the Vault.\\n    function totalFloat() public view returns (uint256) {\\n        return UNDERLYING.balanceOf(address(this));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             HARVEST LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted after a successful harvest.\\n    /// @param user The authorized user who triggered the harvest.\\n    /// @param strategies The trusted strategies that were harvested.\\n    event Harvest(address indexed user, Strategy[] strategies);\\n\\n    /// @notice Harvest a set of trusted strategies.\\n    /// @param strategies The trusted strategies to harvest.\\n    /// @dev Will always revert if called outside of an active\\n    /// harvest window or before the harvest delay has passed.\\n    function harvest(Strategy[] calldata strategies) external requiresAuth {\\n        // If this is the first harvest after the last window:\\n        if (block.timestamp >= lastHarvest + harvestDelay) {\\n            // Set the harvest window's start timestamp.\\n            // Cannot overflow 64 bits on human timescales.\\n            lastHarvestWindowStart = uint64(block.timestamp);\\n        } else {\\n            // We know this harvest is not the first in the window so we need to ensure it's within it.\\n            require(\\n                block.timestamp <= lastHarvestWindowStart + harvestWindow,\\n                \\\"BAD_HARVEST_TIME\\\"\\n            );\\n        }\\n\\n        // Get the Vault's current total strategy holdings.\\n        uint256 oldTotalStrategyHoldings = totalStrategyHoldings;\\n\\n        // Used to store the total profit accrued by the strategies.\\n        uint256 totalProfitAccrued;\\n        uint256 totalLoss;\\n\\n        // Used to store the new total strategy holdings after harvesting.\\n        uint256 newTotalStrategyHoldings = oldTotalStrategyHoldings;\\n\\n        // Will revert if any of the specified strategies are untrusted.\\n        for (uint256 i = 0; i < strategies.length; i++) {\\n            // Get the strategy at the current index.\\n            Strategy strategy = strategies[i];\\n\\n            // If an untrusted strategy could be harvested a malicious user could use\\n            // a fake strategy that over-reports holdings to manipulate the exchange rate.\\n            require(getStrategyData[strategy].trusted, \\\"UNTRUSTED_STRATEGY\\\");\\n\\n            // Get the strategy's previous and current balance.\\n            uint256 balanceLastHarvest = getStrategyData[strategy].balance;\\n            uint256 balanceThisHarvest = strategy.balanceOfUnderlying(\\n                address(this)\\n            );\\n\\n            // Update the strategy's stored balance. Cast overflow is unrealistic.\\n            getStrategyData[strategy].balance = balanceThisHarvest\\n                .safeCastTo248();\\n\\n            // Increase/decrease newTotalStrategyHoldings based on the profit/loss registered.\\n            // We cannot wrap the subtraction in parenthesis as it would underflow if the strategy had a loss.\\n            newTotalStrategyHoldings =\\n                newTotalStrategyHoldings +\\n                balanceThisHarvest -\\n                balanceLastHarvest;\\n\\n            unchecked {\\n                // Update the total profit accrued while counting losses as zero profit.\\n                // Cannot overflow as we already increased total holdings without reverting.\\n                if (balanceThisHarvest > balanceLastHarvest) {\\n                    totalProfitAccrued +=\\n                        balanceThisHarvest -\\n                        balanceLastHarvest; // Profits since last harvest.\\n                } else {\\n                    // If the strategy registered a net loss we add it to totalLoss.\\n                    totalLoss += balanceLastHarvest - balanceThisHarvest;\\n                }\\n            }\\n        }\\n\\n        // Compute fees as the fee percent multiplied by the profit.\\n        uint256 feesAccrued = totalProfitAccrued.fmul(feePercent, 1e18);\\n\\n        // If we accrued any fees, mint an equivalent amount of rvTokens.\\n        // Authorized users can claim the newly minted rvTokens via claimFees.\\n        _mint(address(this), feesAccrued.fdiv(exchangeRate(), BASE_UNIT));\\n\\n        // Update max unlocked profit based on any remaining locked profit plus new profit.\\n        (uint256 lockedProfit_, uint256 lockedLoss_) = lockedProfit();\\n        maxLockedProfit = (lockedProfit_ + totalProfitAccrued - feesAccrued)\\n            .safeCastTo128();\\n        maxLockedLoss = (lockedLoss_ + totalLoss).safeCastTo128();\\n\\n        // Set strategy holdings to our new total.\\n        totalStrategyHoldings = newTotalStrategyHoldings;\\n\\n        // Update the last harvest timestamp.\\n        // Cannot overflow on human timescales.\\n        lastHarvest = uint64(block.timestamp);\\n\\n        emit Harvest(msg.sender, strategies);\\n\\n        // Get the next harvest delay.\\n        uint64 newHarvestDelay = nextHarvestDelay;\\n\\n        // If the next harvest delay is not 0:\\n        if (newHarvestDelay != 0) {\\n            // Update the harvest delay.\\n            harvestDelay = newHarvestDelay;\\n\\n            // Reset the next harvest delay.\\n            nextHarvestDelay = 0;\\n\\n            emit HarvestDelayUpdated(msg.sender, newHarvestDelay);\\n        }\\n    }\\n\\n    /// @notice Compute total for the strategies since last harvest.\\n    /// @dev It is necessary to include this when computing the withdrawal exchange rate\\n    function lossSinceHarvest() internal view returns (uint256 loss) {\\n        uint256 totalCurrentHoldings;\\n        // use this instead of totalStrategyHoldings because some strategies with balances may not be in queue\\n        uint256 balanceInQueue;\\n\\n        // this assumes all strategies with balance are in the withdrawal queue\\n        for (uint256 i = 0; i < withdrawalQueue.length; i++) {\\n            // Get the strategy at the current index.\\n            Strategy strategy = withdrawalQueue[i];\\n\\n            // If an untrusted strategy could be harvested a malicious user could use\\n            if (\\n                !getStrategyData[strategy].trusted ||\\n                getStrategyData[strategy].balance == 0\\n            ) continue;\\n\\n            balanceInQueue = balanceInQueue + getStrategyData[strategy].balance;\\n\\n            totalCurrentHoldings =\\n                totalCurrentHoldings +\\n                strategy.balanceOfUnderlying(address(this));\\n        }\\n\\n        // Update strategy holdings\\n        loss = balanceInQueue > totalCurrentHoldings\\n            ? balanceInQueue - totalCurrentHoldings\\n            : 0;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    MAX TVL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getMaxTvl() public view returns (uint256 maxTvl) {\\n        return min(_maxTvl, _stratMaxTvl);\\n    }\\n\\n    event MaxTvlUpdated(uint256 maxTvl);\\n\\n    function setMaxTvl(uint256 maxTvl_) public requiresAuth {\\n        _maxTvl = maxTvl_;\\n        emit MaxTvlUpdated(min(_maxTvl, _stratMaxTvl));\\n    }\\n\\n    // TODO should this just be a view computed on demand?\\n    function updateStratTvl() public requiresAuth returns (uint256 maxTvl) {\\n        for (uint256 i; i < withdrawalQueue.length; i++) {\\n            Strategy strategy = withdrawalQueue[i];\\n            uint256 stratTvl = strategy.getMaxTvl();\\n            // don't let new max overflow\\n            unchecked {\\n                maxTvl = maxTvl > maxTvl + stratTvl\\n                    ? maxTvl\\n                    : maxTvl + stratTvl;\\n            }\\n        }\\n        _stratMaxTvl = maxTvl;\\n        emit MaxTvlUpdated(min(_maxTvl, _stratMaxTvl));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    STRATEGY DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted after the Vault deposits into a strategy contract.\\n    /// @param user The authorized user who triggered the deposit.\\n    /// @param strategy The strategy that was deposited into.\\n    /// @param underlyingAmount The amount of underlying tokens that were deposited.\\n    event StrategyDeposit(\\n        address indexed user,\\n        Strategy indexed strategy,\\n        uint256 underlyingAmount\\n    );\\n\\n    /// @notice Emitted after the Vault withdraws funds from a strategy contract.\\n    /// @param user The authorized user who triggered the withdrawal.\\n    /// @param strategy The strategy that was withdrawn from.\\n    /// @param underlyingAmount The amount of underlying tokens that were withdrawn.\\n    event StrategyWithdrawal(\\n        address indexed user,\\n        Strategy indexed strategy,\\n        uint256 underlyingAmount\\n    );\\n\\n    /// @notice Deposit a specific amount of float into a trusted strategy.\\n    /// @param strategy The trusted strategy to deposit into.\\n    /// @param underlyingAmount The amount of underlying tokens in float to deposit.\\n    function depositIntoStrategy(Strategy strategy, uint256 underlyingAmount)\\n        public\\n        requiresAuth\\n    {\\n        // A strategy must be trusted before it can be deposited into.\\n        require(getStrategyData[strategy].trusted, \\\"UNTRUSTED_STRATEGY\\\");\\n\\n        // We don't allow depositing 0 to prevent emitting a useless event.\\n        require(underlyingAmount != 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n\\n        emit StrategyDeposit(msg.sender, strategy, underlyingAmount);\\n\\n        // Increase totalStrategyHoldings to account for the deposit.\\n        totalStrategyHoldings += underlyingAmount;\\n        unchecked {\\n            // Without this the next harvest would count the deposit as profit.\\n            // Cannot overflow as the balance of one strategy can't exceed the sum of all.\\n            getStrategyData[strategy].balance += underlyingAmount\\n                .safeCastTo248();\\n        }\\n\\n        // We need to deposit differently if the strategy takes ETH.\\n        if (strategy.isCEther()) {\\n            // Unwrap the right amount of WETH.\\n            IWETH(payable(address(UNDERLYING))).withdraw(underlyingAmount);\\n\\n            // Deposit into the strategy and assume it will revert on error.\\n            ETHStrategy(address(strategy)).mint{value: underlyingAmount}();\\n        } else {\\n            // Approve underlyingAmount to the strategy so we can deposit.\\n            UNDERLYING.safeApprove(address(strategy), underlyingAmount);\\n\\n            // Deposit into the strategy and revert if it returns an error code.\\n            require(\\n                ERC20Strategy(address(strategy)).mint(underlyingAmount) == 0,\\n                \\\"MINT_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Withdraw a specific amount of underlying tokens from a strategy.\\n    /// @param strategy The strategy to withdraw from.\\n    /// @param underlyingAmount  The amount of underlying tokens to withdraw.\\n    /// @dev Withdrawing from a strategy will not remove it from the withdrawal queue.\\n    function withdrawFromStrategy(Strategy strategy, uint256 underlyingAmount)\\n        public\\n        requiresAuth\\n        nonReentrant\\n    {\\n        // A strategy must be trusted before it can be withdrawn from.\\n        require(getStrategyData[strategy].trusted, \\\"UNTRUSTED_STRATEGY\\\");\\n\\n        // We don't allow withdrawing 0 to prevent emitting a useless event.\\n        require(underlyingAmount != 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n\\n        // Without this the next harvest would count the withdrawal as a loss.\\n        getStrategyData[strategy].balance -= underlyingAmount.safeCastTo248();\\n\\n        unchecked {\\n            // Decrease totalStrategyHoldings to account for the withdrawal.\\n            // Cannot underflow as the balance of one strategy will never exceed the sum of all.\\n            totalStrategyHoldings -= underlyingAmount;\\n        }\\n\\n        emit StrategyWithdrawal(msg.sender, strategy, underlyingAmount);\\n\\n        // Withdraw from the strategy and revert if it returns an error code.\\n        require(\\n            strategy.redeemUnderlying(underlyingAmount) == 0,\\n            \\\"REDEEM_FAILED\\\"\\n        );\\n\\n        // Wrap the withdrawn Ether into WETH if necessary.\\n        if (strategy.isCEther())\\n            IWETH(payable(address(UNDERLYING))).deposit{\\n                value: underlyingAmount\\n            }();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                      STRATEGY TRUST/DISTRUST LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when a strategy is set to trusted.\\n    /// @param user The authorized user who trusted the strategy.\\n    /// @param strategy The strategy that became trusted.\\n    event StrategyTrusted(address indexed user, Strategy indexed strategy);\\n\\n    /// @notice Emitted when a strategy is set to untrusted.\\n    /// @param user The authorized user who untrusted the strategy.\\n    /// @param strategy The strategy that became untrusted.\\n    event StrategyDistrusted(address indexed user, Strategy indexed strategy);\\n\\n    /// @notice Helper method to add strategy and push it to the que in one tx.\\n    /// @param strategy The strategy to add.\\n    function addStrategy(Strategy strategy) public onlyOwner {\\n        trustStrategy(strategy);\\n        pushToWithdrawalQueue(strategy);\\n        updateStratTvl();\\n    }\\n\\n    /// @notice Helper method to migrate strategy to a new implementation.\\n    /// @param prevStrategy The strategy to remove.\\n    /// @param newStrategy The strategy to add.\\n    // slither-disable-next-line reentrancy-eth\\n    function migrateStrategy(\\n        Strategy prevStrategy,\\n        Strategy newStrategy,\\n        uint256 queueIndex\\n    ) public onlyOwner {\\n        trustStrategy(newStrategy);\\n\\n        if (queueIndex < withdrawalQueue.length)\\n            replaceWithdrawalQueueIndex(queueIndex, newStrategy);\\n        else pushToWithdrawalQueue(newStrategy);\\n\\n        // make sure to call harvest before migrate\\n        uint256 stratBalance = getStrategyData[prevStrategy].balance;\\n        if (stratBalance > 0) {\\n            withdrawFromStrategy(prevStrategy, stratBalance);\\n            depositIntoStrategy(\\n                newStrategy,\\n                // we may end up with slightly less balance because of tx costs\\n                min(UNDERLYING.balanceOf(address(this)), stratBalance)\\n            );\\n        }\\n        distrustStrategy(prevStrategy);\\n    }\\n\\n    /// @notice Stores a strategy as trusted, enabling it to be harvested.\\n    /// @param strategy The strategy to make trusted.\\n    function trustStrategy(Strategy strategy) public onlyOwner {\\n        // Ensure the strategy accepts the correct underlying token.\\n        // If the strategy accepts ETH the Vault should accept WETH, it'll handle wrapping when necessary.\\n        require(\\n            strategy.isCEther()\\n                ? underlyingIsWETH\\n                : ERC20Strategy(address(strategy)).underlying() == UNDERLYING,\\n            \\\"WRONG_UNDERLYING\\\"\\n        );\\n\\n        // Store the strategy as trusted.\\n        getStrategyData[strategy].trusted = true;\\n\\n        emit StrategyTrusted(msg.sender, strategy);\\n    }\\n\\n    /// @notice Stores a strategy as untrusted, disabling it from being harvested.\\n    /// @param strategy The strategy to make untrusted.\\n    function distrustStrategy(Strategy strategy) public onlyOwner {\\n        // Store the strategy as untrusted.\\n        getStrategyData[strategy].trusted = false;\\n\\n        emit StrategyDistrusted(msg.sender, strategy);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         WITHDRAWAL QUEUE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when a strategy is pushed to the withdrawal queue.\\n    /// @param user The authorized user who triggered the push.\\n    /// @param pushedStrategy The strategy pushed to the withdrawal queue.\\n    event WithdrawalQueuePushed(\\n        address indexed user,\\n        Strategy indexed pushedStrategy\\n    );\\n\\n    /// @notice Emitted when a strategy is popped from the withdrawal queue.\\n    /// @param user The authorized user who triggered the pop.\\n    /// @param poppedStrategy The strategy popped from the withdrawal queue.\\n    event WithdrawalQueuePopped(\\n        address indexed user,\\n        Strategy indexed poppedStrategy\\n    );\\n\\n    /// @notice Emitted when the withdrawal queue is updated.\\n    /// @param user The authorized user who triggered the set.\\n    /// @param replacedWithdrawalQueue The new withdrawal queue.\\n    event WithdrawalQueueSet(\\n        address indexed user,\\n        Strategy[] replacedWithdrawalQueue\\n    );\\n\\n    /// @notice Emitted when an index in the withdrawal queue is replaced.\\n    /// @param user The authorized user who triggered the replacement.\\n    /// @param index The index of the replaced strategy in the withdrawal queue.\\n    /// @param replacedStrategy The strategy in the withdrawal queue that was replaced.\\n    /// @param replacementStrategy The strategy that overrode the replaced strategy at the index.\\n    event WithdrawalQueueIndexReplaced(\\n        address indexed user,\\n        uint256 index,\\n        Strategy indexed replacedStrategy,\\n        Strategy indexed replacementStrategy\\n    );\\n\\n    /// @notice Emitted when an index in the withdrawal queue is replaced with the tip.\\n    /// @param user The authorized user who triggered the replacement.\\n    /// @param index The index of the replaced strategy in the withdrawal queue.\\n    /// @param replacedStrategy The strategy in the withdrawal queue replaced by the tip.\\n    /// @param previousTipStrategy The previous tip of the queue that replaced the strategy.\\n    event WithdrawalQueueIndexReplacedWithTip(\\n        address indexed user,\\n        uint256 index,\\n        Strategy indexed replacedStrategy,\\n        Strategy indexed previousTipStrategy\\n    );\\n\\n    /// @notice Emitted when the strategies at two indexes are swapped.\\n    /// @param user The authorized user who triggered the swap.\\n    /// @param index1 One index involved in the swap\\n    /// @param index2 The other index involved in the swap.\\n    /// @param newStrategy1 The strategy (previously at index2) that replaced index1.\\n    /// @param newStrategy2 The strategy (previously at index1) that replaced index2.\\n    event WithdrawalQueueIndexesSwapped(\\n        address indexed user,\\n        uint256 index1,\\n        uint256 index2,\\n        Strategy indexed newStrategy1,\\n        Strategy indexed newStrategy2\\n    );\\n\\n    /// @dev Withdraw a specific amount of underlying tokens from strategies in the withdrawal queue.\\n    /// @param underlyingAmount The amount of underlying tokens to pull into float.\\n    /// @dev Automatically removes depleted strategies from the withdrawal queue.\\n    // slither-disable-next-line reentrancy-eth,arbitrary-send\\n    function pullFromWithdrawalQueue(uint256 underlyingAmount, uint256 float)\\n        internal\\n    {\\n        // We will update this variable as we pull from strategies.\\n        uint256 amountLeftToPull = underlyingAmount;\\n\\n        // We'll start at the tip of the queue and traverse backwards.\\n        uint256 currentIndex = withdrawalQueue.length - 1;\\n\\n        // Iterate in reverse so we pull from the queue in a \\\"last in, first out\\\" manner.\\n        // Will revert due to underflow if we empty the queue before pulling the desired amount.\\n        for (; ; currentIndex--) {\\n            // Get the strategy at the current queue index.\\n            Strategy strategy = withdrawalQueue[currentIndex];\\n\\n            // Get the balance of the strategy before we withdraw from it.\\n            uint256 strategyBalance = getStrategyData[strategy].balance;\\n\\n            // If the strategy is currently untrusted or was already depleted:\\n            if (!getStrategyData[strategy].trusted || strategyBalance == 0) {\\n                // Remove it from the queue.\\n                withdrawalQueue.pop();\\n\\n                emit WithdrawalQueuePopped(msg.sender, strategy);\\n\\n                // Move onto the next strategy.\\n                continue;\\n            }\\n\\n            // We want to pull as much as we can from the strategy, but no more than we need.\\n            uint256 amountToPull = strategyBalance > amountLeftToPull\\n                ? amountLeftToPull\\n                : strategyBalance;\\n\\n            unchecked {\\n                emit StrategyWithdrawal(msg.sender, strategy, amountToPull);\\n\\n                // Withdraw from the strategy and revert if returns an error code.\\n                require(\\n                    strategy.redeemUnderlying(amountToPull) == 0,\\n                    \\\"REDEEM_FAILED\\\"\\n                );\\n\\n                // Cache the Vault's balance of ETH.\\n                if (underlyingIsWETH) {\\n                    uint256 ethBalance = address(this).balance;\\n                    if (ethBalance != 0)\\n                        // If the Vault's underlying token is WETH compatible and we have some ETH, wrap it into WETH.\\n                        IWETH(payable(address(UNDERLYING))).deposit{\\n                            value: ethBalance\\n                        }();\\n                }\\n                // slither-disable-next-line reentrancy-events\\n\\n                // the actual amount we withdraw may be less than what we tried (tx fees)\\n                uint256 underlyingBalance = totalFloat();\\n                uint256 withdrawn = underlyingBalance - float; // impossible for float to decrease\\n                float = underlyingBalance;\\n\\n                // Compute the balance of the strategy that will remain after we withdraw.\\n                uint256 strategyBalanceAfterWithdrawal = strategyBalance >\\n                    withdrawn\\n                    ? strategyBalance - withdrawn\\n                    : 0;\\n\\n                // Without this the next harvest would count the withdrawal as a loss.\\n                getStrategyData[strategy]\\n                    .balance = strategyBalanceAfterWithdrawal.safeCastTo248();\\n\\n                // Adjust our goal based on how much we can pull from the strategy.\\n                amountLeftToPull = amountLeftToPull > withdrawn\\n                    ? amountLeftToPull - withdrawn\\n                    : 0;\\n\\n                // If we fully depleted the strategy:\\n                if (strategyBalanceAfterWithdrawal == 0) {\\n                    // Remove it from the queue.\\n                    withdrawalQueue.pop();\\n\\n                    emit WithdrawalQueuePopped(msg.sender, strategy);\\n                }\\n            }\\n\\n            // If we've pulled all we need, exit the loop.\\n            if (amountLeftToPull == 0 || currentIndex == 0) break;\\n        }\\n\\n        unchecked {\\n            // Account for the withdrawals done in the loop above.\\n            // Cannot underflow as the balances of some strategies cannot exceed the sum of all.\\n            // This assumes we revert if we haven't withdrawn enough funds\\n            totalStrategyHoldings -= underlyingAmount;\\n        }\\n    }\\n\\n    /// @notice Pushes a single strategy to front of the withdrawal queue.\\n    /// @param strategy The strategy to be inserted at the front of the withdrawal queue.\\n    /// @dev Strategies that are untrusted, duplicated, or have no balance are\\n    /// filtered out when encountered at withdrawal time, not validated upfront.\\n    function pushToWithdrawalQueue(Strategy strategy) public requiresAuth {\\n        // Ensure pushing the strategy will not cause the queue to exceed its limit.\\n        require(\\n            withdrawalQueue.length < MAX_WITHDRAWAL_STACK_SIZE,\\n            \\\"STACK_FULL\\\"\\n        );\\n\\n        // Push the strategy to the front of the queue.\\n        withdrawalQueue.push(strategy);\\n\\n        emit WithdrawalQueuePushed(msg.sender, strategy);\\n    }\\n\\n    /// @notice Pushes a single strategy to front of the withdrawal queue with validation.\\n    /// @param strategy The strategy to be inserted at the front of the withdrawal queue.\\n    /// @dev This is a public method to ensure admin cannot prevent withdrawals by emptying the queue\\n    function pushToWithdrawalQueueValidated(Strategy strategy) public {\\n        // Ensure pushing the strategy will not cause the queue to exceed its limit.\\n        require(\\n            withdrawalQueue.length < MAX_WITHDRAWAL_STACK_SIZE,\\n            \\\"STACK_FULL\\\"\\n        );\\n        require(getStrategyData[strategy].trusted, \\\"NOT_TRUSTED\\\");\\n\\n        for (uint256 i = 0; i < withdrawalQueue.length; i++) {\\n            // strategy is already in the queue\\n            if (strategy == withdrawalQueue[i]) return;\\n        }\\n\\n        // Push the strategy to the front of the queue.\\n        withdrawalQueue.push(strategy);\\n\\n        emit WithdrawalQueuePushed(msg.sender, strategy);\\n    }\\n\\n    /// @notice Removes duplicates or untrusted strategies.\\n    /// @dev This is a public method to ensure admin cannot fill the queue\\n    function cleanWithdrawalQueue() public {\\n        Strategy[] memory dirtyQueue = withdrawalQueue;\\n        delete withdrawalQueue;\\n        for (uint256 i = 0; i < dirtyQueue.length; i++) {\\n            Strategy strategy = dirtyQueue[i];\\n            if (!getStrategyData[strategy].trusted || isDuplicate(strategy))\\n                continue;\\n            withdrawalQueue.push(strategy);\\n        }\\n        emit WithdrawalQueueSet(msg.sender, withdrawalQueue);\\n    }\\n\\n    function isDuplicate(Strategy strategy) internal view returns (bool) {\\n        for (uint256 j = 0; j < withdrawalQueue.length; j++)\\n            if (address(strategy) == address(withdrawalQueue[j])) return true;\\n        return false;\\n    }\\n\\n    /// @notice Removes the strategy at the tip of the withdrawal queue.\\n    /// @dev Be careful, another authorized user could push a different strategy\\n    /// than expected to the queue while a popFromWithdrawalQueue transaction is pending.\\n    function popFromWithdrawalQueue() external requiresAuth {\\n        // Get the (soon to be) popped strategy.\\n        Strategy poppedStrategy = withdrawalQueue[withdrawalQueue.length - 1];\\n\\n        // Pop the first strategy in the queue.\\n        withdrawalQueue.pop();\\n\\n        emit WithdrawalQueuePopped(msg.sender, poppedStrategy);\\n    }\\n\\n    /// @notice Sets a new withdrawal queue.\\n    /// @param newQueue The new withdrawal queue.\\n    /// @dev Strategies that are untrusted, duplicated, or have no balance are\\n    /// filtered out when encountered at withdrawal time, not validated upfront.\\n    function setWithdrawalQueue(Strategy[] calldata newQueue)\\n        external\\n        requiresAuth\\n    {\\n        // Ensure the new queue is not larger than the maximum stack size.\\n        require(newQueue.length <= MAX_WITHDRAWAL_STACK_SIZE, \\\"STACK_TOO_BIG\\\");\\n\\n        // Replace the withdrawal queue.\\n        withdrawalQueue = newQueue;\\n\\n        emit WithdrawalQueueSet(msg.sender, newQueue);\\n    }\\n\\n    /// @notice Replaces an index in the withdrawal queue with another strategy.\\n    /// @param index The index in the queue to replace.\\n    /// @param replacementStrategy The strategy to override the index with.\\n    /// @dev Strategies that are untrusted, duplicated, or have no balance are\\n    /// filtered out when encountered at withdrawal time, not validated upfront.\\n    function replaceWithdrawalQueueIndex(\\n        uint256 index,\\n        Strategy replacementStrategy\\n    ) public requiresAuth {\\n        // Get the (soon to be) replaced strategy.\\n        Strategy replacedStrategy = withdrawalQueue[index];\\n\\n        // Update the index with the replacement strategy.\\n        withdrawalQueue[index] = replacementStrategy;\\n\\n        emit WithdrawalQueueIndexReplaced(\\n            msg.sender,\\n            index,\\n            replacedStrategy,\\n            replacementStrategy\\n        );\\n    }\\n\\n    /// @notice Moves the strategy at the tip of the queue to the specified index and pop the tip off the queue.\\n    /// @param index The index of the strategy in the withdrawal queue to replace with the tip.\\n    function replaceWithdrawalQueueIndexWithTip(uint256 index)\\n        external\\n        requiresAuth\\n    {\\n        // Get the (soon to be) previous tip and strategy we will replace at the index.\\n        Strategy previousTipStrategy = withdrawalQueue[\\n            withdrawalQueue.length - 1\\n        ];\\n        Strategy replacedStrategy = withdrawalQueue[index];\\n\\n        // Replace the index specified with the tip of the queue.\\n        withdrawalQueue[index] = previousTipStrategy;\\n\\n        // Remove the now duplicated tip from the array.\\n        withdrawalQueue.pop();\\n\\n        emit WithdrawalQueueIndexReplacedWithTip(\\n            msg.sender,\\n            index,\\n            replacedStrategy,\\n            previousTipStrategy\\n        );\\n    }\\n\\n    /// @notice Swaps two indexes in the withdrawal queue.\\n    /// @param index1 One index involved in the swap\\n    /// @param index2 The other index involved in the swap.\\n    function swapWithdrawalQueueIndexes(uint256 index1, uint256 index2)\\n        external\\n        requiresAuth\\n    {\\n        // Get the (soon to be) new strategies at each index.\\n        Strategy newStrategy2 = withdrawalQueue[index1];\\n        Strategy newStrategy1 = withdrawalQueue[index2];\\n\\n        // Swap the strategies at both indexes.\\n        withdrawalQueue[index1] = newStrategy1;\\n        withdrawalQueue[index2] = newStrategy2;\\n\\n        emit WithdrawalQueueIndexesSwapped(\\n            msg.sender,\\n            index1,\\n            index2,\\n            newStrategy1,\\n            newStrategy2\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         SEIZE STRATEGY LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted after a strategy is seized.\\n    /// @param user The authorized user who triggered the seize.\\n    /// @param strategy The strategy that was seized.\\n    event StrategySeized(address indexed user, Strategy indexed strategy);\\n\\n    /// @notice Seizes a strategy.\\n    /// @param strategy The strategy to seize.\\n    /// @dev Intended for use in emergencies or other extraneous situations where the\\n    /// strategy requires interaction outside of the Vault's standard operating procedures.\\n    function seizeStrategy(Strategy strategy, IERC20[] calldata tokens)\\n        external\\n        nonReentrant\\n        requiresAuth\\n    {\\n        // Get the strategy's last reported balance of underlying tokens.\\n        uint256 strategyBalance = getStrategyData[strategy].balance;\\n\\n        // if there are any tokens left, transfer them to owner\\n        Strategy(strategy).emergencyWithdraw(owner(), tokens);\\n\\n        // Set the strategy's balance to 0.\\n        getStrategyData[strategy].balance = 0;\\n\\n        // If the strategy's balance exceeds the Vault's current\\n        // holdings, instantly unlock any remaining locked profit.\\n        // use Withdraw holdings because we want to subtract lockedProfits in check\\n        if (strategyBalance > totalHoldingsLock(PnlLock.Withdraw))\\n            maxLockedProfit = 0;\\n\\n        unchecked {\\n            // Decrease totalStrategyHoldings to account for the seize.\\n            // Cannot underflow as the balance of one strategy will never exceed the sum of all.\\n            totalStrategyHoldings -= strategyBalance;\\n        }\\n\\n        emit StrategySeized(msg.sender, strategy);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             FEE CLAIM LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted after fees are claimed.\\n    /// @param user The authorized user who claimed the fees.\\n    /// @param rvTokenAmount The amount of rvTokens that were claimed.\\n    event FeesClaimed(address indexed user, uint256 rvTokenAmount);\\n\\n    /// @notice Claims fees accrued from harvests.\\n    /// @param rvTokenAmount The amount of rvTokens to claim.\\n    /// @dev Accrued fees are measured as rvTokens held by the Vault.\\n    function claimFees(uint256 rvTokenAmount) external requiresAuth {\\n        emit FeesClaimed(msg.sender, rvTokenAmount);\\n\\n        // Transfer the provided amount of rvTokens to the caller.\\n        IERC20(address(this)).safeTransfer(msg.sender, rvTokenAmount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          RECIEVE ETHER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Required for the Vault to receive unwrapped ETH.\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          UPGRADE VARS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 private _maxTvl;\\n    uint256 private _stratMaxTvl;\\n    bool private _isPublic;\\n\\n    /// @notice The amount of locked profit at the end of the last harvest.\\n    uint128 public maxLockedLoss;\\n\\n    enum PnlLock {\\n        None,\\n        Deposit,\\n        Withdraw\\n    }\\n\\n    uint256 public version;\\n}\\n\",\"keccak256\":\"0x54d501924ff2d87ae3ea24a9da6b11e5c95149ece60dfa9613e3bb110b70a3ba\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Transmissions11 and JetJadeja",
    "events": {
      "Deposit(address,uint256)": {
        "params": {
          "underlyingAmount": "The amount of underlying tokens that were deposited.",
          "user": "The address that deposited into the Vault."
        }
      },
      "FeePercentUpdated(address,uint256)": {
        "params": {
          "newFeePercent": "The new fee percentage.",
          "user": "The authorized user who triggered the update."
        }
      },
      "FeesClaimed(address,uint256)": {
        "params": {
          "rvTokenAmount": "The amount of rvTokens that were claimed.",
          "user": "The authorized user who claimed the fees."
        }
      },
      "Harvest(address,address[])": {
        "params": {
          "strategies": "The trusted strategies that were harvested.",
          "user": "The authorized user who triggered the harvest."
        }
      },
      "HarvestDelayUpdateScheduled(address,uint64)": {
        "params": {
          "newHarvestDelay": "The scheduled updated harvest delay.",
          "user": "The authorized user who triggered the update."
        }
      },
      "HarvestDelayUpdated(address,uint64)": {
        "params": {
          "newHarvestDelay": "The new harvest delay.",
          "user": "The authorized user who triggered the update."
        }
      },
      "HarvestWindowUpdated(address,uint128)": {
        "params": {
          "newHarvestWindow": "The new harvest window.",
          "user": "The authorized user who triggered the update."
        }
      },
      "Initialized(address)": {
        "params": {
          "user": "The authorized user who triggered the initialization."
        }
      },
      "StrategyDeposit(address,address,uint256)": {
        "params": {
          "strategy": "The strategy that was deposited into.",
          "underlyingAmount": "The amount of underlying tokens that were deposited.",
          "user": "The authorized user who triggered the deposit."
        }
      },
      "StrategyDistrusted(address,address)": {
        "params": {
          "strategy": "The strategy that became untrusted.",
          "user": "The authorized user who untrusted the strategy."
        }
      },
      "StrategySeized(address,address)": {
        "params": {
          "strategy": "The strategy that was seized.",
          "user": "The authorized user who triggered the seize."
        }
      },
      "StrategyTrusted(address,address)": {
        "params": {
          "strategy": "The strategy that became trusted.",
          "user": "The authorized user who trusted the strategy."
        }
      },
      "StrategyWithdrawal(address,address,uint256)": {
        "params": {
          "strategy": "The strategy that was withdrawn from.",
          "underlyingAmount": "The amount of underlying tokens that were withdrawn.",
          "user": "The authorized user who triggered the withdrawal."
        }
      },
      "TargetFloatPercentUpdated(address,uint256)": {
        "params": {
          "newTargetFloatPercent": "The new target float percentage.",
          "user": "The authorized user who triggered the update."
        }
      },
      "UnderlyingIsWETHUpdated(address,bool)": {
        "params": {
          "newUnderlyingIsWETH": "Whether the Vault nows treats the underlying as WETH.",
          "user": "The authorized user who triggered the update."
        }
      },
      "Withdraw(address,uint256)": {
        "params": {
          "underlyingAmount": "The amount of underlying tokens that were withdrawn.",
          "user": "The address that withdrew from the Vault."
        }
      },
      "WithdrawalQueueIndexReplaced(address,uint256,address,address)": {
        "params": {
          "index": "The index of the replaced strategy in the withdrawal queue.",
          "replacedStrategy": "The strategy in the withdrawal queue that was replaced.",
          "replacementStrategy": "The strategy that overrode the replaced strategy at the index.",
          "user": "The authorized user who triggered the replacement."
        }
      },
      "WithdrawalQueueIndexReplacedWithTip(address,uint256,address,address)": {
        "params": {
          "index": "The index of the replaced strategy in the withdrawal queue.",
          "previousTipStrategy": "The previous tip of the queue that replaced the strategy.",
          "replacedStrategy": "The strategy in the withdrawal queue replaced by the tip.",
          "user": "The authorized user who triggered the replacement."
        }
      },
      "WithdrawalQueueIndexesSwapped(address,uint256,uint256,address,address)": {
        "params": {
          "index1": "One index involved in the swap",
          "index2": "The other index involved in the swap.",
          "newStrategy1": "The strategy (previously at index2) that replaced index1.",
          "newStrategy2": "The strategy (previously at index1) that replaced index2.",
          "user": "The authorized user who triggered the swap."
        }
      },
      "WithdrawalQueuePopped(address,address)": {
        "params": {
          "poppedStrategy": "The strategy popped from the withdrawal queue.",
          "user": "The authorized user who triggered the pop."
        }
      },
      "WithdrawalQueuePushed(address,address)": {
        "params": {
          "pushedStrategy": "The strategy pushed to the withdrawal queue.",
          "user": "The authorized user who triggered the push."
        }
      },
      "WithdrawalQueueSet(address,address[])": {
        "params": {
          "replacedWithdrawalQueue": "The new withdrawal queue.",
          "user": "The authorized user who triggered the set."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addStrategy(address)": {
        "params": {
          "strategy": "The strategy to add."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "balanceOfUnderlying(address)": {
        "params": {
          "user": "The user to get the underlying balance of."
        },
        "returns": {
          "_0": "The user's Vault balance in underlying tokens."
        }
      },
      "claimFees(uint256)": {
        "details": "Accrued fees are measured as rvTokens held by the Vault.",
        "params": {
          "rvTokenAmount": "The amount of rvTokens to claim."
        }
      },
      "cleanWithdrawalQueue()": {
        "details": "This is a public method to ensure admin cannot fill the queue"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "underlyingAmount": "The amount of the underlying token to deposit."
        }
      },
      "depositIntoStrategy(address,uint256)": {
        "params": {
          "strategy": "The trusted strategy to deposit into.",
          "underlyingAmount": "The amount of underlying tokens in float to deposit."
        }
      },
      "distrustStrategy(address)": {
        "params": {
          "strategy": "The strategy to make untrusted."
        }
      },
      "exchangeRate()": {
        "returns": {
          "_0": "The amount of underlying tokens an rvToken can be redeemed for."
        }
      },
      "exchangeRateLock(uint8)": {
        "returns": {
          "_0": "The amount of underlying tokens an rvToken can be redeemed for."
        }
      },
      "getWithdrawalQueue()": {
        "details": "This is provided because Solidity converts public arrays into index getters, but we need a way to allow external contracts and users to access the whole array.",
        "returns": {
          "_0": "An ordered array of strategies representing the withdrawal queue."
        }
      },
      "harvest(address[])": {
        "details": "Will always revert if called outside of an active harvest window or before the harvest delay has passed.",
        "params": {
          "strategies": "The trusted strategies to harvest."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,address,uint256,uint64,uint128)": {
        "params": {
          "_UNDERLYING": "The ERC20 compliant token the Vault should accept."
        }
      },
      "lockedProfit()": {
        "returns": {
          "_0": "The current amount of locked profit."
        }
      },
      "migrateStrategy(address,address,uint256)": {
        "params": {
          "newStrategy": "The strategy to add.",
          "prevStrategy": "The strategy to remove."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "popFromWithdrawalQueue()": {
        "details": "Be careful, another authorized user could push a different strategy than expected to the queue while a popFromWithdrawalQueue transaction is pending."
      },
      "pushToWithdrawalQueue(address)": {
        "details": "Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront.",
        "params": {
          "strategy": "The strategy to be inserted at the front of the withdrawal queue."
        }
      },
      "pushToWithdrawalQueueValidated(address)": {
        "details": "This is a public method to ensure admin cannot prevent withdrawals by emptying the queue",
        "params": {
          "strategy": "The strategy to be inserted at the front of the withdrawal queue."
        }
      },
      "redeem(uint256)": {
        "params": {
          "rvTokenAmount": "The amount of rvTokens to redeem for underlying tokens."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "replaceWithdrawalQueueIndex(uint256,address)": {
        "details": "Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront.",
        "params": {
          "index": "The index in the queue to replace.",
          "replacementStrategy": "The strategy to override the index with."
        }
      },
      "replaceWithdrawalQueueIndexWithTip(uint256)": {
        "params": {
          "index": "The index of the strategy in the withdrawal queue to replace with the tip."
        }
      },
      "seizeStrategy(address,address[])": {
        "details": "Intended for use in emergencies or other extraneous situations where the strategy requires interaction outside of the Vault's standard operating procedures.",
        "params": {
          "strategy": "The strategy to seize."
        }
      },
      "setFeePercent(uint256)": {
        "params": {
          "newFeePercent": "The new fee percentage."
        }
      },
      "setHarvestDelay(uint64)": {
        "details": "If the current harvest delay is 0, meaning it has not been set before, it will be updated immediately, otherwise it will be scheduled to take effect after the next harvest.",
        "params": {
          "newHarvestDelay": "The new harvest delay to set."
        }
      },
      "setHarvestWindow(uint128)": {
        "details": "The Vault's harvestDelay must already be set before calling.",
        "params": {
          "newHarvestWindow": "The new harvest window."
        }
      },
      "setTargetFloatPercent(uint256)": {
        "params": {
          "newTargetFloatPercent": "The new target float percentage."
        }
      },
      "setUnderlyingIsWETH(bool)": {
        "details": "The underlying token must have 18 decimals, to match Ether's decimal scheme.",
        "params": {
          "newUnderlyingIsWETH": "Whether the Vault should treat the underlying as WETH."
        }
      },
      "setWithdrawalQueue(address[])": {
        "details": "Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront.",
        "params": {
          "newQueue": "The new withdrawal queue."
        }
      },
      "swapWithdrawalQueueIndexes(uint256,uint256)": {
        "params": {
          "index1": "One index involved in the swap",
          "index2": "The other index involved in the swap."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalFloat()": {
        "returns": {
          "_0": "The amount of underlying tokens that sit idly in the Vault."
        }
      },
      "totalHoldings()": {
        "returns": {
          "_0": "totalUnderlyingHeld The total amount of underlying tokens the Vault holds."
        }
      },
      "totalHoldingsLock(uint8)": {
        "returns": {
          "totalUnderlyingHeld": "The total amount of underlying tokens the Vault holds."
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "trustStrategy(address)": {
        "params": {
          "strategy": "The strategy to make trusted."
        }
      },
      "withdraw(uint256)": {
        "params": {
          "underlyingAmount": "The amount of underlying tokens to withdraw."
        }
      },
      "withdrawFromStrategy(address,uint256)": {
        "details": "Withdrawing from a strategy will not remove it from the withdrawal queue.",
        "params": {
          "strategy": "The strategy to withdraw from.",
          "underlyingAmount": "The amount of underlying tokens to withdraw."
        }
      }
    },
    "stateVariables": {
      "BASE_UNIT": {
        "details": "Equal to 10 ** decimals. Used for fixed point arithmetic."
      },
      "MAX_WITHDRAWAL_STACK_SIZE": {
        "details": "Needed to prevent denial of service attacks by queue operators."
      },
      "feePercent": {
        "details": "A fixed point number where 1e18 represents 100% and 0 represents 0%."
      },
      "harvestDelay": {
        "details": "Cannot be 0 as it opens harvests up to sandwich attacks."
      },
      "harvestWindow": {
        "details": "Long harvest windows open the Vault up to profit distribution slowdown attacks."
      },
      "lastHarvestWindowStart": {
        "details": "May be equal to lastHarvest if there was/has only been one harvest in the most last/current window."
      },
      "nextHarvestDelay": {
        "details": "In the case that the next delay is 0, no update will be applied."
      },
      "targetFloatPercent": {
        "details": "A fixed point number where 1e18 represents 100% and 0 represents 0%."
      },
      "totalStrategyHoldings": {
        "details": "Includes maxLockedProfit, must be correctly subtracted to compute available/free holdings."
      },
      "underlyingIsWETH": {
        "details": "If enabled the Vault will allow trusting strategies that accept Ether."
      },
      "withdrawalQueue": {
        "details": "The queue is processed in descending order, meaning the last index will be withdrawn from first.Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at withdrawal time, not validated upfront, meaning the queue may not reflect the \"true\" set used for withdrawals."
      }
    },
    "title": "Rari Vault (rvToken)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256)": {
        "notice": "Emitted after a successful deposit."
      },
      "FeePercentUpdated(address,uint256)": {
        "notice": "Emitted when the fee percentage is updated."
      },
      "FeesClaimed(address,uint256)": {
        "notice": "Emitted after fees are claimed."
      },
      "Harvest(address,address[])": {
        "notice": "Emitted after a successful harvest."
      },
      "HarvestDelayUpdateScheduled(address,uint64)": {
        "notice": "Emitted when the harvest delay is scheduled to be updated next harvest."
      },
      "HarvestDelayUpdated(address,uint64)": {
        "notice": "Emitted when the harvest delay is updated."
      },
      "HarvestWindowUpdated(address,uint128)": {
        "notice": "Emitted when the harvest window is updated."
      },
      "Initialized(address)": {
        "notice": "Emitted when the Vault is initialized."
      },
      "StrategyDeposit(address,address,uint256)": {
        "notice": "Emitted after the Vault deposits into a strategy contract."
      },
      "StrategyDistrusted(address,address)": {
        "notice": "Emitted when a strategy is set to untrusted."
      },
      "StrategySeized(address,address)": {
        "notice": "Emitted after a strategy is seized."
      },
      "StrategyTrusted(address,address)": {
        "notice": "Emitted when a strategy is set to trusted."
      },
      "StrategyWithdrawal(address,address,uint256)": {
        "notice": "Emitted after the Vault withdraws funds from a strategy contract."
      },
      "TargetFloatPercentUpdated(address,uint256)": {
        "notice": "Emitted when the target float percentage is updated."
      },
      "UnderlyingIsWETHUpdated(address,bool)": {
        "notice": "Emitted when whether the Vault should treat the underlying as WETH is updated."
      },
      "Withdraw(address,uint256)": {
        "notice": "Emitted after a successful withdrawal."
      },
      "WithdrawalQueueIndexReplaced(address,uint256,address,address)": {
        "notice": "Emitted when an index in the withdrawal queue is replaced."
      },
      "WithdrawalQueueIndexReplacedWithTip(address,uint256,address,address)": {
        "notice": "Emitted when an index in the withdrawal queue is replaced with the tip."
      },
      "WithdrawalQueueIndexesSwapped(address,uint256,uint256,address,address)": {
        "notice": "Emitted when the strategies at two indexes are swapped."
      },
      "WithdrawalQueuePopped(address,address)": {
        "notice": "Emitted when a strategy is popped from the withdrawal queue."
      },
      "WithdrawalQueuePushed(address,address)": {
        "notice": "Emitted when a strategy is pushed to the withdrawal queue."
      },
      "WithdrawalQueueSet(address,address[])": {
        "notice": "Emitted when the withdrawal queue is updated."
      }
    },
    "kind": "user",
    "methods": {
      "BASE_UNIT()": {
        "notice": "The base unit of the underlying token and hence rvToken."
      },
      "UNDERLYING()": {
        "notice": "The underlying token the Vault accepts."
      },
      "addStrategy(address)": {
        "notice": "Helper method to add strategy and push it to the que in one tx."
      },
      "balanceOfUnderlying(address)": {
        "notice": "Returns a user's Vault balance in underlying tokens."
      },
      "claimFees(uint256)": {
        "notice": "Claims fees accrued from harvests."
      },
      "cleanWithdrawalQueue()": {
        "notice": "Removes duplicates or untrusted strategies."
      },
      "constructor": {
        "notice": "security: marks implementation contract as initialized"
      },
      "deposit(uint256)": {
        "notice": "Deposit a specific amount of underlying tokens."
      },
      "depositIntoStrategy(address,uint256)": {
        "notice": "Deposit a specific amount of float into a trusted strategy."
      },
      "distrustStrategy(address)": {
        "notice": "Stores a strategy as untrusted, disabling it from being harvested."
      },
      "exchangeRate()": {
        "notice": "Returns the amount of underlying tokens an rvToken can be redeemed for."
      },
      "exchangeRateLock(uint8)": {
        "notice": "Returns the amount of underlying tokens an rvToken can be redeemed for."
      },
      "feePercent()": {
        "notice": "The percentage of profit recognized each harvest to reserve as fees."
      },
      "getStrategyData(address)": {
        "notice": "Maps strategies to data the Vault holds on them."
      },
      "getWithdrawalQueue()": {
        "notice": "Gets the full withdrawal queue."
      },
      "harvest(address[])": {
        "notice": "Harvest a set of trusted strategies."
      },
      "harvestDelay()": {
        "notice": "The period in seconds over which locked profit is unlocked."
      },
      "harvestWindow()": {
        "notice": "The period in seconds during which multiple harvests can occur regardless if they are taking place before the harvest delay has elapsed."
      },
      "initialize(address,address,address,uint256,uint64,uint128)": {
        "notice": "Creates a new Vault that accepts a specific underlying token."
      },
      "lastHarvest()": {
        "notice": "A timestamp representing when the most recent harvest occurred."
      },
      "lastHarvestWindowStart()": {
        "notice": "A timestamp representing when the first harvest in the most recent harvest window occurred."
      },
      "lockedProfit()": {
        "notice": "Calculates the current amount of locked profit."
      },
      "maxLockedLoss()": {
        "notice": "The amount of locked profit at the end of the last harvest."
      },
      "maxLockedProfit()": {
        "notice": "The amount of locked profit at the end of the last harvest."
      },
      "migrateStrategy(address,address,uint256)": {
        "notice": "Helper method to migrate strategy to a new implementation."
      },
      "nextHarvestDelay()": {
        "notice": "The value that will replace harvestDelay next harvest."
      },
      "popFromWithdrawalQueue()": {
        "notice": "Removes the strategy at the tip of the withdrawal queue."
      },
      "pushToWithdrawalQueue(address)": {
        "notice": "Pushes a single strategy to front of the withdrawal queue."
      },
      "pushToWithdrawalQueueValidated(address)": {
        "notice": "Pushes a single strategy to front of the withdrawal queue with validation."
      },
      "redeem(uint256)": {
        "notice": "Redeem a specific amount of rvTokens for underlying tokens."
      },
      "replaceWithdrawalQueueIndex(uint256,address)": {
        "notice": "Replaces an index in the withdrawal queue with another strategy."
      },
      "replaceWithdrawalQueueIndexWithTip(uint256)": {
        "notice": "Moves the strategy at the tip of the queue to the specified index and pop the tip off the queue."
      },
      "seizeStrategy(address,address[])": {
        "notice": "Seizes a strategy."
      },
      "setFeePercent(uint256)": {
        "notice": "Sets a new fee percentage."
      },
      "setHarvestDelay(uint64)": {
        "notice": "Sets a new harvest delay."
      },
      "setHarvestWindow(uint128)": {
        "notice": "Sets a new harvest window."
      },
      "setTargetFloatPercent(uint256)": {
        "notice": "Set a new target float percentage."
      },
      "setUnderlyingIsWETH(bool)": {
        "notice": "Sets whether the Vault treats the underlying as WETH."
      },
      "setWithdrawalQueue(address[])": {
        "notice": "Sets a new withdrawal queue."
      },
      "swapWithdrawalQueueIndexes(uint256,uint256)": {
        "notice": "Swaps two indexes in the withdrawal queue."
      },
      "targetFloatPercent()": {
        "notice": "The desired percentage of the Vault's holdings to keep as float."
      },
      "totalFloat()": {
        "notice": "Returns the amount of underlying tokens that idly sit in the Vault."
      },
      "totalHoldings()": {
        "notice": "Calculates the total amount of underlying tokens the Vault holds."
      },
      "totalHoldingsLock(uint8)": {
        "notice": "Calculates the total amount of underlying tokens the Vault holds."
      },
      "totalStrategyHoldings()": {
        "notice": "The total amount of underlying tokens held in strategies at the time of the last harvest."
      },
      "trustStrategy(address)": {
        "notice": "Stores a strategy as trusted, enabling it to be harvested."
      },
      "underlyingIsWETH()": {
        "notice": "Whether the Vault should treat the underlying token as WETH compatible."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw a specific amount of underlying tokens."
      },
      "withdrawFromStrategy(address,uint256)": {
        "notice": "Withdraw a specific amount of underlying tokens from a strategy."
      },
      "withdrawalQueue(uint256)": {
        "notice": "An ordered array of strategies representing the withdrawal queue."
      }
    },
    "notice": "Flexible, minimalist, and gas-optimized yield aggregator for earning interest on any ERC20 token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1256,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 275,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 281,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 283,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 285,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 287,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 868,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 23428,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "UNDERLYING",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)2997"
      },
      {
        "astId": 23431,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "BASE_UNIT",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 23433,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_decimals",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 23619,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_allowed",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23715,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_managers",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23775,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "feePercent",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 23832,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "harvestWindow",
        "offset": 0,
        "slot": "207",
        "type": "t_uint128"
      },
      {
        "astId": 23835,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "harvestDelay",
        "offset": 16,
        "slot": "207",
        "type": "t_uint64"
      },
      {
        "astId": 23838,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "nextHarvestDelay",
        "offset": 24,
        "slot": "207",
        "type": "t_uint64"
      },
      {
        "astId": 23916,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "targetFloatPercent",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 23952,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "underlyingIsWETH",
        "offset": 0,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 23998,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "totalStrategyHoldings",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 24010,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "getStrategyData",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_contract(Strategy)12904,t_struct(StrategyData)24003_storage)"
      },
      {
        "astId": 24013,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "lastHarvestWindowStart",
        "offset": 0,
        "slot": "212",
        "type": "t_uint64"
      },
      {
        "astId": 24016,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "lastHarvest",
        "offset": 8,
        "slot": "212",
        "type": "t_uint64"
      },
      {
        "astId": 24019,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "maxLockedProfit",
        "offset": 16,
        "slot": "212",
        "type": "t_uint128"
      },
      {
        "astId": 24024,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "withdrawalQueue",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_contract(Strategy)12904)dyn_storage"
      },
      {
        "astId": 25958,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_maxTvl",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 25960,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_stratMaxTvl",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 25962,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "_isPublic",
        "offset": 0,
        "slot": "216",
        "type": "t_bool"
      },
      {
        "astId": 25965,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "maxLockedLoss",
        "offset": 1,
        "slot": "216",
        "type": "t_uint128"
      },
      {
        "astId": 25971,
        "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
        "label": "version",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Strategy)12904)dyn_storage": {
        "base": "t_contract(Strategy)12904",
        "encoding": "dynamic_array",
        "label": "contract Strategy[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2997": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Strategy)12904": {
        "encoding": "inplace",
        "label": "contract Strategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(Strategy)12904,t_struct(StrategyData)24003_storage)": {
        "encoding": "mapping",
        "key": "t_contract(Strategy)12904",
        "label": "mapping(contract Strategy => struct VaultUpgradable.StrategyData)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyData)24003_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(StrategyData)24003_storage": {
        "encoding": "inplace",
        "label": "struct VaultUpgradable.StrategyData",
        "members": [
          {
            "astId": 24000,
            "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
            "label": "trusted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 24002,
            "contract": "src/vault/VaultUpgradable.sol:VaultUpgradable",
            "label": "balance",
            "offset": 1,
            "slot": "0",
            "type": "t_uint248"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}