{
  "language": "Solidity",
  "sources": {
    "src/hardahat-mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { AggregatorV2V3Interface } from \"../interfaces/chainlink/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n\tuint256 public constant override version = 0;\n\n\tuint8 public override decimals;\n\tint256 public override latestAnswer;\n\t  uint256 public override latestTimestamp;\n\tuint256 public override latestRound;\n\n\tmapping(uint256 => int256) public override getAnswer;\n\tmapping(uint256 => uint256) public override getTimestamp;\n\tmapping(uint256 => uint256) private getStartedAt;\n\n\tconstructor(uint8 _decimals, int256 _initialAnswer) {\n\t\tdecimals = _decimals;\n\t\tupdateAnswer(_initialAnswer);\n\t}\n\n\tfunction setDecimals(uint8 _decimals) public {\n\t\tdecimals = _decimals;\n\t}\n\n\tfunction updateAnswer(int256 _answer) public {\n\t\tlatestAnswer = _answer;\n\t\tlatestTimestamp = block.timestamp;\n\t\tlatestRound++;\n\t\tgetAnswer[latestRound] = _answer;\n\t\tgetTimestamp[latestRound] = block.timestamp;\n\t\tgetStartedAt[latestRound] = block.timestamp;\n\t}\n\n\tfunction updateRoundData(\n\t\tuint80 _roundId,\n\t\tint256 _answer,\n\t\tuint256 _timestamp,\n\t\tuint256 _startedAt\n\t) public {\n\t\tlatestRound = _roundId;\n\t\tlatestAnswer = _answer;\n\t\tlatestTimestamp = _timestamp;\n\t\tgetAnswer[latestRound] = _answer;\n\t\tgetTimestamp[latestRound] = _timestamp;\n\t\tgetStartedAt[latestRound] = _startedAt;\n\t}\n\n\tfunction getRoundData(uint80 _roundId)\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t)\n\t{\n\t\treturn (\n\t\t\t_roundId,\n\t\t\tgetAnswer[_roundId],\n\t\t\tgetStartedAt[_roundId],\n\t\t\tgetTimestamp[_roundId],\n\t\t\t_roundId\n\t\t);\n\t}\n\n\tfunction latestRoundData()\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t)\n\t{\n\t\treturn (\n\t\t\tuint80(latestRound),\n\t\t\tgetAnswer[latestRound],\n\t\t\tgetStartedAt[latestRound],\n\t\t\tgetTimestamp[latestRound],\n\t\t\tuint80(latestRound)\n\t\t);\n\t}\n\n\tfunction description() external pure override returns (string memory) {\n\t\treturn \"v0.6/tests/MockV3Aggregator.sol\";\n\t}\n}\n"
    },
    "src/interfaces/chainlink/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title The V2 & V3 Aggregator Interface\n * @notice Solidity V0.5 does not allow interfaces to inherit from other\n * interfaces so this contract is a combination of v0.5 AggregatorInterface.sol\n * and v0.5 AggregatorV3Interface.sol.\n */\ninterface AggregatorV2V3Interface {\n\t//\n\t// V2 Interface:\n\t//\n\tfunction latestAnswer() external view returns (int256);\n\n\tfunction latestTimestamp() external view returns (uint256);\n\n\tfunction latestRound() external view returns (uint256);\n\n\tfunction getAnswer(uint256 roundId) external view returns (int256);\n\n\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\n\n\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n\n\t//\n\t// V3 Interface:\n\t//\n\tfunction decimals() external view returns (uint8);\n\n\tfunction description() external view returns (string memory);\n\n\tfunction version() external view returns (uint256);\n\n\t// getRoundData and latestRoundData should both raise \"No data present\"\n\t// if they do not have data to report, instead of returning unset values\n\t// which could be misinterpreted as actual reported values.\n\tfunction getRoundData(uint80 _roundId)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t);\n\n\tfunction latestRoundData()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}